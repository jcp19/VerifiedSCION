package prometheus


type Desc (:: NamedType) struct {
  fqName (:: Field) string
  help (:: Field) string
  variableLabels (:: Field) []string
  id (:: Field) uint64
  dimHash (:: Field) uint64
  err (:: Field) error (:: NamedType)
}

pred (d (:: ReceiverParameter) *Desc (:: NamedType)) Mem (:: MPredicateImpl)()

requires forall i (:: BoundVariable): int ::  0 <= i (:: BoundVariable) && i (:: BoundVariable) < len(variableLabels (:: InParameter)) ==> acc(&variableLabels (:: InParameter)[i (:: BoundVariable)], 1 / 10000)
ensures res (:: OutParameter).Mem (:: MPredicateImpl)()
func NewDesc (:: Function)(fqName (:: InParameter) string, help (:: InParameter) string, variableLabels (:: InParameter) []string, constLabels (:: InParameter) Labels (:: non-regular entity)) (res (:: OutParameter) *Desc (:: NamedType))

ensures res (:: OutParameter).Mem (:: MPredicateImpl)()
func NewInvalidDesc (:: Function)(err (:: InParameter) error (:: NamedType)) (res (:: OutParameter) *Desc (:: NamedType))

func (d (:: ReceiverParameter) *Desc (:: NamedType)) String (:: MethodImpl)() (string)

