// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

// This package contains some lemmas that are useful to deal with bitwise
// operations in a scalable way. Even though we don't include proofs here, we
// have checked them by hand.

package bitwise

ghost
pure
ensures 0 <= b & 0x3 && b & 0x3 <= 3
ensures b == 0 ==> res == 0
ensures b == 3 ==> res == 3
ensures b == 4 ==> res == 0
ensures res == b & 0x3
decreases
func BitAnd3(b int) (res int)

ghost
pure
ensures 0 <= b & 0x7 && b & 0x7 <= 7
ensures res == b & 0x7
decreases
func BitAnd7(b int) (res int)

ghost
pure
ensures 0 <= uint8(b >> 30) && uint8(b >> 30) < 4
ensures res == uint8(b >> 30)
decreases
func First2Bits(b uint32) (res uint8)

ghost
pure
requires b < 2147483648
ensures  a >> 30 == (a | b) >> 30
ensures  res == uint8(a >> 30)
decreases
func PreservesFirst2Bits(a uint32, b uint32) (res uint8)

ghost
pure
requires 0 <= b && b <= 24
ensures uint32(a & 0x3F) << b < 2147483648
ensures res == uint32(a & 0x3F) << b
decreases
func LessThan2to31(a uint8, b int) (res uint32)

ghost
pure
requires 0 <= b && b <= 16
ensures 0 <= uint32(a) << b && uint32(a) << b < 2147483648
ensures res == uint32(a) << b
decreases
func LessThan2to31_byte(a uint8, b int) (res uint32)

ghost
pure
requires 0 <= a && a < 2147483648
requires 0 <= b && b < 2147483648
ensures 0 <= a | b && a | b < 2147483648
ensures res == a | b
decreases
func LessThan2to31_bitwiseOr(a uint32, b uint32) (res uint32)

ghost
pure
ensures a == a << 0
ensures res == a
decreases
func ShiftBy0(a uint32) (res uint32)

ghost
pure
ensures uint8(a >> 24) >> 6 == uint8(a >> 30)
ensures res == uint8(a >> 30)
decreases
func ShiftBy24and6(a uint32) (res uint8)

ghost
pure
ensures a | b == b | a
ensures res == a | b
decreases
func BitOrCommutative(a uint32, b uint32) (res uint32)

ghost
pure
ensures uint8(uint32(a) << 24) >> 30 == a >> 6
ensures res == a >> 6
decreases
func ShiftBy24and30(a uint8) (res uint8)

ghost
pure
requires 0 <= CurrINF && CurrINF < 4
requires 0 <= SegLen0 && SegLen0 <= 0x3F
requires 0 <= SegLen1 && SegLen1 <= 0x3F
requires 0 <= SegLen2 && SegLen2 <= 0x3F
ensures uint8(line >> 30) == CurrINF
ensures uint8(line >> 24) >> 6 == CurrINF
ensures uint8(line >> 12) &0x3F == SegLen0
ensures (uint8(line >> 8) >> 4 | (uint8(line >> 16) << 4)) & 0x3F == SegLen0
ensures uint8(line >> 6) &0x3F == SegLen1
ensures (uint8(line >> 6) | uint8(line >> 8) << 2) &0x3F == SegLen1
ensures uint8(line) &0x3F == SegLen2
ensures line == uint32(CurrINF)<<30 | uint32(CurrHF & 0x3F)<<24 | uint32(SegLen0 & 0x3F)<<12 | uint32(SegLen1 & 0x3F)<<6 | uint32(SegLen2 & 0x3F)
decreases
func SerializingHdr(CurrINF, CurrHF, SegLen0, SegLen1, SegLen2 uint8) (line uint32)
