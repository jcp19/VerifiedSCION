// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package router

import (
	"net"

	"github.com/scionproto/scion/pkg/addr"
)

pred (s *services) Mem() {
	s.mtx.LockP() &&
	s.mtx.LockInv() == internalLockInv!<s!>;
}

pred internalLockInv(s *services) {
	acc(&s.m) &&
	acc(s.m) &&
	// injectivity constraints - no two slices in s.m are the same. Enforced by all methods
	forall host1, host2 addr.HostSVC :: { s.m[host1], s.m[host2] } (host1 != host2 && notEqual(s.m[host1], nil)) ==> notEqual(s.m[host1], s.m[host2]) &&
	// we can read all keys stored in the map
	forall k addr.HostSVC :: k in domain(s.m) ==> validMapValue(k, s.m[k])
}

pred validMapValue(_ addr.HostSVC, udpSlice []*net.UDPAddr) {
	(forall i, j int :: { &udpSlice[i], &udpSlice[j] } (0 <= i && i < len(udpSlice) && 0 <= j && j < len(udpSlice) && i != j) ==> &udpSlice[i] != &udpSlice[j]) &&
	(forall i int :: 0 <= i && i < len(udpSlice) ==> acc(&udpSlice[i])) &&
	// New version because of injectivity
	(forall u *net.UDPAddr :: u in sliceToSet(udpSlice) ==> acc(u.Mem(), _))
}

// The following function is a trick to avoid a bug in Gobra. If we inline this function
// definition, Gobra complains with:
//     [info] An assumption was violated during execution.
//     [info] Logic error: got unexpected type InternalSingleMulti([]*UDPAddr,([]*UDPAddr,bool))
ghost
pure func notEqual(udpSlice1 []*net.UDPAddr, udpSlice2 []*net.UDPAddr) bool {
	return udpSlice1 != udpSlice2
}

ghost
requires acc(a.Mem(), _) && acc(o.Mem(), _)
ensures  res ==	unfolding acc(a.Mem(), _) in (unfolding acc(o.Mem(), _) in a.IP.Equal(o.IP) && a.Port == o.Port) 
decreases
pure func equalUDPAddr(a, o *net.UDPAddr) (res bool) {
	return unfolding acc(a.Mem(), _) in (unfolding acc(o.Mem(), _) in a.IP.Equal(o.IP) && a.Port == o.Port)
}

ghost
requires acc(udpSlice, _)
ensures  forall u *net.UDPAddr :: u in sliceToSeq(udpSlice) == u in s
decreases _
pure func sliceToSet(udpSlice []*net.UDPAddr) (s set[*net.UDPAddr])

ghost
requires acc(udpSlice, _)
ensures  len(s) == len(udpSlice)
ensures  forall i int :: 0 <= i && i < len(udpSlice) ==> udpSlice[i] == s[i]
decreases _
pure func sliceToSeq(udpSlice []*net.UDPAddr) (s seq[*net.UDPAddr])