// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package empty

import (
	"github.com/scionproto/scion/pkg/slayers/path"
	"github.com/scionproto/scion/verification/utils/slices"
)

pred (e Path) Mem() {
	true
}

pred (e Path) NonInitMem() {
	true
}

ghost
requires p.Mem()
requires p.GetUnderlyingBuf() === buf
ensures  slices.AbsSlice_Bytes(buf, 0, len(buf))
ensures  slices.AbsSlice_Bytes(buf, 0, len(buf)) --* p.Mem()
decreases
func (p Path) ExchangeBufMem(buf []byte)

ghost
requires acc(p.Mem(), _)
decreases
pure func (p Path) GetUnderlyingBuf() (buf []byte)

ghost
preserves p.Mem()
ensures   p.GetUnderlyingBuf() === buf
decreases
func (p Path) SetUnderlyingBuf(buf []byte)

Path implements path.Path

ghost
requires e.Mem()
ensures  e.NonInitMem()
decreases
func (e Path) DowngradePerm() {
	unfold e.Mem()
	fold e.NonInitMem()
}
