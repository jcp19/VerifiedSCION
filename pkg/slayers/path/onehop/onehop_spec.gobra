// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package onehop

import (
	"github.com/scionproto/scion/pkg/slayers/path"
	"github.com/scionproto/scion/verification/utils/slices"
)

pred (o *Path) NonInitMem() {
	acc(o)
}

pred (o *Path) Mem() {
	acc(&o.Info) && o.FirstHop.Mem() && o.SecondHop.Mem()
}

ghost
requires p.Mem()
ensures  p.NonInitMem()
decreases
func (p *Path) DowngradePerm() {
	unfold p.Mem()
	unfold p.FirstHop.Mem()
	unfold p.SecondHop.Mem()
	fold  p.NonInitMem()
}

ghost
requires acc(o.Mem(), _)
decreases
pure func (o *Path) GetUnderlyingBuf() (buf []byte)

ghost
requires o.Mem()
ensures  slices.AbsSlice_Bytes(buf, 0, len(buf))
ensures  slices.AbsSlice_Bytes(buf, 0, len(buf)) --* o.Mem()
decreases
func (o *Path) ExchangeBufMem() (buf []byte)

ghost
preserves o.Mem()
ensures   o.GetUnderlyingBuf() == buf
decreases
func (o *Path) SetUnderlyingBuf(buf []byte)

(*Path) implements path.Path {
	(p *Path) SerializeTo(b []byte) (e error) {
		e = p.SerializeTo(b)
	}

	(p *Path) DecodeFromBytes(b []byte) (e error) {
		e = p.DecodeFromBytes(b)
	}

	(p *Path) Reverse() (r path.Path, e error) {
		unfold p.Mem()
		unfold p.FirstHop.Mem()
		unfold p.SecondHop.Mem()
		r, e = p.Reverse()
	}

	(p *Path) DowngradePerm() {
		p.DowngradePerm()
	}

	pure (p *Path) Len() int {
		return p.Len()
	}

	pure (p *Path) Type() path.Type {
		return p.Type()
	}
}

ghost
requires acc(o)
ensures  o.Mem()
decreases
func FoldPathMem(o *Path) {
	// The following must hold because of the type of ConsIngress and ConsEgress
	assume 0 <= o.FirstHop.ConsIngress && 0 <= o.FirstHop.ConsEgress
	assume 0 <= o.SecondHop.ConsIngress && 0 <= o.SecondHop.ConsEgress
	fold o.FirstHop.Mem()
	fold o.SecondHop.Mem()
	fold o.Mem()
}
