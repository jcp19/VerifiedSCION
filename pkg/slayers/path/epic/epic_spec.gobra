// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package epic

import "github.com/scionproto/scion/pkg/slayers/path"

(*Path) implements path.Path

pred (p *Path) NonInitMem() {
	acc(p)
}

pred (p *Path) Mem() {
	acc(&p.PktID) &&
	acc(&p.PHVF) &&
	(forall i int :: 0 <= i && i < len(p.PHVF) ==> acc(&p.PHVF[i])) &&
	acc(&p.LHVF) &&
	(forall i int :: 0 <= i && i < len(p.LHVF) ==> acc(&p.LHVF[i])) &&
	acc(&p.ScionPath) &&
	(p.ScionPath != nil ==> p.ScionPath.Mem())
}

ghost
requires p.Mem()
ensures  p.NonInitMem()
decreases
func (p *Path) DowngradePerm() {
	unfold p.Mem()
	fold  p.NonInitMem()
}

pure
requires acc(p.Mem(), _)
ensures l == (unfolding acc(p.Mem(), _) in len(p.PHVF))
decreases
func (p *Path) getPHVFLen() (l int) {
	return unfolding acc(p.Mem(), _) in len(p.PHVF)
}

pure
requires acc(p.Mem(), _)
ensures l == (unfolding acc(p.Mem(), _) in len(p.LHVF))
decreases
func (p *Path) getLHVFLen() (l int) {
	return unfolding acc(p.Mem(), _) in len(p.LHVF)
}

pure
requires acc(p.Mem(), _)
ensures  r == (unfolding acc(p.Mem(), _) in p.ScionPath != nil)
decreases
func (p *Path) hasScionPath() (r bool) {
	return unfolding acc(p.Mem(), _) in p.ScionPath != nil
}
