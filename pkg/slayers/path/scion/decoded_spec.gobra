// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package scion

import (
	"github.com/scionproto/scion/pkg/slayers/path"
	"github.com/scionproto/scion/verification/utils/slices"
)

pred (d *Decoded) NonInitMem() {
	acc(&d.InfoFields) && acc(&d.HopFields) && d.Base.NonInitMem()
}

pred (d *Decoded) Mem() {
	d.Base.Mem() &&
	acc(&d.InfoFields) &&
	d.Base.getNumINF() <= MaxINFs &&
	len(d.InfoFields) == d.Base.getNumINF() &&
	(forall i int :: 0 <= i && i < len(d.InfoFields) ==> acc(&d.InfoFields[i])) &&
	acc(&d.HopFields) &&
	len(d.HopFields) == d.Base.getNumHops() &&
	(forall i int :: 0 <= i && i < len(d.HopFields) ==> d.HopFields[i].Mem())
}

/**
  * This method is not part of the original SCION codebase.
  * Instead, `Len` was defined in `*Decoded` via embedded structs.
  * Unfortunately, Gobra does not fully support them yet, so we
  * introduced this wrapper method which acts as a wrapper.
  */
pure
requires acc(d.Mem(), _)
ensures  unfolding acc(d.Mem(), _) in l == d.Base.Len()
ensures  l >= 0
decreases
func (d *Decoded) Len() (l int) {
	return unfolding acc(d.Mem(), _) in d.Base.Len()
}

/**
  * This method is not part of the original SCION codebase.
  * Instead, `Len` was defined in `*Decoded` via embedded structs.
  * Unfortunately, Gobra does not fully support them yet, so we
  * introduced this wrapper method which acts as a wrapper.
  */
pure
requires acc(d.Mem(), _)
ensures  unfolding acc(d.Mem(), _) in t == d.Base.Type()
decreases
func (d *Decoded) Type() (t path.Type) {
	return unfolding acc(d.Mem(), _) in d.Base.Type()
}

/**
  * This method is not part of the original SCION codebase.
  * This method creates an override of `IncPath` for `Decoded` which
  * just provides a more suitable contract. All it does is to call `IncPath`
  * on d.Base. Without this, one would need to unfold d.Mem() to call `IncPath`,
  * which can be extremely cumbersome.
  */
requires d.Mem()
ensures  e == nil ==> d.Mem()
ensures  e == nil ==> d.Len() == old(d.Len())
ensures  e != nil ==> d.NonInitMem()
ensures  e != nil ==> e.ErrorMem()
decreases
func (d *Decoded) IncPath() (e error) {
	unfold d.Mem()
	e = d.Base.IncPath()
	if e == nil {
		fold d.Mem()
	} else {
		fold d.NonInitMem()
	}
	return e
}

ghost
requires d.Mem()
ensures  d.NonInitMem()
decreases
func (d *Decoded) DowngradePerm() {
	unfold d.Mem()
	unfold d.Base.Mem()
	fold d.Base.NonInitMem()
	fold d.NonInitMem()
}

ghost
requires acc(d.Mem(), _)
decreases
pure func (d *Decoded) GetUnderlyingBuf() (buf []byte)

// ghost
// requires d.Mem()
// requires d.GetUnderlyingBuf() == buf
// ensures  slices.AbsSlice_Bytes(buf, 0, len(buf))
// ensures  slices.AbsSlice_Bytes(buf, 0, len(buf)) --* d.Mem()
// decreases
// func (d *Decoded) ExchangeBufMem(buf []byte)

ghost
preserves d.Mem()
ensures   d.GetUnderlyingBuf() === buf
decreases
func (d *Decoded) SetUnderlyingBuf(buf []byte)

(*Decoded) implements path.Path

requires acc(d.Mem(), _)
decreases
pure func (d *Decoded) getLenInfoFields() int {
	return unfolding acc(d.Mem(), _) in len(d.InfoFields)
}

requires acc(d.Mem(), _)
decreases
pure func (d *Decoded) getLenHopFields() int {
	return unfolding acc(d.Mem(), _) in len(d.HopFields)
}
