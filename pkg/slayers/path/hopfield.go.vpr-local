domain GobraMap[K, V] {
  
  function getMap(id: Int): Map[K,V]
}

domain String {
  
  function strLen(id: Int): Int
  
  function strConcat(l: Int, r: Int): Int
  
  unique function stringLit(): Int
  
  unique function stringLit4a756c79(): Int
  
  unique function stringLit417567757374(): Int
  
  unique function stringLit426967456e6469616e(): Int
  
  unique function stringLit496e666f4669656c642072617720746f6f2073686f7274(): Int
  
  unique function stringLit70617468207479706520616c72656164792072656769737465726564(): Int
  
  unique function stringLit5765646e6573646179(): Int
  
  unique function stringLit4d6f6e646179(): Int
  
  unique function stringLit62756666657220666f7220496e666f4669656c6420746f6f2073686f7274(): Int
  
  unique function stringLit25762028256429(): Int
  
  unique function stringLit62696e6172792e4c6974746c65456e6469616e(): Int
  
  unique function stringLit4f63746f626572(): Int
  
  unique function stringLit53657074656d626572(): Int
  
  unique function stringLit6e6f7420737570706f72746564(): Int
  
  unique function stringLit4a616e75617279(): Int
  
  unique function stringLit4665627275617279(): Int
  
  unique function stringLit4c6974746c65456e6469616e(): Int
  
  unique function stringLit6578706563746564(): Int
  
  unique function stringLit5361747572646179(): Int
  
  unique function stringLit4a756e65(): Int
  
  unique function stringLit4d6179(): Int
  
  unique function stringLit62756666657220666f7220486f704669656c6420746f6f2073686f7274(): Int
  
  unique function stringLit5468757273646179(): Int
  
  unique function stringLit54756573646179(): Int
  
  unique function stringLit467269646179(): Int
  
  unique function stringLit53756e646179(): Int
  
  unique function stringLit486f704669656c642072617720746f6f2073686f7274(): Int
  
  unique function stringLit4e6f76656d626572(): Int
  
  unique function stringLit74797065(): Int
  
  unique function stringLit417072696c(): Int
  
  unique function stringLit61637475616c(): Int
  
  unique function stringLit4d61726368(): Int
  
  unique function stringLit446563656d626572(): Int
  
  unique function stringLit756e737570706f727465642070617468(): Int
  
  unique function stringLit554e4b4e4f574e2028256429(): Int
  
  unique function stringLit62696e6172792e426967456e6469616e(): Int
  
  axiom {
    (forall l: Int, r: Int :: { strLen(strConcat(l, r)) } strLen(strConcat(l, r)) == strLen(l) + strLen(r))
  }
  
  axiom {
    (forall str: Int :: { strLen(str) } 0 <= strLen(str))
  }
  
  axiom {
    strLen(stringLit()) == 0
  }
  
  axiom {
    strLen(stringLit4a756c79()) == 4
  }
  
  axiom {
    strLen(stringLit417567757374()) == 6
  }
  
  axiom {
    strLen(stringLit426967456e6469616e()) == 9
  }
  
  axiom {
    strLen(stringLit496e666f4669656c642072617720746f6f2073686f7274()) == 23
  }
  
  axiom {
    strLen(stringLit70617468207479706520616c72656164792072656769737465726564()) == 28
  }
  
  axiom {
    strLen(stringLit5765646e6573646179()) == 9
  }
  
  axiom {
    strLen(stringLit4d6f6e646179()) == 6
  }
  
  axiom {
    strLen(stringLit62756666657220666f7220496e666f4669656c6420746f6f2073686f7274()) == 30
  }
  
  axiom {
    strLen(stringLit25762028256429()) == 7
  }
  
  axiom {
    strLen(stringLit62696e6172792e4c6974746c65456e6469616e()) == 19
  }
  
  axiom {
    strLen(stringLit4f63746f626572()) == 7
  }
  
  axiom {
    strLen(stringLit53657074656d626572()) == 9
  }
  
  axiom {
    strLen(stringLit6e6f7420737570706f72746564()) == 13
  }
  
  axiom {
    strLen(stringLit4a616e75617279()) == 7
  }
  
  axiom {
    strLen(stringLit4665627275617279()) == 8
  }
  
  axiom {
    strLen(stringLit4c6974746c65456e6469616e()) == 12
  }
  
  axiom {
    strLen(stringLit6578706563746564()) == 8
  }
  
  axiom {
    strLen(stringLit5361747572646179()) == 8
  }
  
  axiom {
    strLen(stringLit4a756e65()) == 4
  }
  
  axiom {
    strLen(stringLit4d6179()) == 3
  }
  
  axiom {
    strLen(stringLit62756666657220666f7220486f704669656c6420746f6f2073686f7274()) == 29
  }
  
  axiom {
    strLen(stringLit5468757273646179()) == 8
  }
  
  axiom {
    strLen(stringLit54756573646179()) == 7
  }
  
  axiom {
    strLen(stringLit467269646179()) == 6
  }
  
  axiom {
    strLen(stringLit53756e646179()) == 6
  }
  
  axiom {
    strLen(stringLit486f704669656c642072617720746f6f2073686f7274()) == 22
  }
  
  axiom {
    strLen(stringLit4e6f76656d626572()) == 8
  }
  
  axiom {
    strLen(stringLit74797065()) == 4
  }
  
  axiom {
    strLen(stringLit417072696c()) == 5
  }
  
  axiom {
    strLen(stringLit61637475616c()) == 6
  }
  
  axiom {
    strLen(stringLit4d61726368()) == 5
  }
  
  axiom {
    strLen(stringLit446563656d626572()) == 8
  }
  
  axiom {
    strLen(stringLit756e737570706f727465642070617468()) == 16
  }
  
  axiom {
    strLen(stringLit554e4b4e4f574e2028256429()) == 12
  }
  
  axiom {
    strLen(stringLit62696e6172792e426967456e6469616e()) == 16
  }
}

domain ComparableInterfaceDomain {
  
  function comparableInterface(i: Tuple2[Ref, Types]): Bool
  
  axiom {
    (forall i: Tuple2[Ref, Types] :: { comparableInterface(i) } comparableType_Types((get1of2(i): Types)) ==> comparableInterface(i))
  }
}

domain Types {
  
  function uintptr_Types(): Types
  
  unique function uintptr_Types_tag(): Int
  
  function uint64_Types(): Types
  
  unique function uint64_Types_tag(): Int
  
  function uint32_Types(): Types
  
  unique function uint32_Types_tag(): Int
  
  function uint16_Types(): Types
  
  unique function uint16_Types_tag(): Int
  
  function uint_Types(): Types
  
  unique function uint_Types_tag(): Int
  
  function int64_Types(): Types
  
  unique function int64_Types_tag(): Int
  
  function int16_Types(): Types
  
  unique function int16_Types_tag(): Int
  
  function int8_Types(): Types
  
  unique function int8_Types_tag(): Int
  
  function int_Types(): Types
  
  unique function int_Types_tag(): Int
  
  function int32_Types(): Types
  
  unique function int32_Types_tag(): Int
  
  function bool_Types(): Types
  
  unique function bool_Types_tag(): Int
  
  function littleEndian_bf01f2a6_T_Types(): Types
  
  unique function littleEndian_bf01f2a6_T_Types_tag(): Int
  
  function bigEndian_bf01f2a6_T_Types(): Types
  
  unique function bigEndian_bf01f2a6_T_Types_tag(): Int
  
  function Y$55c5ed_bf01f2a6__Types(): Types
  
  unique function Y$55c5ed_bf01f2a6__Types_tag(): Int
  
  function Y$91c0a5f1_faafd1d5__Types(): Types
  
  unique function Y$91c0a5f1_faafd1d5__Types_tag(): Int
  
  function errOrMsg_a58fd4a8_T_Types(): Types
  
  unique function errOrMsg_a58fd4a8_T_Types_tag(): Int
  
  function basicError_a58fd4a8_T_Types(): Types
  
  unique function basicError_a58fd4a8_T_Types_tag(): Int
  
  function List_a58fd4a8_T_Types(): Types
  
  unique function List_a58fd4a8_T_Types_tag(): Int
  
  function Y$1dcebcb0_a4af0e5e__Types(): Types
  
  unique function Y$1dcebcb0_a4af0e5e__Types_tag(): Int
  
  function byte_Types(): Types
  
  unique function byte_Types_tag(): Int
  
  function Type_faafd1d5_T_Types(): Types
  
  unique function Type_faafd1d5_T_Types_tag(): Int
  
  function pointer_Types(p0: Types): Types
  
  unique function pointer_Types_tag(): Int
  
  function rawPath_faafd1d5_T_Types(): Types
  
  unique function rawPath_faafd1d5_T_Types_tag(): Int
  
  function integer_Types(): Types
  
  unique function integer_Types_tag(): Int
  
  function string_Types(): Types
  
  unique function string_Types_tag(): Int
  
  function empty_interface_Types(): Types
  
  unique function empty_interface_Types_tag(): Int
  
  function behavioral_subtype_Types(l: Types, r: Types): Bool
  
  function nil_Types(): Types
  
  unique function nil_Types_tag(): Int
  
  function comparableType_Types(t: Types): Bool
  
  function tag_Types(t: Types): Int
  
  function get_0_pointer_Types(t: Types): Types
  
  axiom {
    comparableType_Types(uintptr_Types()) == true
  }
  
  axiom {
    tag_Types(uintptr_Types()) == uintptr_Types_tag()
  }
  
  axiom {
    comparableType_Types(uint64_Types()) == true
  }
  
  axiom {
    tag_Types(uint64_Types()) == uint64_Types_tag()
  }
  
  axiom {
    comparableType_Types(uint32_Types()) == true
  }
  
  axiom {
    tag_Types(uint32_Types()) == uint32_Types_tag()
  }
  
  axiom {
    comparableType_Types(uint16_Types()) == true
  }
  
  axiom {
    tag_Types(uint16_Types()) == uint16_Types_tag()
  }
  
  axiom {
    comparableType_Types(uint_Types()) == true
  }
  
  axiom {
    tag_Types(uint_Types()) == uint_Types_tag()
  }
  
  axiom {
    comparableType_Types(int64_Types()) == true
  }
  
  axiom {
    tag_Types(int64_Types()) == int64_Types_tag()
  }
  
  axiom {
    comparableType_Types(int16_Types()) == true
  }
  
  axiom {
    tag_Types(int16_Types()) == int16_Types_tag()
  }
  
  axiom {
    comparableType_Types(int8_Types()) == true
  }
  
  axiom {
    tag_Types(int8_Types()) == int8_Types_tag()
  }
  
  axiom {
    comparableType_Types(int_Types()) == true
  }
  
  axiom {
    tag_Types(int_Types()) == int_Types_tag()
  }
  
  axiom {
    comparableType_Types(int32_Types()) == true
  }
  
  axiom {
    tag_Types(int32_Types()) == int32_Types_tag()
  }
  
  axiom {
    comparableType_Types(bool_Types()) == true
  }
  
  axiom {
    tag_Types(bool_Types()) == bool_Types_tag()
  }
  
  axiom {
    comparableType_Types(littleEndian_bf01f2a6_T_Types()) == true
  }
  
  axiom {
    tag_Types(littleEndian_bf01f2a6_T_Types()) == littleEndian_bf01f2a6_T_Types_tag()
  }
  
  axiom {
    comparableType_Types(bigEndian_bf01f2a6_T_Types()) == true
  }
  
  axiom {
    tag_Types(bigEndian_bf01f2a6_T_Types()) == bigEndian_bf01f2a6_T_Types_tag()
  }
  
  axiom {
    comparableType_Types(Y$55c5ed_bf01f2a6__Types()) == false
  }
  
  axiom {
    tag_Types(Y$55c5ed_bf01f2a6__Types()) == Y$55c5ed_bf01f2a6__Types_tag()
  }
  
  axiom {
    comparableType_Types(Y$91c0a5f1_faafd1d5__Types()) == false
  }
  
  axiom {
    tag_Types(Y$91c0a5f1_faafd1d5__Types()) == Y$91c0a5f1_faafd1d5__Types_tag()
  }
  
  axiom {
    comparableType_Types(errOrMsg_a58fd4a8_T_Types()) == true
  }
  
  axiom {
    tag_Types(errOrMsg_a58fd4a8_T_Types()) == errOrMsg_a58fd4a8_T_Types_tag()
  }
  
  axiom {
    comparableType_Types(basicError_a58fd4a8_T_Types()) == true
  }
  
  axiom {
    tag_Types(basicError_a58fd4a8_T_Types()) == basicError_a58fd4a8_T_Types_tag()
  }
  
  axiom {
    comparableType_Types(List_a58fd4a8_T_Types()) == false
  }
  
  axiom {
    tag_Types(List_a58fd4a8_T_Types()) == List_a58fd4a8_T_Types_tag()
  }
  
  axiom {
    comparableType_Types(Y$1dcebcb0_a4af0e5e__Types()) == false
  }
  
  axiom {
    tag_Types(Y$1dcebcb0_a4af0e5e__Types()) == Y$1dcebcb0_a4af0e5e__Types_tag()
  }
  
  axiom {
    comparableType_Types(byte_Types()) == true
  }
  
  axiom {
    tag_Types(byte_Types()) == byte_Types_tag()
  }
  
  axiom {
    comparableType_Types(Type_faafd1d5_T_Types()) == true
  }
  
  axiom {
    tag_Types(Type_faafd1d5_T_Types()) == Type_faafd1d5_T_Types_tag()
  }
  
  axiom {
    (forall x0: Types :: { pointer_Types(x0) } true && get_0_pointer_Types(pointer_Types(x0)) == x0)
  }
  
  axiom {
    (forall p0: Types :: { comparableType_Types(pointer_Types(p0)) } comparableType_Types(pointer_Types(p0)) == true)
  }
  
  axiom {
    (forall p0: Types :: { pointer_Types(p0) } tag_Types(pointer_Types(p0)) == pointer_Types_tag())
  }
  
  axiom {
    comparableType_Types(rawPath_faafd1d5_T_Types()) == true
  }
  
  axiom {
    tag_Types(rawPath_faafd1d5_T_Types()) == rawPath_faafd1d5_T_Types_tag()
  }
  
  axiom {
    comparableType_Types(integer_Types()) == true
  }
  
  axiom {
    tag_Types(integer_Types()) == integer_Types_tag()
  }
  
  axiom {
    comparableType_Types(string_Types()) == true
  }
  
  axiom {
    tag_Types(string_Types()) == string_Types_tag()
  }
  
  axiom {
    (forall a: Types :: { behavioral_subtype_Types(a, empty_interface_Types()) } behavioral_subtype_Types(a, empty_interface_Types()))
  }
  
  axiom {
    (forall a: Types :: { behavioral_subtype_Types(a, a) } behavioral_subtype_Types(a, a))
  }
  
  axiom {
    (forall a: Types, b: Types, c: Types :: { behavioral_subtype_Types(a, b),behavioral_subtype_Types(b, c) } behavioral_subtype_Types(a, b) && behavioral_subtype_Types(b, c) ==> behavioral_subtype_Types(a, c))
  }
  
  axiom {
    comparableType_Types(empty_interface_Types()) == false
  }
  
  axiom {
    tag_Types(empty_interface_Types()) == empty_interface_Types_tag()
  }
  
  axiom {
    comparableType_Types(nil_Types()) == true
  }
  
  axiom {
    tag_Types(nil_Types()) == nil_Types_tag()
  }
}

domain PolyAdditionalAxioms {
  
  axiom {
    (forall y: Ref :: { (unbox_Poly(y): Int) } (box_Poly((unbox_Poly(y): Int)): Ref) == y)
  }
  
  axiom {
    (forall y: Ref :: { (unbox_Poly(y): Int) } (box_Poly((unbox_Poly(y): Int)): Ref) == y)
  }
  
  axiom {
    (forall y: Ref :: { (unbox_Poly(y): Tuple2[Int, Tuple2[Ref, Types]]) } (box_Poly((unbox_Poly(y): Tuple2[Int, Tuple2[Ref, Types]])): Ref) == y)
  }
  
  axiom {
    (forall y: Ref :: { (unbox_Poly(y): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref]) } (box_Poly((unbox_Poly(y): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref])): Ref) == y)
  }
  
  axiom {
    (forall y: Ref :: { (unbox_Poly(y): Slice[Ref]) } (box_Poly((unbox_Poly(y): Slice[Ref])): Ref) == y)
  }
  
  axiom {
    (forall y: Ref :: { (unbox_Poly(y): ShStruct2[Ref, Ref]) } (box_Poly((unbox_Poly(y): ShStruct2[Ref, Ref])): Ref) == y)
  }
}

domain Poly[T] {
  
  function box_Poly(x: T): Ref
  
  function unbox_Poly(y: Ref): T
  
  axiom {
    (forall x: T :: { (box_Poly(x): Ref) } (unbox_Poly((box_Poly(x): Ref)): T) == x)
  }
}

domain Closure {
  
  function closureNil(): Closure
  
  function closureImplements$NewPathSpec_faafd1d5_F$(closure: Closure): Bool
}

domain Emb_6_Intbyte$$$_S_$$$ {
  
  
}

domain Emb_1_Intbyte$$$_S_$$$ {
  
  
}

domain Emb_4_Interfaceempty_interface$$$_S_$$$ {
  
  
}

domain Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$ {
  
  
}

domain Emb_1_Interfaceempty_interface$$$_S_$$$ {
  
  
}

domain Emb_2_Interfaceempty_interface$$$_S_$$$ {
  
  
}

domain Emb_1_String$$$_S_$$$ {
  
  
}

domain Emb_1_DefinedctxPair_a58fd4a8_T$$$_S_$$$ {
  
  
}

domain Emb_4_Interfaceempty_interface$$$$_E_$$$ {
  
  
}

domain Emb_6_Intbyte$$$$_E_$$$ {
  
  
}

domain Emb_1_Interfaceempty_interface$$$$_E_$$$ {
  
  
}

domain Emb_2_Interfaceempty_interface$$$$_E_$$$ {
  
  
}

domain Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$ {
  
  
}

domain ShStruct6[T0, T1, T2, T3, T4, T5] {
  
  function ShStructrev0of6(v0: T0): ShStruct6[T0, T1, T2, T3, T4, T5]
  
  function ShStructrev1of6(v1: T1): ShStruct6[T0, T1, T2, T3, T4, T5]
  
  function ShStructrev2of6(v2: T2): ShStruct6[T0, T1, T2, T3, T4, T5]
  
  function ShStructrev3of6(v3: T3): ShStruct6[T0, T1, T2, T3, T4, T5]
  
  function ShStructrev4of6(v4: T4): ShStruct6[T0, T1, T2, T3, T4, T5]
  
  function ShStructrev5of6(v5: T5): ShStruct6[T0, T1, T2, T3, T4, T5]
  
  function ShStructget0of6(x: ShStruct6[T0, T1, T2, T3, T4, T5]): T0
  
  function ShStructget1of6(x: ShStruct6[T0, T1, T2, T3, T4, T5]): T1
  
  function ShStructget2of6(x: ShStruct6[T0, T1, T2, T3, T4, T5]): T2
  
  function ShStructget3of6(x: ShStruct6[T0, T1, T2, T3, T4, T5]): T3
  
  function ShStructget4of6(x: ShStruct6[T0, T1, T2, T3, T4, T5]): T4
  
  function ShStructget5of6(x: ShStruct6[T0, T1, T2, T3, T4, T5]): T5
  
  axiom {
    (forall x: ShStruct6[T0, T1, T2, T3, T4, T5], y: ShStruct6[T0, T1, T2, T3, T4, T5] :: { (eq(x, y): Bool) } (eq(x, y): Bool) == ((ShStructget0of6(x): T0) == (ShStructget0of6(y): T0) && (ShStructget1of6(x): T1) == (ShStructget1of6(y): T1) && (ShStructget2of6(x): T2) == (ShStructget2of6(y): T2) && (ShStructget3of6(x): T3) == (ShStructget3of6(y): T3) && (ShStructget4of6(x): T4) == (ShStructget4of6(y): T4) && (ShStructget5of6(x): T5) == (ShStructget5of6(y): T5)))
  }
  
  axiom {
    (forall x: ShStruct6[T0, T1, T2, T3, T4, T5] :: { (ShStructget0of6(x): T0) } (ShStructrev0of6((ShStructget0of6(x): T0)): ShStruct6[T0, T1, T2, T3, T4, T5]) == x)
  }
  
  axiom {
    (forall x: ShStruct6[T0, T1, T2, T3, T4, T5] :: { (ShStructget1of6(x): T1) } (ShStructrev1of6((ShStructget1of6(x): T1)): ShStruct6[T0, T1, T2, T3, T4, T5]) == x)
  }
  
  axiom {
    (forall x: ShStruct6[T0, T1, T2, T3, T4, T5] :: { (ShStructget2of6(x): T2) } (ShStructrev2of6((ShStructget2of6(x): T2)): ShStruct6[T0, T1, T2, T3, T4, T5]) == x)
  }
  
  axiom {
    (forall x: ShStruct6[T0, T1, T2, T3, T4, T5] :: { (ShStructget3of6(x): T3) } (ShStructrev3of6((ShStructget3of6(x): T3)): ShStruct6[T0, T1, T2, T3, T4, T5]) == x)
  }
  
  axiom {
    (forall x: ShStruct6[T0, T1, T2, T3, T4, T5] :: { (ShStructget4of6(x): T4) } (ShStructrev4of6((ShStructget4of6(x): T4)): ShStruct6[T0, T1, T2, T3, T4, T5]) == x)
  }
  
  axiom {
    (forall x: ShStruct6[T0, T1, T2, T3, T4, T5] :: { (ShStructget5of6(x): T5) } (ShStructrev5of6((ShStructget5of6(x): T5)): ShStruct6[T0, T1, T2, T3, T4, T5]) == x)
  }
}

domain ShStruct2[T0, T1] {
  
  function ShStructrev0of2(v0: T0): ShStruct2[T0, T1]
  
  function ShStructrev1of2(v1: T1): ShStruct2[T0, T1]
  
  function ShStructget0of2(x: ShStruct2[T0, T1]): T0
  
  function ShStructget1of2(x: ShStruct2[T0, T1]): T1
  
  axiom {
    (forall x: ShStruct2[T0, T1], y: ShStruct2[T0, T1] :: { (eq(x, y): Bool) } (eq(x, y): Bool) == ((ShStructget0of2(x): T0) == (ShStructget0of2(y): T0) && (ShStructget1of2(x): T1) == (ShStructget1of2(y): T1)))
  }
  
  axiom {
    (forall x: ShStruct2[T0, T1] :: { (ShStructget0of2(x): T0) } (ShStructrev0of2((ShStructget0of2(x): T0)): ShStruct2[T0, T1]) == x)
  }
  
  axiom {
    (forall x: ShStruct2[T0, T1] :: { (ShStructget1of2(x): T1) } (ShStructrev1of2((ShStructget1of2(x): T1)): ShStruct2[T0, T1]) == x)
  }
}

domain ShStruct4[T0, T1, T2, T3] {
  
  function ShStructrev0of4(v0: T0): ShStruct4[T0, T1, T2, T3]
  
  function ShStructrev1of4(v1: T1): ShStruct4[T0, T1, T2, T3]
  
  function ShStructrev2of4(v2: T2): ShStruct4[T0, T1, T2, T3]
  
  function ShStructrev3of4(v3: T3): ShStruct4[T0, T1, T2, T3]
  
  function ShStructget0of4(x: ShStruct4[T0, T1, T2, T3]): T0
  
  function ShStructget1of4(x: ShStruct4[T0, T1, T2, T3]): T1
  
  function ShStructget2of4(x: ShStruct4[T0, T1, T2, T3]): T2
  
  function ShStructget3of4(x: ShStruct4[T0, T1, T2, T3]): T3
  
  axiom {
    (forall x: ShStruct4[T0, T1, T2, T3], y: ShStruct4[T0, T1, T2, T3] :: { (eq(x, y): Bool) } (eq(x, y): Bool) == ((ShStructget0of4(x): T0) == (ShStructget0of4(y): T0) && (ShStructget1of4(x): T1) == (ShStructget1of4(y): T1) && (ShStructget2of4(x): T2) == (ShStructget2of4(y): T2) && (ShStructget3of4(x): T3) == (ShStructget3of4(y): T3)))
  }
  
  axiom {
    (forall x: ShStruct4[T0, T1, T2, T3] :: { (ShStructget0of4(x): T0) } (ShStructrev0of4((ShStructget0of4(x): T0)): ShStruct4[T0, T1, T2, T3]) == x)
  }
  
  axiom {
    (forall x: ShStruct4[T0, T1, T2, T3] :: { (ShStructget1of4(x): T1) } (ShStructrev1of4((ShStructget1of4(x): T1)): ShStruct4[T0, T1, T2, T3]) == x)
  }
  
  axiom {
    (forall x: ShStruct4[T0, T1, T2, T3] :: { (ShStructget2of4(x): T2) } (ShStructrev2of4((ShStructget2of4(x): T2)): ShStruct4[T0, T1, T2, T3]) == x)
  }
  
  axiom {
    (forall x: ShStruct4[T0, T1, T2, T3] :: { (ShStructget3of4(x): T3) } (ShStructrev3of4((ShStructget3of4(x): T3)): ShStruct4[T0, T1, T2, T3]) == x)
  }
}

domain ShStruct3[T0, T1, T2] {
  
  function ShStructrev0of3(v0: T0): ShStruct3[T0, T1, T2]
  
  function ShStructrev1of3(v1: T1): ShStruct3[T0, T1, T2]
  
  function ShStructrev2of3(v2: T2): ShStruct3[T0, T1, T2]
  
  function ShStructget0of3(x: ShStruct3[T0, T1, T2]): T0
  
  function ShStructget1of3(x: ShStruct3[T0, T1, T2]): T1
  
  function ShStructget2of3(x: ShStruct3[T0, T1, T2]): T2
  
  axiom {
    (forall x: ShStruct3[T0, T1, T2], y: ShStruct3[T0, T1, T2] :: { (eq(x, y): Bool) } (eq(x, y): Bool) == ((ShStructget0of3(x): T0) == (ShStructget0of3(y): T0) && (ShStructget1of3(x): T1) == (ShStructget1of3(y): T1) && (ShStructget2of3(x): T2) == (ShStructget2of3(y): T2)))
  }
  
  axiom {
    (forall x: ShStruct3[T0, T1, T2] :: { (ShStructget0of3(x): T0) } (ShStructrev0of3((ShStructget0of3(x): T0)): ShStruct3[T0, T1, T2]) == x)
  }
  
  axiom {
    (forall x: ShStruct3[T0, T1, T2] :: { (ShStructget1of3(x): T1) } (ShStructrev1of3((ShStructget1of3(x): T1)): ShStruct3[T0, T1, T2]) == x)
  }
  
  axiom {
    (forall x: ShStruct3[T0, T1, T2] :: { (ShStructget2of3(x): T2) } (ShStructrev2of3((ShStructget2of3(x): T2)): ShStruct3[T0, T1, T2]) == x)
  }
}

domain Equality[T] {
  
  function eq(l: T, r: T): Bool
  
  axiom {
    (forall l: T, r: T :: { (eq(l, r): Bool) } (eq(l, r): Bool) == (l == r))
  }
}

domain Tuple2[T0, T1] {
  
  function tuple2(t0: T0, t1: T1): Tuple2[T0, T1]
  
  function get0of2(p: Tuple2[T0, T1]): T0
  
  function get1of2(p: Tuple2[T0, T1]): T1
  
  axiom getter_over_tuple2 {
    (forall t0: T0, t1: T1 :: { (tuple2(t0, t1): Tuple2[T0, T1]) } (get0of2((tuple2(t0, t1): Tuple2[T0, T1])): T0) == t0 && (get1of2((tuple2(t0, t1): Tuple2[T0, T1])): T1) == t1)
  }
  
  axiom tuple2_over_getter {
    (forall p: Tuple2[T0, T1] :: { (get0of2(p): T0) } { (get1of2(p): T1) } (tuple2((get0of2(p): T0), (get1of2(p): T1)): Tuple2[T0, T1]) == p)
  }
}

domain Tuple4[T0, T1, T2, T3] {
  
  function tuple4(t0: T0, t1: T1, t2: T2, t3: T3): Tuple4[T0, T1, T2, T3]
  
  function get0of4(p: Tuple4[T0, T1, T2, T3]): T0
  
  function get1of4(p: Tuple4[T0, T1, T2, T3]): T1
  
  function get2of4(p: Tuple4[T0, T1, T2, T3]): T2
  
  function get3of4(p: Tuple4[T0, T1, T2, T3]): T3
  
  axiom getter_over_tuple4 {
    (forall t0: T0, t1: T1, t2: T2, t3: T3 :: { (tuple4(t0, t1, t2, t3): Tuple4[T0, T1, T2, T3]) } (get0of4((tuple4(t0, t1, t2, t3): Tuple4[T0, T1, T2, T3])): T0) == t0 && (get1of4((tuple4(t0, t1, t2, t3): Tuple4[T0, T1, T2, T3])): T1) == t1 && (get2of4((tuple4(t0, t1, t2, t3): Tuple4[T0, T1, T2, T3])): T2) == t2 && (get3of4((tuple4(t0, t1, t2, t3): Tuple4[T0, T1, T2, T3])): T3) == t3)
  }
  
  axiom tuple4_over_getter {
    (forall p: Tuple4[T0, T1, T2, T3] :: { (get0of4(p): T0) } { (get1of4(p): T1) } { (get2of4(p): T2) } { (get3of4(p): T3) } (tuple4((get0of4(p): T0), (get1of4(p): T1), (get2of4(p): T2), (get3of4(p): T3)): Tuple4[T0, T1, T2, T3]) == p)
  }
}

domain Tuple3[T0, T1, T2] {
  
  function tuple3(t0: T0, t1: T1, t2: T2): Tuple3[T0, T1, T2]
  
  function get0of3(p: Tuple3[T0, T1, T2]): T0
  
  function get1of3(p: Tuple3[T0, T1, T2]): T1
  
  function get2of3(p: Tuple3[T0, T1, T2]): T2
  
  axiom getter_over_tuple3 {
    (forall t0: T0, t1: T1, t2: T2 :: { (tuple3(t0, t1, t2): Tuple3[T0, T1, T2]) } (get0of3((tuple3(t0, t1, t2): Tuple3[T0, T1, T2])): T0) == t0 && (get1of3((tuple3(t0, t1, t2): Tuple3[T0, T1, T2])): T1) == t1 && (get2of3((tuple3(t0, t1, t2): Tuple3[T0, T1, T2])): T2) == t2)
  }
  
  axiom tuple3_over_getter {
    (forall p: Tuple3[T0, T1, T2] :: { (get0of3(p): T0) } { (get1of3(p): T1) } { (get2of3(p): T2) } (tuple3((get0of3(p): T0), (get1of3(p): T1), (get2of3(p): T2)): Tuple3[T0, T1, T2]) == p)
  }
}

domain Tuple6[T0, T1, T2, T3, T4, T5] {
  
  function tuple6(t0: T0, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5): Tuple6[T0, T1, T2, T3, T4, T5]
  
  function get0of6(p: Tuple6[T0, T1, T2, T3, T4, T5]): T0
  
  function get1of6(p: Tuple6[T0, T1, T2, T3, T4, T5]): T1
  
  function get2of6(p: Tuple6[T0, T1, T2, T3, T4, T5]): T2
  
  function get3of6(p: Tuple6[T0, T1, T2, T3, T4, T5]): T3
  
  function get4of6(p: Tuple6[T0, T1, T2, T3, T4, T5]): T4
  
  function get5of6(p: Tuple6[T0, T1, T2, T3, T4, T5]): T5
  
  axiom getter_over_tuple6 {
    (forall t0: T0, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5 :: { (tuple6(t0, t1, t2, t3, t4, t5): Tuple6[T0, T1, T2, T3, T4, T5]) } (get0of6((tuple6(t0, t1, t2, t3, t4, t5): Tuple6[T0, T1, T2, T3, T4, T5])): T0) == t0 && (get1of6((tuple6(t0, t1, t2, t3, t4, t5): Tuple6[T0, T1, T2, T3, T4, T5])): T1) == t1 && (get2of6((tuple6(t0, t1, t2, t3, t4, t5): Tuple6[T0, T1, T2, T3, T4, T5])): T2) == t2 && (get3of6((tuple6(t0, t1, t2, t3, t4, t5): Tuple6[T0, T1, T2, T3, T4, T5])): T3) == t3 && (get4of6((tuple6(t0, t1, t2, t3, t4, t5): Tuple6[T0, T1, T2, T3, T4, T5])): T4) == t4 && (get5of6((tuple6(t0, t1, t2, t3, t4, t5): Tuple6[T0, T1, T2, T3, T4, T5])): T5) == t5)
  }
  
  axiom tuple6_over_getter {
    (forall p: Tuple6[T0, T1, T2, T3, T4, T5] :: { (get0of6(p): T0) } { (get1of6(p): T1) } { (get2of6(p): T2) } { (get3of6(p): T3) } { (get4of6(p): T4) } { (get5of6(p): T5) } (tuple6((get0of6(p): T0), (get1of6(p): T1), (get2of6(p): T2), (get3of6(p): T3), (get4of6(p): T4), (get5of6(p): T5)): Tuple6[T0, T1, T2, T3, T4, T5]) == p)
  }
}

domain ConstantHopLen_faafd1d5_G {
  
  function constant_HopLen_faafd1d5_G(): Int
  
  axiom get_constantHopLen_faafd1d5_G {
    constant_HopLen_faafd1d5_G() == 12
  }
}

domain ConstantMacLen_faafd1d5_G {
  
  function constant_MacLen_faafd1d5_G(): Int
  
  axiom get_constantMacLen_faafd1d5_G {
    constant_MacLen_faafd1d5_G() == 6
  }
}

domain ConstantMaxTTL_faafd1d5_G {
  
  function constant_MaxTTL_faafd1d5_G(): Int
  
  axiom get_constantMaxTTL_faafd1d5_G {
    constant_MaxTTL_faafd1d5_G() == 86400
  }
}

domain ConstantexpTimeUnit_faafd1d5_G {
  
  function constant_expTimeUnit_faafd1d5_G(): Int
  
  axiom get_constantexpTimeUnit_faafd1d5_G {
    constant_expTimeUnit_faafd1d5_G() == 337
  }
}

domain ConstantInfoLen_faafd1d5_G {
  
  function constant_InfoLen_faafd1d5_G(): Int
  
  axiom get_constantInfoLen_faafd1d5_G {
    constant_InfoLen_faafd1d5_G() == 8
  }
}

domain ConstantMaxPathType_faafd1d5_G {
  
  function constant_MaxPathType_faafd1d5_G(): Int
  
  axiom get_constantMaxPathType_faafd1d5_G {
    constant_MaxPathType_faafd1d5_G() == 256
  }
}

domain ConstantMACBufferSize_faafd1d5_G {
  
  function constant_MACBufferSize_faafd1d5_G(): Int
  
  axiom get_constantMACBufferSize_faafd1d5_G {
    constant_MACBufferSize_faafd1d5_G() == 16
  }
}

domain ConstantmaxPathType_faafd1d5_G {
  
  function constant_maxPathType_faafd1d5_G(): Int
  
  axiom get_constantmaxPathType_faafd1d5_G {
    constant_maxPathType_faafd1d5_G() == 256
  }
}

domain ConstantSeekStart_3773bb97_G {
  
  function constant_SeekStart_3773bb97_G(): Int
  
  axiom get_constantSeekStart_3773bb97_G {
    constant_SeekStart_3773bb97_G() == 0
  }
}

domain ConstantSeekCurrent_3773bb97_G {
  
  function constant_SeekCurrent_3773bb97_G(): Int
  
  axiom get_constantSeekCurrent_3773bb97_G {
    constant_SeekCurrent_3773bb97_G() == 1
  }
}

domain ConstantSeekEnd_3773bb97_G {
  
  function constant_SeekEnd_3773bb97_G(): Int
  
  axiom get_constantSeekEnd_3773bb97_G {
    constant_SeekEnd_3773bb97_G() == 2
  }
}

domain ConstantReadL1_b40dce56_G {
  
  function constant_ReadL1_b40dce56_G(): Perm
  
  axiom get_constantReadL1_b40dce56_G {
    constant_ReadL1_b40dce56_G() == 1 / 2
  }
}

domain ConstantReadL2_b40dce56_G {
  
  function constant_ReadL2_b40dce56_G(): Perm
  
  axiom get_constantReadL2_b40dce56_G {
    constant_ReadL2_b40dce56_G() == 1 / 4
  }
}

domain ConstantReadL3_b40dce56_G {
  
  function constant_ReadL3_b40dce56_G(): Perm
  
  axiom get_constantReadL3_b40dce56_G {
    constant_ReadL3_b40dce56_G() == 1 / 8
  }
}

domain ConstantReadL4_b40dce56_G {
  
  function constant_ReadL4_b40dce56_G(): Perm
  
  axiom get_constantReadL4_b40dce56_G {
    constant_ReadL4_b40dce56_G() == 1 / 16
  }
}

domain ConstantReadL5_b40dce56_G {
  
  function constant_ReadL5_b40dce56_G(): Perm
  
  axiom get_constantReadL5_b40dce56_G {
    constant_ReadL5_b40dce56_G() == 1 / 32
  }
}

domain ConstantReadL6_b40dce56_G {
  
  function constant_ReadL6_b40dce56_G(): Perm
  
  axiom get_constantReadL6_b40dce56_G {
    constant_ReadL6_b40dce56_G() == 1 / 64
  }
}

domain ConstantReadL7_b40dce56_G {
  
  function constant_ReadL7_b40dce56_G(): Perm
  
  axiom get_constantReadL7_b40dce56_G {
    constant_ReadL7_b40dce56_G() == 1 / 128
  }
}

domain ConstantReadL8_b40dce56_G {
  
  function constant_ReadL8_b40dce56_G(): Perm
  
  axiom get_constantReadL8_b40dce56_G {
    constant_ReadL8_b40dce56_G() == 1 / 256
  }
}

domain ConstantReadL9_b40dce56_G {
  
  function constant_ReadL9_b40dce56_G(): Perm
  
  axiom get_constantReadL9_b40dce56_G {
    constant_ReadL9_b40dce56_G() == 1 / 512
  }
}

domain ConstantReadL10_b40dce56_G {
  
  function constant_ReadL10_b40dce56_G(): Perm
  
  axiom get_constantReadL10_b40dce56_G {
    constant_ReadL10_b40dce56_G() == 1 / 1024
  }
}

domain ConstantReadL11_b40dce56_G {
  
  function constant_ReadL11_b40dce56_G(): Perm
  
  axiom get_constantReadL11_b40dce56_G {
    constant_ReadL11_b40dce56_G() == 1 / 2048
  }
}

domain ConstantReadL12_b40dce56_G {
  
  function constant_ReadL12_b40dce56_G(): Perm
  
  axiom get_constantReadL12_b40dce56_G {
    constant_ReadL12_b40dce56_G() == 1 / 4096
  }
}

domain ConstantReadL13_b40dce56_G {
  
  function constant_ReadL13_b40dce56_G(): Perm
  
  axiom get_constantReadL13_b40dce56_G {
    constant_ReadL13_b40dce56_G() == 1 / 8192
  }
}

domain ConstantReadL14_b40dce56_G {
  
  function constant_ReadL14_b40dce56_G(): Perm
  
  axiom get_constantReadL14_b40dce56_G {
    constant_ReadL14_b40dce56_G() == 1 / 16384
  }
}

domain ConstantReadL15_b40dce56_G {
  
  function constant_ReadL15_b40dce56_G(): Perm
  
  axiom get_constantReadL15_b40dce56_G {
    constant_ReadL15_b40dce56_G() == 1 / 32768
  }
}

domain ConstantReadL16_b40dce56_G {
  
  function constant_ReadL16_b40dce56_G(): Perm
  
  axiom get_constantReadL16_b40dce56_G {
    constant_ReadL16_b40dce56_G() == 1 / 65536
  }
}

domain ConstantReadL17_b40dce56_G {
  
  function constant_ReadL17_b40dce56_G(): Perm
  
  axiom get_constantReadL17_b40dce56_G {
    constant_ReadL17_b40dce56_G() == 1 / 131072
  }
}

domain ConstantReadL18_b40dce56_G {
  
  function constant_ReadL18_b40dce56_G(): Perm
  
  axiom get_constantReadL18_b40dce56_G {
    constant_ReadL18_b40dce56_G() == 1 / 262144
  }
}

domain ConstantReadL19_b40dce56_G {
  
  function constant_ReadL19_b40dce56_G(): Perm
  
  axiom get_constantReadL19_b40dce56_G {
    constant_ReadL19_b40dce56_G() == 1 / 524288
  }
}

domain ConstantReadL20_b40dce56_G {
  
  function constant_ReadL20_b40dce56_G(): Perm
  
  axiom get_constantReadL20_b40dce56_G {
    constant_ReadL20_b40dce56_G() == 1 / 1048576
  }
}

domain ConstantLittleEndian_bf01f2a6_G {
  
  function constant_LittleEndian_bf01f2a6_G(): Int
  
  axiom get_constantLittleEndian_bf01f2a6_G {
    constant_LittleEndian_bf01f2a6_G() == 0
  }
}

domain ConstantBigEndian_bf01f2a6_G {
  
  function constant_BigEndian_bf01f2a6_G(): Int
  
  axiom get_constantBigEndian_bf01f2a6_G {
    constant_BigEndian_bf01f2a6_G() == 0
  }
}

domain ConstantJanuary_531757d2_G {
  
  function constant_January_531757d2_G(): Int
  
  axiom get_constantJanuary_531757d2_G {
    constant_January_531757d2_G() == 1
  }
}

domain ConstantFebruary_531757d2_G {
  
  function constant_February_531757d2_G(): Int
  
  axiom get_constantFebruary_531757d2_G {
    constant_February_531757d2_G() == 2
  }
}

domain ConstantMarch_531757d2_G {
  
  function constant_March_531757d2_G(): Int
  
  axiom get_constantMarch_531757d2_G {
    constant_March_531757d2_G() == 3
  }
}

domain ConstantApril_531757d2_G {
  
  function constant_April_531757d2_G(): Int
  
  axiom get_constantApril_531757d2_G {
    constant_April_531757d2_G() == 4
  }
}

domain ConstantMay_531757d2_G {
  
  function constant_May_531757d2_G(): Int
  
  axiom get_constantMay_531757d2_G {
    constant_May_531757d2_G() == 5
  }
}

domain ConstantJune_531757d2_G {
  
  function constant_June_531757d2_G(): Int
  
  axiom get_constantJune_531757d2_G {
    constant_June_531757d2_G() == 6
  }
}

domain ConstantJuly_531757d2_G {
  
  function constant_July_531757d2_G(): Int
  
  axiom get_constantJuly_531757d2_G {
    constant_July_531757d2_G() == 7
  }
}

domain ConstantAugust_531757d2_G {
  
  function constant_August_531757d2_G(): Int
  
  axiom get_constantAugust_531757d2_G {
    constant_August_531757d2_G() == 8
  }
}

domain ConstantSeptember_531757d2_G {
  
  function constant_September_531757d2_G(): Int
  
  axiom get_constantSeptember_531757d2_G {
    constant_September_531757d2_G() == 9
  }
}

domain ConstantOctober_531757d2_G {
  
  function constant_October_531757d2_G(): Int
  
  axiom get_constantOctober_531757d2_G {
    constant_October_531757d2_G() == 10
  }
}

domain ConstantNovember_531757d2_G {
  
  function constant_November_531757d2_G(): Int
  
  axiom get_constantNovember_531757d2_G {
    constant_November_531757d2_G() == 11
  }
}

domain ConstantDecember_531757d2_G {
  
  function constant_December_531757d2_G(): Int
  
  axiom get_constantDecember_531757d2_G {
    constant_December_531757d2_G() == 12
  }
}

domain ConstantSunday_531757d2_G {
  
  function constant_Sunday_531757d2_G(): Int
  
  axiom get_constantSunday_531757d2_G {
    constant_Sunday_531757d2_G() == 0
  }
}

domain ConstantMonday_531757d2_G {
  
  function constant_Monday_531757d2_G(): Int
  
  axiom get_constantMonday_531757d2_G {
    constant_Monday_531757d2_G() == 1
  }
}

domain ConstantTuesday_531757d2_G {
  
  function constant_Tuesday_531757d2_G(): Int
  
  axiom get_constantTuesday_531757d2_G {
    constant_Tuesday_531757d2_G() == 2
  }
}

domain ConstantWednesday_531757d2_G {
  
  function constant_Wednesday_531757d2_G(): Int
  
  axiom get_constantWednesday_531757d2_G {
    constant_Wednesday_531757d2_G() == 3
  }
}

domain ConstantThursday_531757d2_G {
  
  function constant_Thursday_531757d2_G(): Int
  
  axiom get_constantThursday_531757d2_G {
    constant_Thursday_531757d2_G() == 4
  }
}

domain ConstantFriday_531757d2_G {
  
  function constant_Friday_531757d2_G(): Int
  
  axiom get_constantFriday_531757d2_G {
    constant_Friday_531757d2_G() == 5
  }
}

domain ConstantSaturday_531757d2_G {
  
  function constant_Saturday_531757d2_G(): Int
  
  axiom get_constantSaturday_531757d2_G {
    constant_Saturday_531757d2_G() == 6
  }
}

domain ConstantNanosecond_531757d2_G {
  
  function constant_Nanosecond_531757d2_G(): Int
  
  axiom get_constantNanosecond_531757d2_G {
    constant_Nanosecond_531757d2_G() == 1
  }
}

domain ConstantMicrosecond_531757d2_G {
  
  function constant_Microsecond_531757d2_G(): Int
  
  axiom get_constantMicrosecond_531757d2_G {
    constant_Microsecond_531757d2_G() == 1000
  }
}

domain ConstantMillisecond_531757d2_G {
  
  function constant_Millisecond_531757d2_G(): Int
  
  axiom get_constantMillisecond_531757d2_G {
    constant_Millisecond_531757d2_G() == 1000000
  }
}

domain ConstantSecond_531757d2_G {
  
  function constant_Second_531757d2_G(): Int
  
  axiom get_constantSecond_531757d2_G {
    constant_Second_531757d2_G() == 1000000000
  }
}

domain ConstantMinute_531757d2_G {
  
  function constant_Minute_531757d2_G(): Int
  
  axiom get_constantMinute_531757d2_G {
    constant_Minute_531757d2_G() == 60000000000
  }
}

domain ConstantHour_531757d2_G {
  
  function constant_Hour_531757d2_G(): Int
  
  axiom get_constantHour_531757d2_G {
    constant_Hour_531757d2_G() == 3600000000000
  }
}

domain Slice[T] {
  
  function sarray(s: Slice[T]): ShArray[T]
  
  function soffset(s: Slice[T]): Int
  
  function slen(s: Slice[T]): Int
  
  function scap(s: Slice[T]): Int
  
  function smake(a: ShArray[T], o: Int, l: Int, c: Int): Slice[T]
  
  axiom {
    (forall s: Slice[T] :: { (soffset(s): Int) } 0 <= (soffset(s): Int))
  }
  
  axiom {
    (forall s: Slice[T] :: { (slen(s): Int) } 0 <= (slen(s): Int))
  }
  
  axiom {
    (forall s: Slice[T] :: { (slen(s): Int) } { (scap(s): Int) } (slen(s): Int) <= (scap(s): Int))
  }
  
  axiom {
    (forall s: Slice[T] :: { (soffset(s): Int),(scap(s): Int) } { (ShArraylen((sarray(s): ShArray[T])): Int) } (soffset(s): Int) + (scap(s): Int) <= (ShArraylen((sarray(s): ShArray[T])): Int))
  }
  
  axiom {
    (forall a: ShArray[T], o: Int, l: Int, c: Int :: { (smake(a, o, l, c): Slice[T]) } 0 <= o && (0 <= l && (l <= c && o + c <= (ShArraylen(a): Int))) ==> (sarray((smake(a, o, l, c): Slice[T])): ShArray[T]) == a && ((soffset((smake(a, o, l, c): Slice[T])): Int) == o && ((slen((smake(a, o, l, c): Slice[T])): Int) == l && (scap((smake(a, o, l, c): Slice[T])): Int) == c)))
  }
  
  axiom {
    (forall s: Slice[T] :: { (sarray(s): ShArray[T]) } { (soffset(s): Int) } { (slen(s): Int) } { (scap(s): Int) } s == (smake((sarray(s): ShArray[T]), (soffset(s): Int), (slen(s): Int), (scap(s): Int)): Slice[T]))
  }
}

domain Option[T] {
  
  function optSome(e: T): Option[T]
  
  function optNone(): Option[T]
  
  function optGet(o: Option[T]): T
  
  function optIsNone(o: Option[T]): Bool
  
  axiom {
    (forall e: T :: { (optSome(e): Option[T]) } (optGet((optSome(e): Option[T])): T) == e && !(optIsNone((optSome(e): Option[T])): Bool))
  }
  
  axiom {
    (forall o: Option[T] :: { (optGet(o): T) } !(optIsNone(o): Bool) ==> o == (optSome((optGet(o): T)): Option[T]))
  }
  
  axiom {
    (optIsNone((optNone(): Option[T])): Bool)
  }
  
  axiom {
    (forall o: Option[T] :: { (optIsNone(o): Bool) } o == (optNone(): Option[T]) || (exists e: T :: { (optSome(e): Option[T]) } o == (optSome(e): Option[T])))
  }
}

domain ShArray[T] {
  
  function ShArrayloc(a: ShArray[T], i: Int): T
  
  function ShArraylen(a: ShArray[T]): Int
  
  function ShArrayfirst(r: T): ShArray[T]
  
  function ShArraysecond(r: T): Int
  
  axiom {
    (forall a: ShArray[T], i: Int :: { (ShArrayloc(a, i): T) } 0 <= i && i < (ShArraylen(a): Int) ==> (ShArrayfirst((ShArrayloc(a, i): T)): ShArray[T]) == a && (ShArraysecond((ShArrayloc(a, i): T)): Int) == i)
  }
  
  axiom {
    (forall a: ShArray[T] :: { (ShArraylen(a): Int) } (ShArraylen(a): Int) >= 0)
  }
}

domain D$5488dbb1_faafd1d5_ {
  
  function inIF2_faafd1d5_F(h_V0: D$5488dbb1_faafd1d5_): Option[Int]
  
  function egIF2_faafd1d5_F(h_V0: D$5488dbb1_faafd1d5_): Option[Int]
  
  function HVF_faafd1d5_F(h_V0: D$5488dbb1_faafd1d5_): Seq[Int]
  
  function dfltD$5488dbb1_faafd1d5_(): D$5488dbb1_faafd1d5_
}

domain BoolWellFoundedOrder {
  
  axiom bool_ax_dec {
    (decreasing(false, true): Bool)
  }
  
  axiom bool_ax_bound {
    (forall bool1: Bool :: { (bounded(bool1): Bool) } (bounded(bool1): Bool))
  }
}

domain IntWellFoundedOrder {
  
  axiom integer_ax_dec {
    (forall int1: Int, int2: Int :: { (decreasing(int1, int2): Bool) } int1 < int2 ==> (decreasing(int1, int2): Bool))
  }
  
  axiom integer_ax_bound {
    (forall int1: Int :: { (bounded(int1): Bool) } int1 >= 0 ==> (bounded(int1): Bool))
  }
}

domain MuliSetWellFoundedOrder[S] {
  
  axiom multiset_ax_dec {
    (forall mSet1: Multiset[S], mSet2: Multiset[S] :: { (decreasing(mSet1, mSet2): Bool) } |mSet1| < |mSet2| ==> (decreasing(mSet1, mSet2): Bool))
  }
  
  axiom multiset_ax_bound {
    (forall mSet1: Multiset[S] :: { (bounded(mSet1): Bool) } (bounded(mSet1): Bool))
  }
}

domain PredicateInstancesWellFoundedOrder {
  
  axiom predicate_instances_ax_dec {
    (forall l1: PredicateInstance, l2: PredicateInstance :: { nestedPredicates(l1, l2) } (decreasing(l1, l2): Bool) == nestedPredicates(l1, l2))
  }
  
  axiom predicate_instances_ax_bound {
    (forall l1: PredicateInstance :: { (bounded(l1): Bool) } (bounded(l1): Bool))
  }
}

domain RationalWellFoundedOrder {
  
  axiom rational_ax_dec {
    (forall int1: Perm, int2: Perm :: { (decreasing(int1, int2): Bool) } int1 <= int2 - 1 / 1 ==> (decreasing(int1, int2): Bool))
  }
  
  axiom rational_ax_bound {
    (forall int1: Perm :: { (bounded(int1): Bool) } int1 >= 0 / 1 ==> (bounded(int1): Bool))
  }
}

domain RefWellFoundedOrder {
  
  axiom ref_ax_dec {
    (forall ref1: Ref :: { (decreasing(null, ref1): Bool) } ref1 != null ==> (decreasing(null, ref1): Bool))
  }
  
  axiom ref_ax_bound {
    (forall ref1: Ref :: { (bounded(ref1): Bool) } (bounded(ref1): Bool))
  }
}

domain SeqWellFoundedOrder[S] {
  
  axiom seq_ax_dec {
    (forall seq1: Seq[S], seq2: Seq[S] :: { (decreasing(seq1, seq2): Bool) } |seq1| < |seq2| ==> (decreasing(seq1, seq2): Bool))
  }
  
  axiom seq_ax_bound {
    (forall seq1: Seq[S] :: { (bounded(seq1): Bool) } |seq1| >= 0 ==> (bounded(seq1): Bool))
  }
}

domain SetWellFoundedOrder[S] {
  
  axiom set_ax_dec {
    (forall set1: Set[S], set2: Set[S] :: { (decreasing(set1, set2): Bool) } |set1| < |set2| ==> (decreasing(set1, set2): Bool))
  }
  
  axiom set_ax_bound {
    (forall set1: Set[S] :: { (bounded(set1): Bool) } (bounded(set1): Bool))
  }
}

domain WellFoundedOrder[T] {
  
  function decreasing(arg1: T, arg2: T): Bool
  
  function bounded(arg1: T): Bool
}

domain PredicateInstancesNestedRelation {
  
  function nestedPredicates(l1: PredicateInstance, l2: PredicateInstance): Bool
  
  axiom nestedTrans {
    (forall l1: PredicateInstance, l2: PredicateInstance, l3: PredicateInstance :: { nestedPredicates(l1, l2),nestedPredicates(l2, l3) } nestedPredicates(l1, l2) && nestedPredicates(l2, l3) ==> nestedPredicates(l1, l3))
  }
  
  axiom nestedReflex {
    (forall l1: PredicateInstance :: !nestedPredicates(l1, l1))
  }
}

domain PredicateInstance {
  
  
}

field underlyingMapField: Int

field val$_ShStruct6_RefRefRefRefRefRef: ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]

field val$_Tuple2_RefTypes: Tuple2[Ref, Types]

field val$_Bool: Bool

field val$_Slice_Ref: Slice[Ref]

field val$_Closure: Closure

field val$_Slice_ShStruct4_RefRefRefRef: Slice[ShStruct4[Ref, Ref, Ref, Ref]]

field val$_ShStruct3_RefRefRef: ShStruct3[Ref, Ref, Ref]

field val$_Int: Int

// decreases _
function byteSliceToStrFunc(s: Slice[Ref]): Int
  requires (forall i: Int :: { (ShArrayloc((sarray(s): ShArray[Ref]), sadd((soffset(s): Int), i)): Ref).val$_Int } 0 <= i && i < (slen(s): Int) ==> acc((ShArrayloc((sarray(s): ShArray[Ref]), sadd((soffset(s): Int), i)): Ref).val$_Int, wildcard))


function strSlice(s: Int, l: Int, h: Int): Int
  requires 0 <= l
  requires l <= h
  requires h <= strLen(s)
  ensures strLen(result) == h - l


// decreases _
function sliceDefault_Intbyte$$$_S_$$$(): Slice[Ref]
  ensures (soffset(result): Int) == 0
  ensures (slen(result): Int) == 0
  ensures (scap(result): Int) == 0
  ensures (sarray(result): ShArray[Ref]) == unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref(box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref(arrayNil_1_Intbyte$$$_S_$$$()))


// decreases _
function sliceDefault_Interfaceempty_interface$$$_S_$$$(): Slice[Ref]
  ensures (soffset(result): Int) == 0
  ensures (slen(result): Int) == 0
  ensures (scap(result): Int) == 0
  ensures (sarray(result): ShArray[Ref]) == unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(arrayNil_1_Interfaceempty_interface$$$_S_$$$()))


// decreases _
function sliceDefault_String$$$_S_$$$(): Slice[Ref]
  ensures (soffset(result): Int) == 0
  ensures (slen(result): Int) == 0
  ensures (scap(result): Int) == 0
  ensures (sarray(result): ShArray[Ref]) == unbox_Emb_1_String$$$_S_$$$_ShArray_Ref(box_Emb_1_String$$$_S_$$$_ShArray_Ref(arrayNil_1_String$$$_S_$$$()))


// decreases _
function sliceDefault_DefinedctxPair_a58fd4a8_T$$$_S_$$$(): Slice[ShStruct2[Ref, Ref]]
  ensures (soffset(result): Int) == 0
  ensures (slen(result): Int) == 0
  ensures (scap(result): Int) == 0
  ensures (sarray(result): ShArray[ShStruct2[Ref, Ref]]) == unbox_Emb_1_DefinedctxPair_a58fd4a8_T$$$_S_$$$_ShArray_ShStruct2_RefRef(box_Emb_1_DefinedctxPair_a58fd4a8_T$$$_S_$$$_ShArray_ShStruct2_RefRef(arrayNil_1_DefinedctxPair_a58fd4a8_T$$$_S_$$$()))


// decreases _
function ssliceFromSlice_Ref(s: Slice[Ref], i: Int, j: Int): Slice[Ref]
  requires 0 <= i
  requires i <= j
  requires j <= (scap(s): Int)
  ensures (soffset(result): Int) == (soffset(s): Int) + i
  ensures (slen(result): Int) == j - i
  ensures (scap(result): Int) == (scap(s): Int) - i
  ensures (sarray(result): ShArray[Ref]) == (sarray(s): ShArray[Ref])


function ssliceFromArray_Ref(a: ShArray[Ref], i: Int, j: Int): Slice[Ref]
  requires 0 <= i
  requires i <= j
  requires j <= (ShArraylen(a): Int)
  ensures (soffset(result): Int) == i
  ensures (slen(result): Int) == j - i
  ensures (scap(result): Int) == (ShArraylen(a): Int) - i
  ensures (sarray(result): ShArray[Ref]) == a


// decreases _
function sfullSliceFromSlice_Ref(s: Slice[Ref], i: Int, j: Int, k: Int): Slice[Ref]
  requires 0 <= i
  requires i <= j
  requires j <= k
  requires k <= (scap(s): Int)
  ensures (soffset(result): Int) == (soffset(s): Int) + i
  ensures (slen(result): Int) == j - i
  ensures (scap(result): Int) == k - i
  ensures (sarray(result): ShArray[Ref]) == (sarray(s): ShArray[Ref])


// decreases _
function sfullSliceFromArray_Ref(a: ShArray[Ref], i: Int, j: Int, k: Int): Slice[Ref]
  requires 0 <= i
  requires i <= j
  requires j <= k
  requires k <= (ShArraylen(a): Int)
  ensures (soffset(result): Int) == i
  ensures (slen(result): Int) == j - i
  ensures (scap(result): Int) == k - i
  ensures (sarray(result): ShArray[Ref]) == a


function sconstruct_Ref(a: ShArray[Ref], offset: Int, len: Int, cap: Int): Slice[Ref]
  requires 0 <= offset
  requires 0 <= len
  requires len <= cap
  requires offset + cap <= (ShArraylen(a): Int)
  ensures (sarray(result): ShArray[Ref]) == a
  ensures (soffset(result): Int) == offset
  ensures (slen(result): Int) == len
  ensures (scap(result): Int) == cap


function sconstruct_ShStruct2_RefRef(a: ShArray[ShStruct2[Ref, Ref]], offset: Int, len: Int, cap: Int): Slice[ShStruct2[Ref, Ref]]
  requires 0 <= offset
  requires 0 <= len
  requires len <= cap
  requires offset + cap <= (ShArraylen(a): Int)
  ensures (sarray(result): ShArray[ShStruct2[Ref, Ref]]) == a
  ensures (soffset(result): Int) == offset
  ensures (slen(result): Int) == len
  ensures (scap(result): Int) == cap


// decreases _
function typeOfInterface_Y$55c5ed_bf01f2a6_(itf: Tuple2[Ref, Types]): Types
  ensures result == (get1of2(itf): Types)
  ensures behavioral_subtype_Types(result, Y$55c5ed_bf01f2a6__Types())


// decreases _
function typeOfInterface_Y$91c0a5f1_faafd1d5_(itf: Tuple2[Ref, Types]): Types
  ensures result == (get1of2(itf): Types)
  ensures behavioral_subtype_Types(result, Y$91c0a5f1_faafd1d5__Types())


// decreases _
function typeOfInterface_Y$1dcebcb0_a4af0e5e_(itf: Tuple2[Ref, Types]): Types
  ensures result == (get1of2(itf): Types)
  ensures behavioral_subtype_Types(result, Y$1dcebcb0_a4af0e5e__Types())


function closureGet$NewPathSpec_faafd1d5_F(): Closure
  ensures closureImplements$NewPathSpec_faafd1d5_F$(result)


function arrayDefault_4_Interfaceempty_interface$$$$_E_$$$(): Emb_4_Interfaceempty_interface$$$$_E_$$$
  ensures |unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result)| == 4
  ensures (forall idx: Int :: { unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result)[idx] } 0 <= idx && idx < 4 ==> unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result)[idx] == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))


function arrayDefault_6_Intbyte$$$$_E_$$$(): Emb_6_Intbyte$$$$_E_$$$
  ensures |unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(result)| == 6
  ensures (forall idx: Int :: { unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(result)[idx] } 0 <= idx && idx < 6 ==> unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(result)[idx] == 0)


function arrayDefault_1_Interfaceempty_interface$$$$_E_$$$(): Emb_1_Interfaceempty_interface$$$$_E_$$$
  ensures |unbox_Emb_1_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result)| == 1
  ensures (forall idx: Int :: { unbox_Emb_1_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result)[idx] } 0 <= idx && idx < 1 ==> unbox_Emb_1_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result)[idx] == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))


function arrayDefault_2_Interfaceempty_interface$$$$_E_$$$(): Emb_2_Interfaceempty_interface$$$$_E_$$$
  ensures |unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result)| == 2
  ensures (forall idx: Int :: { unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result)[idx] } 0 <= idx && idx < 2 ==> unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result)[idx] == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))


function arrayDefault_256_Definedmetadata_faafd1d5_T$$$$_E_$$$(): Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$
  ensures |unbox_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(result)| == 256
  ensures (forall idx: Int :: { unbox_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(result)[idx] } 0 <= idx && idx < 256 ==> true && (get0of2(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(result)[idx]): Bool) == (get0of2((tuple2(false, (tuple3(0, stringLit(), closureNil()): Tuple3[Int, Int, Closure])): Tuple2[Bool, Tuple3[Int, Int, Closure]])): Bool) && (true && (get0of3((get1of2(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(result)[idx]): Tuple3[Int, Int, Closure])): Int) == (get0of3((get1of2((tuple2(false, (tuple3(0, stringLit(), closureNil()): Tuple3[Int, Int, Closure])): Tuple2[Bool, Tuple3[Int, Int, Closure]])): Tuple3[Int, Int, Closure])): Int) && (get1of3((get1of2(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(result)[idx]): Tuple3[Int, Int, Closure])): Int) == (get1of3((get1of2((tuple2(false, (tuple3(0, stringLit(), closureNil()): Tuple3[Int, Int, Closure])): Tuple2[Bool, Tuple3[Int, Int, Closure]])): Tuple3[Int, Int, Closure])): Int) && (get2of3((get1of2(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(result)[idx]): Tuple3[Int, Int, Closure])): Closure) == (get2of3((get1of2((tuple2(false, (tuple3(0, stringLit(), closureNil()): Tuple3[Int, Int, Closure])): Tuple2[Bool, Tuple3[Int, Int, Closure]])): Tuple3[Int, Int, Closure])): Closure)))


function arrayConversion_6_Intbyte$$$_S_$$$(x: Emb_6_Intbyte$$$_S_$$$): Emb_6_Intbyte$$$$_E_$$$
  requires true && (forall fn$$17: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(x), fn$$17): Ref) } 0 <= fn$$17 && fn$$17 < 6 ==> acc((ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(x), fn$$17): Ref).val$_Int, wildcard))
  ensures (let fn$$14 == (x) in (let fn$$15 == (result) in (forall fn$$16: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(fn$$14), fn$$16): Ref) } { unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$15)[fn$$16] } 0 <= fn$$16 && fn$$16 < 6 ==> (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(fn$$14), fn$$16): Ref).val$_Int == unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$15)[fn$$16])))


function arrayNil_6_Intbyte$$$_S_$$$(): ShArray[Ref]
  ensures (ShArraylen(result): Int) == 1
  ensures (forall idx: Int :: { (ShArrayloc(result, idx): Ref) } (ShArrayloc(result, idx): Ref) == null)


function arrayNil_1_Intbyte$$$_S_$$$(): ShArray[Ref]
  ensures (ShArraylen(result): Int) == 1
  ensures (forall idx: Int :: { (ShArrayloc(result, idx): Ref) } (ShArrayloc(result, idx): Ref) == null)


function arrayNil_4_Interfaceempty_interface$$$_S_$$$(): ShArray[Ref]
  ensures (ShArraylen(result): Int) == 1
  ensures (forall idx: Int :: { (ShArrayloc(result, idx): Ref) } (ShArrayloc(result, idx): Ref) == null)


function arrayNil_256_Definedmetadata_faafd1d5_T$$$_S_$$$(): ShArray[ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]]
  ensures (ShArraylen(result): Int) == 1
  ensures (forall idx: Int :: { (ShArrayloc(result, idx): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } (ShArrayloc(result, idx): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) == shStructDefault_$inUseA_Bool$$$_S_$$$_MetadataA_DefinedMetadata_faafd1d5_T$$$_S_$$$$())


function arrayNil_1_Interfaceempty_interface$$$_S_$$$(): ShArray[Ref]
  ensures (ShArraylen(result): Int) == 1
  ensures (forall idx: Int :: { (ShArrayloc(result, idx): Ref) } (ShArrayloc(result, idx): Ref) == null)


function arrayNil_2_Interfaceempty_interface$$$_S_$$$(): ShArray[Ref]
  ensures (ShArraylen(result): Int) == 1
  ensures (forall idx: Int :: { (ShArrayloc(result, idx): Ref) } (ShArrayloc(result, idx): Ref) == null)


function arrayNil_1_String$$$_S_$$$(): ShArray[Ref]
  ensures (ShArraylen(result): Int) == 1
  ensures (forall idx: Int :: { (ShArrayloc(result, idx): Ref) } (ShArrayloc(result, idx): Ref) == null)


function arrayNil_1_DefinedctxPair_a58fd4a8_T$$$_S_$$$(): ShArray[ShStruct2[Ref, Ref]]
  ensures (ShArraylen(result): Int) == 1
  ensures (forall idx: Int :: { (ShArrayloc(result, idx): ShStruct2[Ref, Ref]) } (ShArrayloc(result, idx): ShStruct2[Ref, Ref]) == shStructDefault_$KeyA_String$$$_S_$$$_ValueA_Interfaceempty_interface$$$_S_$$$$())


function box_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(x: ShArray[Ref]): Emb_6_Intbyte$$$_S_$$$
  requires (ShArraylen(x): Int) == 6 || x == arrayNil_6_Intbyte$$$_S_$$$()
  ensures unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(result) == x


function unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(y: Emb_6_Intbyte$$$_S_$$$): ShArray[Ref]
  ensures (ShArraylen(result): Int) == 6 || result == arrayNil_6_Intbyte$$$_S_$$$()
  ensures box_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(result) == y


function box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref(x: ShArray[Ref]): Emb_1_Intbyte$$$_S_$$$
  requires (ShArraylen(x): Int) == 1 || x == arrayNil_1_Intbyte$$$_S_$$$()
  ensures unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref(result) == x


function unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref(y: Emb_1_Intbyte$$$_S_$$$): ShArray[Ref]
  ensures (ShArraylen(result): Int) == 1 || result == arrayNil_1_Intbyte$$$_S_$$$()
  ensures box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref(result) == y


function box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(x: ShArray[Ref]): Emb_4_Interfaceempty_interface$$$_S_$$$
  requires (ShArraylen(x): Int) == 4 || x == arrayNil_4_Interfaceempty_interface$$$_S_$$$()
  ensures unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(result) == x


function unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(y: Emb_4_Interfaceempty_interface$$$_S_$$$): ShArray[Ref]
  ensures (ShArraylen(result): Int) == 4 || result == arrayNil_4_Interfaceempty_interface$$$_S_$$$()
  ensures box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(result) == y


function box_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(x: ShArray[ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]]): Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$
  requires (ShArraylen(x): Int) == 256 || x == arrayNil_256_Definedmetadata_faafd1d5_T$$$_S_$$$()
  ensures unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(result) == x


function unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(y: Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$): ShArray[ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]]
  ensures (ShArraylen(result): Int) == 256 || result == arrayNil_256_Definedmetadata_faafd1d5_T$$$_S_$$$()
  ensures box_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(result) == y


function box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(x: ShArray[Ref]): Emb_1_Interfaceempty_interface$$$_S_$$$
  requires (ShArraylen(x): Int) == 1 || x == arrayNil_1_Interfaceempty_interface$$$_S_$$$()
  ensures unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(result) == x


function unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(y: Emb_1_Interfaceempty_interface$$$_S_$$$): ShArray[Ref]
  ensures (ShArraylen(result): Int) == 1 || result == arrayNil_1_Interfaceempty_interface$$$_S_$$$()
  ensures box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(result) == y


function box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(x: ShArray[Ref]): Emb_2_Interfaceempty_interface$$$_S_$$$
  requires (ShArraylen(x): Int) == 2 || x == arrayNil_2_Interfaceempty_interface$$$_S_$$$()
  ensures unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(result) == x


function unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(y: Emb_2_Interfaceempty_interface$$$_S_$$$): ShArray[Ref]
  ensures (ShArraylen(result): Int) == 2 || result == arrayNil_2_Interfaceempty_interface$$$_S_$$$()
  ensures box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(result) == y


function box_Emb_1_String$$$_S_$$$_ShArray_Ref(x: ShArray[Ref]): Emb_1_String$$$_S_$$$
  requires (ShArraylen(x): Int) == 1 || x == arrayNil_1_String$$$_S_$$$()
  ensures unbox_Emb_1_String$$$_S_$$$_ShArray_Ref(result) == x


function unbox_Emb_1_String$$$_S_$$$_ShArray_Ref(y: Emb_1_String$$$_S_$$$): ShArray[Ref]
  ensures (ShArraylen(result): Int) == 1 || result == arrayNil_1_String$$$_S_$$$()
  ensures box_Emb_1_String$$$_S_$$$_ShArray_Ref(result) == y


function box_Emb_1_DefinedctxPair_a58fd4a8_T$$$_S_$$$_ShArray_ShStruct2_RefRef(x: ShArray[ShStruct2[Ref, Ref]]): Emb_1_DefinedctxPair_a58fd4a8_T$$$_S_$$$
  requires (ShArraylen(x): Int) == 1 || x == arrayNil_1_DefinedctxPair_a58fd4a8_T$$$_S_$$$()
  ensures unbox_Emb_1_DefinedctxPair_a58fd4a8_T$$$_S_$$$_ShArray_ShStruct2_RefRef(result) == x


function unbox_Emb_1_DefinedctxPair_a58fd4a8_T$$$_S_$$$_ShArray_ShStruct2_RefRef(y: Emb_1_DefinedctxPair_a58fd4a8_T$$$_S_$$$): ShArray[ShStruct2[Ref, Ref]]
  ensures (ShArraylen(result): Int) == 1 || result == arrayNil_1_DefinedctxPair_a58fd4a8_T$$$_S_$$$()
  ensures box_Emb_1_DefinedctxPair_a58fd4a8_T$$$_S_$$$_ShArray_ShStruct2_RefRef(result) == y


function box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(x: Seq[Tuple2[Ref, Types]]): Emb_4_Interfaceempty_interface$$$$_E_$$$
  requires |x| == 4
  ensures unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result) == x


function unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(y: Emb_4_Interfaceempty_interface$$$$_E_$$$): Seq[Tuple2[Ref, Types]]
  ensures |result| == 4
  ensures box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result) == y


function box_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(x: Seq[Int]): Emb_6_Intbyte$$$$_E_$$$
  requires |x| == 6
  ensures unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(result) == x


function unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(y: Emb_6_Intbyte$$$$_E_$$$): Seq[Int]
  ensures |result| == 6
  ensures box_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(result) == y


function box_Emb_1_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(x: Seq[Tuple2[Ref, Types]]): Emb_1_Interfaceempty_interface$$$$_E_$$$
  requires |x| == 1
  ensures unbox_Emb_1_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result) == x


function unbox_Emb_1_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(y: Emb_1_Interfaceempty_interface$$$$_E_$$$): Seq[Tuple2[Ref, Types]]
  ensures |result| == 1
  ensures box_Emb_1_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result) == y


function box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(x: Seq[Tuple2[Ref, Types]]): Emb_2_Interfaceempty_interface$$$$_E_$$$
  requires |x| == 2
  ensures unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result) == x


function unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(y: Emb_2_Interfaceempty_interface$$$$_E_$$$): Seq[Tuple2[Ref, Types]]
  ensures |result| == 2
  ensures box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(result) == y


function box_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(x: Seq[Tuple2[Bool, Tuple3[Int, Int, Closure]]]): Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$
  requires |x| == 256
  ensures unbox_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(result) == x


function unbox_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(y: Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$): Seq[Tuple2[Bool, Tuple3[Int, Int, Closure]]]
  ensures |result| == 256
  ensures box_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(result) == y


// decreases _
function shStructDefault_$IngressRouterAlertA_Bool$$$_S_$$$_EgressRouterAlertA_Bool$$$_S_$$$_ExpTimeA_Intuint8$$$_S_$$$_ConsIngressA_Intuint16$$$_S_$$$_ConsEgressA_Intuint16$$$_S_$$$_MacA_Array6Intbyte$$$_S_$$$$$$_S_$$$$(): ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]
  ensures true && (ShStructget0of6(result): Ref) == null && (ShStructget1of6(result): Ref) == null && (ShStructget2of6(result): Ref) == null && (ShStructget3of6(result): Ref) == null && (ShStructget4of6(result): Ref) == null && (ShStructget5of6(result): Emb_6_Intbyte$$$_S_$$$) == box_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(arrayNil_6_Intbyte$$$_S_$$$())


// decreases _
function shStructDefault_$rawA_SliceIntbyte$$$_S_$$$$$$_S_$$$_pathTypeA_DefinedType_faafd1d5_T$$$_S_$$$$(): ShStruct2[Ref, Ref]
  ensures true && (ShStructget0of2(result): Ref) == null && (ShStructget1of2(result): Ref) == null


// decreases _
function shStructDefault_$PeerA_Bool$$$_S_$$$_ConsDirA_Bool$$$_S_$$$_SegIDA_Intuint16$$$_S_$$$_TimestampA_Intuint32$$$_S_$$$$(): ShStruct4[Ref, Ref, Ref, Ref]
  ensures true && (ShStructget0of4(result): Ref) == null && (ShStructget1of4(result): Ref) == null && (ShStructget2of4(result): Ref) == null && (ShStructget3of4(result): Ref) == null


// decreases _
function shStructDefault_$TypeA_DefinedType_faafd1d5_T$$$_S_$$$_DescA_String$$$_S_$$$_NewA_Func$$DefinedPath_faafd1d5_T$$$$_E_$$$$$$$_S_$$$$(): ShStruct3[Ref, Ref, Ref]
  ensures true && (ShStructget0of3(result): Ref) == null && (ShStructget1of3(result): Ref) == null && (ShStructget2of3(result): Ref) == null


// decreases _
function shStructDefault_$inUseA_Bool$$$_S_$$$_MetadataA_DefinedMetadata_faafd1d5_T$$$_S_$$$$(): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]
  ensures true && (ShStructget0of2(result): Ref) == null && (ShStructget1of2(result): ShStruct3[Ref, Ref, Ref]) == shStructDefault_$TypeA_DefinedType_faafd1d5_T$$$_S_$$$_DescA_String$$$_S_$$$_NewA_Func$$DefinedPath_faafd1d5_T$$$$_E_$$$$$$$_S_$$$$()


// decreases _
function shStructDefault_$KeyA_String$$$_S_$$$_ValueA_Interfaceempty_interface$$$_S_$$$$(): ShStruct2[Ref, Ref]
  ensures true && (ShStructget0of2(result): Ref) == null && (ShStructget1of2(result): Ref) == null


// decreases _
function shStructDefault_$nameA_String$$$_S_$$$_txA_SliceDefinedzoneTrans_531757d2_T$$$_S_$$$$$$_S_$$$_extendA_String$$$_S_$$$_cacheStartA_Intint64$$$_S_$$$_cacheEndA_Intint64$$$_S_$$$_cacheZoneA_PointerDefinedzone_531757d2_T$$$_S_$$$$$$_S_$$$$(): ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]
  ensures true && (ShStructget0of6(result): Ref) == null && (ShStructget1of6(result): Ref) == null && (ShStructget2of6(result): Ref) == null && (ShStructget3of6(result): Ref) == null && (ShStructget4of6(result): Ref) == null && (ShStructget5of6(result): Ref) == null


// decreases _
function intBitwiseXor(left: Int, right: Int): Int


// decreases _
function intBitwiseOr(left: Int, right: Int): Int


// decreases _
function intBitwiseAnd(left: Int, right: Int): Int


// decreases 
function assertArg2_Bool(b: Bool, y: Bool): Bool
  requires b
{
  y
}

// decreases 
function assertArg2_Slice_Ref(b: Bool, y: Slice[Ref]): Slice[Ref]
  requires b
{
  y
}

// decreases 
function assertArg2_Tuple4_Tuple2_IntTuple2_RefTypesRefTuple2_RefTypesRef(b: Bool, y: Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref]): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref]
  requires b
{
  y
}

// decreases 
function assertArg2_Tuple2_IntTuple2_RefTypes(b: Bool, y: Tuple2[Int, Tuple2[Ref, Types]]): Tuple2[Int, Tuple2[Ref, Types]]
  requires b
{
  y
}

// decreases 
function assertArg2_ShStruct2_RefRef(b: Bool, y: ShStruct2[Ref, Ref]): ShStruct2[Ref, Ref]
  requires b
{
  y
}

// decreases 
function assertArg2_Int(b: Bool, y: Int): Int
  requires b
{
  y
}

function sadd(left: Int, right: Int): Int
  ensures result == left + right
{
  left + right
}

// decreases 
function GetUnderlyingBuf_faafd1d5_PMrawPath(r_V0: ShStruct2[Ref, Ref]): Slice[Ref]
  requires acc(dynamic_pred_1((tuple2((box_Poly(r_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), wildcard)
{
  (unfolding acc(dynamic_pred_1((tuple2((box_Poly(r_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), wildcard) in (ShStructget0of2(r_V0): Ref).val$_Slice_Ref)
}

function Registered_faafd1d5_F(t_V0: Int): Bool
  requires 0 <= t_V0 && t_V0 < constant_maxPathType_faafd1d5_G()
  requires acc(PathPackageMem_faafd1d5_F(), wildcard)
  ensures result == (unfolding acc(PathPackageMem_faafd1d5_F(), wildcard) in (ShStructget0of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), t_V0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): Ref).val$_Bool)
{
  (unfolding acc(PathPackageMem_faafd1d5_F(), wildcard) in (ShStructget0of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), t_V0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): Ref).val$_Bool)
}

function GetType_faafd1d5_F(t_V0: Int): Tuple3[Int, Int, Closure]
  requires 0 <= t_V0 && t_V0 < constant_maxPathType_faafd1d5_G()
  requires acc(PathPackageMem_faafd1d5_F(), wildcard)
{
  (unfolding acc(PathPackageMem_faafd1d5_F(), wildcard) in (tuple3((ShStructget0of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), t_V0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int, (ShStructget1of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), t_V0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int, (ShStructget2of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), t_V0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Closure): Tuple3[Int, Int, Closure]))
}

function IsStrictDecoding_faafd1d5_F(): Bool
  requires acc(PathPackageMem_faafd1d5_F(), wildcard)
  ensures result == (unfolding acc(PathPackageMem_faafd1d5_F(), wildcard) in strictDecoding_faafd1d5_G().val$_Bool)
{
  (unfolding acc(PathPackageMem_faafd1d5_F(), wildcard) in strictDecoding_faafd1d5_G().val$_Bool)
}

// decreases 
function Len_faafd1d5_PMrawPath(p_V0: ShStruct2[Ref, Ref]): Int
  requires acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), wildcard)
  ensures result >= 0
{
  (unfolding acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), wildcard) in (slen((ShStructget0of2(p_V0): Ref).val$_Slice_Ref): Int))
}

// decreases 
function Type_faafd1d5_PMrawPath(p_V0: ShStruct2[Ref, Ref]): Int
  requires acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), wildcard)
{
  (unfolding acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), wildcard) in (ShStructget1of2(p_V0): Ref).val$_Int)
}

function AbstractHopField_faafd1d5_F(h_V0: Tuple6[Bool, Bool, Int, Int, Int, Emb_6_Intbyte$$$$_E_$$$]): D$5488dbb1_faafd1d5_
  ensures (get3of6(h_V0): Int) == 0 ==> inIF2_faafd1d5_F(result) == (optNone(): Option[Int])
  ensures !((get3of6(h_V0): Int) == 0) ==> inIF2_faafd1d5_F(result) == (optSome((get3of6(h_V0): Int)): Option[Int])
  ensures (get4of6(h_V0): Int) == 0 ==> egIF2_faafd1d5_F(result) == (optNone(): Option[Int])
  ensures !((get4of6(h_V0): Int) == 0) ==> egIF2_faafd1d5_F(result) == (optSome((get3of6(h_V0): Int)): Option[Int])


// decreases _
function strictDecoding_faafd1d5_G(): Ref


// decreases _
function registeredPaths_faafd1d5_G(): Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$


// decreases 
function PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_Len_faafd1d5_PMrawPath_Len_faafd1d5_SY$91c0a5f1_faafd1d5__proof(p_V0: ShStruct2[Ref, Ref]): Int
  requires acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), wildcard)
  ensures result >= 0
{
  Len_faafd1d5_PMrawPath(p_V0)
}

// decreases 
function DefinedlittleEndian_bf01f2a6_T$$$$_E_$$$_String_bf01f2a6_MlittleEndian_String_bf01f2a6_SY$55c5ed_bf01f2a6__proof(l_V0: Int): Int
{
  String_bf01f2a6_MlittleEndian(l_V0)
}

function DefinedlittleEndian_bf01f2a6_T$$$$_E_$$$_Uint32_bf01f2a6_MlittleEndian_Uint32_bf01f2a6_SY$55c5ed_bf01f2a6__proof(e_V0: Int, b_V0: Slice[Ref]): Int
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, wildcard)
  ensures result >= 0
{
  Uint32_bf01f2a6_MlittleEndian(e_V0, b_V0)
}

function DefinedbigEndian_bf01f2a6_T$$$$_E_$$$_Uint16_bf01f2a6_MbigEndian_Uint16_bf01f2a6_SY$55c5ed_bf01f2a6__proof(e_V0: Int, b_V0: Slice[Ref]): Int
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard)
  ensures result >= 0
{
  Uint16_bf01f2a6_MbigEndian(e_V0, b_V0)
}

// decreases 
function PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_GetUnderlyingBuf_faafd1d5_PMrawPath_GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5__proof(r_V0: ShStruct2[Ref, Ref]): Slice[Ref]
  requires acc(dynamic_pred_1((tuple2((box_Poly(r_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), wildcard)
{
  GetUnderlyingBuf_faafd1d5_PMrawPath(r_V0)
}

function DefinedbigEndian_bf01f2a6_T$$$$_E_$$$_Uint32_bf01f2a6_MbigEndian_Uint32_bf01f2a6_SY$55c5ed_bf01f2a6__proof(e_V0: Int, b_V0: Slice[Ref]): Int
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, wildcard)
  ensures result >= 0
{
  Uint32_bf01f2a6_MbigEndian(e_V0, b_V0)
}

function DefinedlittleEndian_bf01f2a6_T$$$$_E_$$$_Uint64_bf01f2a6_MlittleEndian_Uint64_bf01f2a6_SY$55c5ed_bf01f2a6__proof(e_V0: Int, b_V0: Slice[Ref]): Int
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, wildcard)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref).val$_Int, wildcard)
  ensures result >= 0
{
  Uint64_bf01f2a6_MlittleEndian(e_V0, b_V0)
}

function DefinedbigEndian_bf01f2a6_T$$$$_E_$$$_Uint64_bf01f2a6_MbigEndian_Uint64_bf01f2a6_SY$55c5ed_bf01f2a6__proof(e_V0: Int, b_V0: Slice[Ref]): Int
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, wildcard)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref).val$_Int, wildcard)
  ensures result >= 0
{
  Uint64_bf01f2a6_MbigEndian(e_V0, b_V0)
}

// decreases 
function DefinedbigEndian_bf01f2a6_T$$$$_E_$$$_String_bf01f2a6_MbigEndian_String_bf01f2a6_SY$55c5ed_bf01f2a6__proof(b_V0: Int): Int
{
  String_bf01f2a6_MbigEndian(b_V0)
}

// decreases 
function PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_Type_faafd1d5_PMrawPath_Type_faafd1d5_SY$91c0a5f1_faafd1d5__proof(p_V0: ShStruct2[Ref, Ref]): Int
  requires acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), wildcard)
{
  Type_faafd1d5_PMrawPath(p_V0)
}

function DefinedlittleEndian_bf01f2a6_T$$$$_E_$$$_Uint16_bf01f2a6_MlittleEndian_Uint16_bf01f2a6_SY$55c5ed_bf01f2a6__proof(e_V0: Int, b_V0: Slice[Ref]): Int
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard)
  ensures result >= 0
{
  Uint16_bf01f2a6_MlittleEndian(e_V0, b_V0)
}

function NewSeq_Bytes_88c2f8cc_F(size_V0: Int): Seq[Int]
  requires size_V0 >= 0
  ensures |result| == size_V0
  ensures (forall i_V1: Int :: { result[i_V1] } 0 <= i_V1 && i_V1 < size_V0 ==> result[i_V1] == 0)


function NewSeq_Any_88c2f8cc_F(size_V0: Int): Seq[Tuple2[Ref, Types]]
  requires size_V0 >= 0
  ensures |result| == size_V0
  ensures (forall i_V1: Int :: { comparableInterface(result[i_V1]) } 0 <= i_V1 && i_V1 < size_V0 ==> assertArg2_Bool(comparableInterface(result[i_V1]) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), result[i_V1] == (tuple2(null, nil_Types()): Tuple2[Ref, Types])))


// decreases 
function Size_6f559e0_SY$353949c1_6f559e0_(thisItf: Tuple2[Ref, Types]): Int
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(Mem_6f559e0_SY$353949c1_6f559e0_(thisItf), wildcard)
  ensures result >= 0


function IsOfPrimitiveType_b40dce56_F(v_V0: Tuple2[Ref, Types]): Bool
  ensures (get1of2(v_V0): Types) == bool_Types() ==> result
  ensures (get1of2(v_V0): Types) == byte_Types() ==> result
  ensures (get1of2(v_V0): Types) == int32_Types() ==> result
  ensures (get1of2(v_V0): Types) == int_Types() ==> result
  ensures (get1of2(v_V0): Types) == int8_Types() ==> result
  ensures (get1of2(v_V0): Types) == int16_Types() ==> result
  ensures (get1of2(v_V0): Types) == int32_Types() ==> result
  ensures (get1of2(v_V0): Types) == int64_Types() ==> result
  ensures (get1of2(v_V0): Types) == uint_Types() ==> result
  ensures (get1of2(v_V0): Types) == byte_Types() ==> result
  ensures (get1of2(v_V0): Types) == uint16_Types() ==> result
  ensures (get1of2(v_V0): Types) == uint32_Types() ==> result
  ensures (get1of2(v_V0): Types) == uint64_Types() ==> result
  ensures (get1of2(v_V0): Types) == uintptr_Types() ==> result
  ensures (get1of2(v_V0): Types) == string_Types() ==> result


// decreases 
function Uint16_bf01f2a6_MlittleEndian(e_V0: Int, b_V0: Slice[Ref]): Int
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard)
  ensures result >= 0


// decreases 
function Uint32_bf01f2a6_MlittleEndian(e_V0: Int, b_V0: Slice[Ref]): Int
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, wildcard)
  ensures result >= 0


// decreases 
function Uint64_bf01f2a6_MlittleEndian(e_V0: Int, b_V0: Slice[Ref]): Int
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, wildcard)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref).val$_Int, wildcard)
  ensures result >= 0


// decreases 
function String_bf01f2a6_MlittleEndian(l_V0: Int): Int
  ensures result == stringLit4c6974746c65456e6469616e()
{
  stringLit4c6974746c65456e6469616e()
}

// decreases 
function GoString_bf01f2a6_MlittleEndian(l_V0: Int): Int
  ensures result == stringLit62696e6172792e4c6974746c65456e6469616e()
{
  stringLit62696e6172792e4c6974746c65456e6469616e()
}

// decreases 
function Uint16_bf01f2a6_MbigEndian(e_V0: Int, b_V0: Slice[Ref]): Int
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard)
  ensures result >= 0


// decreases 
function Uint32_bf01f2a6_MbigEndian(e_V0: Int, b_V0: Slice[Ref]): Int
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, wildcard)
  ensures result >= 0


// decreases 
function Uint64_bf01f2a6_MbigEndian(e_V0: Int, b_V0: Slice[Ref]): Int
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, wildcard)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref).val$_Int, wildcard)
  ensures result >= 0


// decreases 
function String_bf01f2a6_MbigEndian(b_V0: Int): Int
  ensures result == stringLit426967456e6469616e()
{
  stringLit426967456e6469616e()
}

// decreases 
function GoString_bf01f2a6_MbigEndian(b_V0: Int): Int
  ensures result == stringLit62696e6172792e426967456e6469616e()
{
  stringLit62696e6172792e426967456e6469616e()
}

function Uint64_bf01f2a6_SY$55c5ed_bf01f2a6_(thisItf: Tuple2[Ref, Types], b_V0: Slice[Ref]): Int
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, wildcard)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref).val$_Int, wildcard)
  ensures (get1of2(thisItf): Types) == bigEndian_bf01f2a6_T_Types() ==> result == DefinedbigEndian_bf01f2a6_T$$$$_E_$$$_Uint64_bf01f2a6_MbigEndian_Uint64_bf01f2a6_SY$55c5ed_bf01f2a6__proof((unbox_Poly((get0of2(thisItf): Ref)): Int), b_V0)
  ensures (get1of2(thisItf): Types) == littleEndian_bf01f2a6_T_Types() ==> result == DefinedlittleEndian_bf01f2a6_T$$$$_E_$$$_Uint64_bf01f2a6_MlittleEndian_Uint64_bf01f2a6_SY$55c5ed_bf01f2a6__proof((unbox_Poly((get0of2(thisItf): Ref)): Int), b_V0)
  ensures result >= 0


function Uint32_bf01f2a6_SY$55c5ed_bf01f2a6_(thisItf: Tuple2[Ref, Types], b_V0: Slice[Ref]): Int
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, wildcard)
  ensures (get1of2(thisItf): Types) == bigEndian_bf01f2a6_T_Types() ==> result == DefinedbigEndian_bf01f2a6_T$$$$_E_$$$_Uint32_bf01f2a6_MbigEndian_Uint32_bf01f2a6_SY$55c5ed_bf01f2a6__proof((unbox_Poly((get0of2(thisItf): Ref)): Int), b_V0)
  ensures (get1of2(thisItf): Types) == littleEndian_bf01f2a6_T_Types() ==> result == DefinedlittleEndian_bf01f2a6_T$$$$_E_$$$_Uint32_bf01f2a6_MlittleEndian_Uint32_bf01f2a6_SY$55c5ed_bf01f2a6__proof((unbox_Poly((get0of2(thisItf): Ref)): Int), b_V0)
  ensures result >= 0


function Uint16_bf01f2a6_SY$55c5ed_bf01f2a6_(thisItf: Tuple2[Ref, Types], b_V0: Slice[Ref]): Int
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard)
  ensures (get1of2(thisItf): Types) == bigEndian_bf01f2a6_T_Types() ==> result == DefinedbigEndian_bf01f2a6_T$$$$_E_$$$_Uint16_bf01f2a6_MbigEndian_Uint16_bf01f2a6_SY$55c5ed_bf01f2a6__proof((unbox_Poly((get0of2(thisItf): Ref)): Int), b_V0)
  ensures (get1of2(thisItf): Types) == littleEndian_bf01f2a6_T_Types() ==> result == DefinedlittleEndian_bf01f2a6_T$$$$_E_$$$_Uint16_bf01f2a6_MlittleEndian_Uint16_bf01f2a6_SY$55c5ed_bf01f2a6__proof((unbox_Poly((get0of2(thisItf): Ref)): Int), b_V0)
  ensures result >= 0


function Join_a397bb98_F(elems_V0: Slice[Ref], sep_V0: Int): Int
  requires (forall i_V1: Int :: { (ShArrayloc((sarray(elems_V0): ShArray[Ref]), sadd((soffset(elems_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(elems_V0): Int) ==> acc((ShArrayloc((sarray(elems_V0): ShArray[Ref]), sadd((soffset(elems_V0): Int), i_V1)): Ref).val$_Int, wildcard))
  ensures (slen(elems_V0): Int) == 0 ==> result == stringLit()
  ensures (slen(elems_V0): Int) == 1 ==> result == (ShArrayloc((sarray(elems_V0): ShArray[Ref]), sadd((soffset(elems_V0): Int), 0)): Ref).val$_Int


function HasPrefix_a397bb98_F(s_V0: Int, prefix_V0: Int): Bool
  ensures result == (strLen(s_V0) >= strLen(prefix_V0) && strSlice(s_V0, 0, strLen(prefix_V0)) == prefix_V0)
{
  strLen(s_V0) >= strLen(prefix_V0) && strSlice(s_V0, 0, strLen(prefix_V0)) == prefix_V0
}

function HasSuffix_a397bb98_F(s_V0: Int, suffix_V0: Int): Bool
  ensures result == (strLen(s_V0) >= strLen(suffix_V0) && strSlice(s_V0, strLen(s_V0) - strLen(suffix_V0), strLen(s_V0)) == suffix_V0)
{
  strLen(s_V0) >= strLen(suffix_V0) && strSlice(s_V0, strLen(s_V0) - strLen(suffix_V0), strLen(s_V0)) == suffix_V0
}

function Repeat_a397bb98_F(s_V0: Int, count_V0: Int): Int
  requires count_V0 >= 0
  ensures result == (count_V0 == 0 ? stringLit() : strConcat(s_V0, Repeat_a397bb98_F(s_V0, count_V0 - 1)))


// decreases 
function Equal_c31aebe5_F(a_V0: Slice[Ref], b_V0: Slice[Ref]): Bool
  requires (forall i_V1: Int :: { (ShArrayloc((sarray(a_V0): ShArray[Ref]), sadd((soffset(a_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(a_V0): Int) ==> acc((ShArrayloc((sarray(a_V0): ShArray[Ref]), sadd((soffset(a_V0): Int), i_V1)): Ref).val$_Int, wildcard))
  requires (forall i_V2: Int :: { (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), i_V2)): Ref) } 0 <= i_V2 && i_V2 < (slen(b_V0): Int) ==> acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), i_V2)): Ref).val$_Int, wildcard))
{
  byteSliceToStrFunc(a_V0) == byteSliceToStrFunc(b_V0)
}

// decreases 
function After_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]], u_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]): Bool


// decreases 
function Before_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]], u_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]): Bool


// decreases 
function IsZero_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]): Bool


// decreases 
function Hour_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]): Int
  ensures 0 <= result && result <= 23


// decreases 
function Minute_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]): Int
  ensures 0 <= result && result <= 59


// decreases 
function Second_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]): Int
  ensures 0 <= result && result <= 59


// decreases 
function Nanosecond_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]): Int
  ensures 0 <= result && result <= 999999999


// decreases 
function Truncate_531757d2_MDuration(d_V0: Int, m_V0: Int): Int
  ensures m_V0 <= 0 ==> result == d_V0
  ensures m_V0 > 0 ==> result == d_V0 - d_V0 % m_V0


// decreases 
function Round_531757d2_MDuration(d_V0: Int, m_V0: Int): Int


// decreases 
function String_bf01f2a6_SY$55c5ed_bf01f2a6_(thisItf: Tuple2[Ref, Types]): Int
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  ensures (get1of2(thisItf): Types) == bigEndian_bf01f2a6_T_Types() ==> result == DefinedbigEndian_bf01f2a6_T$$$$_E_$$$_String_bf01f2a6_MbigEndian_String_bf01f2a6_SY$55c5ed_bf01f2a6__proof((unbox_Poly((get0of2(thisItf): Ref)): Int))
  ensures (get1of2(thisItf): Types) == littleEndian_bf01f2a6_T_Types() ==> result == DefinedlittleEndian_bf01f2a6_T$$$$_E_$$$_String_bf01f2a6_MlittleEndian_String_bf01f2a6_SY$55c5ed_bf01f2a6__proof((unbox_Poly((get0of2(thisItf): Ref)): Int))
{
  (true ? String_bf01f2a6_SY$55c5ed_bf01f2a6_$itfcopy$fallback(thisItf) : (typeOfInterface_Y$55c5ed_bf01f2a6_(thisItf) == littleEndian_bf01f2a6_T_Types() ? String_bf01f2a6_MlittleEndian(assertArg2_Int(behavioral_subtype_Types(typeOfInterface_Y$55c5ed_bf01f2a6_(thisItf), littleEndian_bf01f2a6_T_Types()), (unbox_Poly((get0of2(thisItf): Ref)): Int))) : (typeOfInterface_Y$55c5ed_bf01f2a6_(thisItf) == bigEndian_bf01f2a6_T_Types() ? String_bf01f2a6_MbigEndian(assertArg2_Int(behavioral_subtype_Types(typeOfInterface_Y$55c5ed_bf01f2a6_(thisItf), bigEndian_bf01f2a6_T_Types()), (unbox_Poly((get0of2(thisItf): Ref)): Int))) : String_bf01f2a6_SY$55c5ed_bf01f2a6_$itfcopy$fallback(thisItf))))
}

// decreases _
function Type_faafd1d5_SY$91c0a5f1_faafd1d5_$itfcopy$fallback(thisItf: Tuple2[Ref, Types]): Int
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(dynamic_pred_1(thisItf), wildcard)
  ensures (get1of2(thisItf): Types) == pointer_Types(rawPath_faafd1d5_T_Types()) ==> result == PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_Type_faafd1d5_PMrawPath_Type_faafd1d5_SY$91c0a5f1_faafd1d5__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]))


// decreases 
function Len_faafd1d5_SY$91c0a5f1_faafd1d5_(thisItf: Tuple2[Ref, Types]): Int
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(dynamic_pred_1(thisItf), wildcard)
  ensures (get1of2(thisItf): Types) == pointer_Types(rawPath_faafd1d5_T_Types()) ==> result == PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_Len_faafd1d5_PMrawPath_Len_faafd1d5_SY$91c0a5f1_faafd1d5__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]))
  ensures result >= 0
{
  (true ? Len_faafd1d5_SY$91c0a5f1_faafd1d5_$itfcopy$fallback(thisItf) : (typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf) == pointer_Types(rawPath_faafd1d5_T_Types()) ? Len_faafd1d5_PMrawPath(assertArg2_ShStruct2_RefRef(behavioral_subtype_Types(typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf), pointer_Types(rawPath_faafd1d5_T_Types())), (unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]))) : Len_faafd1d5_SY$91c0a5f1_faafd1d5_$itfcopy$fallback(thisItf)))
}

// decreases 
function GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5_(thisItf: Tuple2[Ref, Types]): Slice[Ref]
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(dynamic_pred_1(thisItf), wildcard)
  ensures (get1of2(thisItf): Types) == pointer_Types(rawPath_faafd1d5_T_Types()) ==> result == PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_GetUnderlyingBuf_faafd1d5_PMrawPath_GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]))
{
  (true ? GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5_$itfcopy$fallback(thisItf) : (typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf) == pointer_Types(rawPath_faafd1d5_T_Types()) ? GetUnderlyingBuf_faafd1d5_PMrawPath(assertArg2_ShStruct2_RefRef(behavioral_subtype_Types(typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf), pointer_Types(rawPath_faafd1d5_T_Types())), (unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]))) : GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5_$itfcopy$fallback(thisItf)))
}

// decreases _
function Len_faafd1d5_SY$91c0a5f1_faafd1d5_$itfcopy$fallback(thisItf: Tuple2[Ref, Types]): Int
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(dynamic_pred_1(thisItf), wildcard)
  ensures (get1of2(thisItf): Types) == pointer_Types(rawPath_faafd1d5_T_Types()) ==> result == PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_Len_faafd1d5_PMrawPath_Len_faafd1d5_SY$91c0a5f1_faafd1d5__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]))
  ensures result >= 0


// decreases _
function String_bf01f2a6_SY$55c5ed_bf01f2a6_$itfcopy$fallback(thisItf: Tuple2[Ref, Types]): Int
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  ensures (get1of2(thisItf): Types) == bigEndian_bf01f2a6_T_Types() ==> result == DefinedbigEndian_bf01f2a6_T$$$$_E_$$$_String_bf01f2a6_MbigEndian_String_bf01f2a6_SY$55c5ed_bf01f2a6__proof((unbox_Poly((get0of2(thisItf): Ref)): Int))
  ensures (get1of2(thisItf): Types) == littleEndian_bf01f2a6_T_Types() ==> result == DefinedlittleEndian_bf01f2a6_T$$$$_E_$$$_String_bf01f2a6_MlittleEndian_String_bf01f2a6_SY$55c5ed_bf01f2a6__proof((unbox_Poly((get0of2(thisItf): Ref)): Int))


// decreases 
function Type_faafd1d5_SY$91c0a5f1_faafd1d5_(thisItf: Tuple2[Ref, Types]): Int
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(dynamic_pred_1(thisItf), wildcard)
  ensures (get1of2(thisItf): Types) == pointer_Types(rawPath_faafd1d5_T_Types()) ==> result == PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_Type_faafd1d5_PMrawPath_Type_faafd1d5_SY$91c0a5f1_faafd1d5__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]))
{
  (true ? Type_faafd1d5_SY$91c0a5f1_faafd1d5_$itfcopy$fallback(thisItf) : (typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf) == pointer_Types(rawPath_faafd1d5_T_Types()) ? Type_faafd1d5_PMrawPath(assertArg2_ShStruct2_RefRef(behavioral_subtype_Types(typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf), pointer_Types(rawPath_faafd1d5_T_Types())), (unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]))) : Type_faafd1d5_SY$91c0a5f1_faafd1d5_$itfcopy$fallback(thisItf)))
}

// decreases _
function GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5_$itfcopy$fallback(thisItf: Tuple2[Ref, Types]): Slice[Ref]
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(dynamic_pred_1(thisItf), wildcard)
  ensures (get1of2(thisItf): Types) == pointer_Types(rawPath_faafd1d5_T_Types()) ==> result == PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_GetUnderlyingBuf_faafd1d5_PMrawPath_GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]))


predicate dynamic_pred_1_unknown(i: Tuple2[Ref, Types]) 

predicate dynamic_pred_1(i: Tuple2[Ref, Types]) {
  ((get1of2(i): Types) == pointer_Types(rawPath_faafd1d5_T_Types()) ? acc((ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])): Ref).val$_Slice_Ref, write) && acc((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])): Ref).val$_Int, write) && acc(AbsSlice_Bytes_88c2f8cc_F((ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])): Ref).val$_Slice_Ref, 0, (slen((ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])): Ref).val$_Slice_Ref): Int)), write) : acc(dynamic_pred_1_unknown(i), write))
}

predicate dynamic_pred_0_unknown(i: Tuple2[Ref, Types]) 

predicate dynamic_pred_0(i: Tuple2[Ref, Types]) {
  ((get1of2(i): Types) == pointer_Types(rawPath_faafd1d5_T_Types()) ? acc((ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])): Ref).val$_Slice_Ref, write) && acc((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])): Ref).val$_Int, write) : acc(dynamic_pred_0_unknown(i), write))
}

predicate dynamic_pred_3_unknown(i: Tuple2[Ref, Types]) 

predicate dynamic_pred_3(i: Tuple2[Ref, Types]) {
  ((get1of2(i): Types) == List_a58fd4a8_T_Types() ? (forall i_V1: Int :: { (ShArrayloc((sarray((unbox_Poly((get0of2(i): Ref)): Slice[Ref])): ShArray[Ref]), sadd((soffset((unbox_Poly((get0of2(i): Ref)): Slice[Ref])): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen((unbox_Poly((get0of2(i): Ref)): Slice[Ref])): Int) ==> acc((ShArrayloc((sarray((unbox_Poly((get0of2(i): Ref)): Slice[Ref])): ShArray[Ref]), sadd((soffset((unbox_Poly((get0of2(i): Ref)): Slice[Ref])): Int), i_V1)): Ref).val$_Tuple2_RefTypes, write)) && (forall i_V1: Int :: { (ShArrayloc((sarray((unbox_Poly((get0of2(i): Ref)): Slice[Ref])): ShArray[Ref]), sadd((soffset((unbox_Poly((get0of2(i): Ref)): Slice[Ref])): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen((unbox_Poly((get0of2(i): Ref)): Slice[Ref])): Int) ==> acc(dynamic_pred_3((ShArrayloc((sarray((unbox_Poly((get0of2(i): Ref)): Slice[Ref])): ShArray[Ref]), sadd((soffset((unbox_Poly((get0of2(i): Ref)): Slice[Ref])): Int), i_V1)): Ref).val$_Tuple2_RefTypes), write)) : ((get1of2(i): Types) == basicError_a58fd4a8_T_Types() ? acc(dynamic_pred_3((tuple2((box_Poly((get0of4((unbox_Poly((get0of2(i): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref])): Tuple2[Int, Tuple2[Ref, Types]])): Ref), errOrMsg_a58fd4a8_T_Types()): Tuple2[Ref, Types])), write) && (!((get1of4((unbox_Poly((get0of2(i): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref])): Ref) == null) ==> acc((get1of4((unbox_Poly((get0of2(i): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref])): Ref).underlyingMapField, write)) && (!assertArg2_Bool(comparableInterface((get2of4((unbox_Poly((get0of2(i): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref])): Tuple2[Ref, Types])) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), (get2of4((unbox_Poly((get0of2(i): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref])): Tuple2[Ref, Types]) == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> acc(dynamic_pred_3((get2of4((unbox_Poly((get0of2(i): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref])): Tuple2[Ref, Types])), write)) && (!((get3of4((unbox_Poly((get0of2(i): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref])): Ref) == null) ==> acc((get3of4((unbox_Poly((get0of2(i): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref])): Ref).val$_Slice_Ref, write) && (forall fn$$0: Int :: { (ShArrayloc((sarray((get3of4((unbox_Poly((get0of2(i): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref])): Ref).val$_Slice_Ref): ShArray[Ref]), sadd((soffset((get3of4((unbox_Poly((get0of2(i): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref])): Ref).val$_Slice_Ref): Int), fn$$0)): Ref) } 0 <= fn$$0 && fn$$0 < (slen((get3of4((unbox_Poly((get0of2(i): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref])): Ref).val$_Slice_Ref): Int) ==> acc((ShArrayloc((sarray((get3of4((unbox_Poly((get0of2(i): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref])): Ref).val$_Slice_Ref): ShArray[Ref]), sadd((soffset((get3of4((unbox_Poly((get0of2(i): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref])): Ref).val$_Slice_Ref): Int), fn$$0)): Ref).val$_Int, write))) : ((get1of2(i): Types) == errOrMsg_a58fd4a8_T_Types() ? !assertArg2_Bool(comparableInterface((get1of2((unbox_Poly((get0of2(i): Ref)): Tuple2[Int, Tuple2[Ref, Types]])): Tuple2[Ref, Types])) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), (get1of2((unbox_Poly((get0of2(i): Ref)): Tuple2[Int, Tuple2[Ref, Types]])): Tuple2[Ref, Types]) == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> acc(dynamic_pred_3((get1of2((unbox_Poly((get0of2(i): Ref)): Tuple2[Int, Tuple2[Ref, Types]])): Tuple2[Ref, Types])), write) : acc(dynamic_pred_3_unknown(i), write))))
}

predicate PathPackageMem_faafd1d5_F() {
  true && (true && (forall fn$$0: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$0 && fn$$0 < 256 ==> true) && (forall fn$$0: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$0 && fn$$0 < 256 ==> acc((ShStructget0of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): Ref).val$_Bool, write)) && (forall fn$$0: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$0 && fn$$0 < 256 ==> true) && (forall fn$$0: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$0 && fn$$0 < 256 ==> acc((ShStructget0of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int, write)) && (forall fn$$0: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$0 && fn$$0 < 256 ==> acc((ShStructget1of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int, write)) && (forall fn$$0: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$0 && fn$$0 < 256 ==> acc((ShStructget2of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Closure, write)) && acc(strictDecoding_faafd1d5_G().val$_Bool, write) && (forall t_V0: Int :: { (ShStructget0of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), t_V0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): Ref) } { closureImplements$NewPathSpec_faafd1d5_F$((ShStructget2of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), t_V0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Closure) } 0 <= t_V0 && t_V0 < constant_maxPathType_faafd1d5_G() && (ShStructget0of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), t_V0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): Ref).val$_Bool ==> closureImplements$NewPathSpec_faafd1d5_F$((ShStructget2of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), t_V0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Closure)))
}

predicate Mem_faafd1d5_PMHopField(h_V0: ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]) {
  true && (true && acc((ShStructget0of6(h_V0): Ref).val$_Bool, write) && acc((ShStructget1of6(h_V0): Ref).val$_Bool, write) && acc((ShStructget2of6(h_V0): Ref).val$_Int, write) && acc((ShStructget3of6(h_V0): Ref).val$_Int, write) && acc((ShStructget4of6(h_V0): Ref).val$_Int, write) && (true && (forall fn$$0: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0): Emb_6_Intbyte$$$_S_$$$)), fn$$0): Ref) } 0 <= fn$$0 && fn$$0 < 6 ==> acc((ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0): Emb_6_Intbyte$$$_S_$$$)), fn$$0): Ref).val$_Int, write))) && (ShStructget3of6(h_V0): Ref).val$_Int >= 0 && (ShStructget4of6(h_V0): Ref).val$_Int >= 0)
}

predicate AbsSliceC_Bytes_88c2f8cc_F(s_V0: Slice[Ref], start_V0: Int, end_V0: Int, contents_V0: Seq[Int]) {
  true && (0 <= start_V0 && start_V0 < end_V0 && end_V0 <= (scap(s_V0): Int) && |contents_V0| == end_V0 - start_V0 && ((forall i_V1: Int :: { (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref) } start_V0 <= i_V1 && i_V1 < end_V0 ==> acc((ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref).val$_Int, write)) && (forall i_V1: Int :: { (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref) } start_V0 <= i_V1 && i_V1 < end_V0 ==> (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref).val$_Int == contents_V0[i_V1 - start_V0])))
}

predicate AbsSlice_Bytes_88c2f8cc_F(s_V0: Slice[Ref], start_V0: Int, end_V0: Int) {
  true && (0 <= start_V0 && start_V0 <= end_V0 && end_V0 <= (scap(s_V0): Int) && (forall i_V1: Int :: { (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref) } start_V0 <= i_V1 && i_V1 < end_V0 ==> acc((ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref).val$_Int, write)))
}

predicate AbsSliceC_Any_88c2f8cc_F(s_V0: Slice[Ref], start_V0: Int, end_V0: Int, contents_V0: Seq[Tuple2[Ref, Types]]) {
  true && (0 <= start_V0 && start_V0 < end_V0 && end_V0 <= (scap(s_V0): Int) && |contents_V0| == end_V0 - start_V0 && ((forall i_V1: Int :: { (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref) } start_V0 <= i_V1 && i_V1 < end_V0 ==> acc((ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref).val$_Tuple2_RefTypes, write)) && (forall i_V1: Int :: { comparableInterface((ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref).val$_Tuple2_RefTypes) } start_V0 <= i_V1 && i_V1 < end_V0 ==> comparableInterface((ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref).val$_Tuple2_RefTypes)) && (forall i_V1: Int :: { comparableInterface((ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref).val$_Tuple2_RefTypes) } start_V0 <= i_V1 && i_V1 < end_V0 ==> assertArg2_Bool(comparableInterface((ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref).val$_Tuple2_RefTypes) || comparableInterface(contents_V0[i_V1 - start_V0]), (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref).val$_Tuple2_RefTypes == contents_V0[i_V1 - start_V0]))))
}

predicate AbsSlice_Any_88c2f8cc_F(s_V0: Slice[Ref], start_V0: Int, end_V0: Int) {
  true && (0 <= start_V0 && start_V0 <= end_V0 && end_V0 <= (scap(s_V0): Int) && (forall i_V1: Int :: { (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref) } start_V0 <= i_V1 && i_V1 < end_V0 ==> acc((ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref).val$_Tuple2_RefTypes, write)))
}

predicate Mem_3773bb97_SY$f5ff51c5_3773bb97_(thisItf: Tuple2[Ref, Types]) 

predicate Mem_3773bb97_SY$df734670_3773bb97_(thisItf: Tuple2[Ref, Types]) 

predicate Mem_3773bb97_SY$a233e55e_3773bb97_(thisItf: Tuple2[Ref, Types]) 

predicate Mem_6f559e0_SY$353949c1_6f559e0_(thisItf: Tuple2[Ref, Types]) 

predicate Mem_1402f601_SY$8f734176_1402f601_(thisItf: Tuple2[Ref, Types]) 

// decreases 
method DecodeFromBytes_faafd1d5_PMHopField$L$10$1(raw_V0_CN1$in: Slice[Ref], h_V0_CN0$in: ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$])
  requires true && acc((ShStructget0of6(h_V0_CN0$in): Ref).val$_Bool, write) && acc((ShStructget1of6(h_V0_CN0$in): Ref).val$_Bool, write) && acc((ShStructget2of6(h_V0_CN0$in): Ref).val$_Int, write) && acc((ShStructget3of6(h_V0_CN0$in): Ref).val$_Int, write) && acc((ShStructget4of6(h_V0_CN0$in): Ref).val$_Int, write) && (true && (forall fn$$10: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0$in): Emb_6_Intbyte$$$_S_$$$)), fn$$10): Ref) } 0 <= fn$$10 && fn$$10 < 6 ==> acc((ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0$in): Emb_6_Intbyte$$$_S_$$$)), fn$$10): Ref).val$_Int, write)))
  requires acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1$in, 0, constant_HopLen_faafd1d5_G()), constant_ReadL1_b40dce56_G())
  ensures true && acc((ShStructget0of6(h_V0_CN0$in): Ref).val$_Bool, write) && acc((ShStructget1of6(h_V0_CN0$in): Ref).val$_Bool, write) && acc((ShStructget2of6(h_V0_CN0$in): Ref).val$_Int, write) && acc((ShStructget3of6(h_V0_CN0$in): Ref).val$_Int, write) && acc((ShStructget4of6(h_V0_CN0$in): Ref).val$_Int, write) && (true && (forall fn$$11: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0$in): Emb_6_Intbyte$$$_S_$$$)), fn$$11): Ref) } 0 <= fn$$11 && fn$$11 < 6 ==> acc((ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0$in): Emb_6_Intbyte$$$_S_$$$)), fn$$11): Ref).val$_Int, write)))
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1$in, 0, constant_HopLen_faafd1d5_G()), constant_ReadL1_b40dce56_G())
  ensures (ShStructget3of6(h_V0_CN0$in): Ref).val$_Int >= 0
  ensures (ShStructget4of6(h_V0_CN0$in): Ref).val$_Int >= 0
{
  var raw_V0_CN1: Slice[Ref]
  var h_V0_CN0: ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]
  raw_V0_CN1 := raw_V0_CN1$in
  h_V0_CN0 := h_V0_CN0$in
  
  // unfold acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1, 0, HopLen_faafd1d5_G), ReadL1_b40dce56_G)
  unfold acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1, 0, constant_HopLen_faafd1d5_G()), constant_ReadL1_b40dce56_G())
  
  // *h_V0_CN0.EgressRouterAlertA = raw_V0_CN1[0] & 0x1 == 0x1
  (ShStructget1of6(h_V0_CN0): Ref).val$_Bool := intBitwiseAnd((ShArrayloc((sarray(raw_V0_CN1): ShArray[Ref]), sadd((soffset(raw_V0_CN1): Int), 0)): Ref).val$_Int, 1) == 1
  
  // *h_V0_CN0.IngressRouterAlertA = raw_V0_CN1[0] & 0x2 == 0x2
  (ShStructget0of6(h_V0_CN0): Ref).val$_Bool := intBitwiseAnd((ShArrayloc((sarray(raw_V0_CN1): ShArray[Ref]), sadd((soffset(raw_V0_CN1): Int), 0)): Ref).val$_Int, 2) == 2
  
  // *h_V0_CN0.ExpTimeA = raw_V0_CN1[1]
  (ShStructget2of6(h_V0_CN0): Ref).val$_Int := (ShArrayloc((sarray(raw_V0_CN1): ShArray[Ref]), sadd((soffset(raw_V0_CN1): Int), 1)): Ref).val$_Int
  
  // assert &raw_V0_CN1[2:4][0] == &raw_V0_CN1[2] && &raw_V0_CN1[2:4][1] == &raw_V0_CN1[3]
  assert (ShArrayloc((sarray(ssliceFromSlice_Ref(raw_V0_CN1, 2, 4)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(raw_V0_CN1, 2, 4)): Int), 0)): Ref) == (ShArrayloc((sarray(raw_V0_CN1): ShArray[Ref]), sadd((soffset(raw_V0_CN1): Int), 2)): Ref) && (ShArrayloc((sarray(ssliceFromSlice_Ref(raw_V0_CN1, 2, 4)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(raw_V0_CN1, 2, 4)): Int), 1)): Ref) == (ShArrayloc((sarray(raw_V0_CN1): ShArray[Ref]), sadd((soffset(raw_V0_CN1): Int), 3)): Ref)
  
  // *h_V0_CN0.ConsIngressA = BigEndian_bf01f2a6_G.Uint16(raw_V0_CN1[2:4])
  (ShStructget3of6(h_V0_CN0): Ref).val$_Int := Uint16_bf01f2a6_MbigEndian(constant_BigEndian_bf01f2a6_G(), ssliceFromSlice_Ref(raw_V0_CN1, 2, 4))
  
  // assert &raw_V0_CN1[4:6][0] == &raw_V0_CN1[4] && &raw_V0_CN1[4:6][1] == &raw_V0_CN1[5]
  assert (ShArrayloc((sarray(ssliceFromSlice_Ref(raw_V0_CN1, 4, 6)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(raw_V0_CN1, 4, 6)): Int), 0)): Ref) == (ShArrayloc((sarray(raw_V0_CN1): ShArray[Ref]), sadd((soffset(raw_V0_CN1): Int), 4)): Ref) && (ShArrayloc((sarray(ssliceFromSlice_Ref(raw_V0_CN1, 4, 6)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(raw_V0_CN1, 4, 6)): Int), 1)): Ref) == (ShArrayloc((sarray(raw_V0_CN1): ShArray[Ref]), sadd((soffset(raw_V0_CN1): Int), 5)): Ref)
  
  // *h_V0_CN0.ConsEgressA = BigEndian_bf01f2a6_G.Uint16(raw_V0_CN1[4:6])
  (ShStructget4of6(h_V0_CN0): Ref).val$_Int := Uint16_bf01f2a6_MbigEndian(constant_BigEndian_bf01f2a6_G(), ssliceFromSlice_Ref(raw_V0_CN1, 4, 6))
  
  // fold acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1, 0, HopLen_faafd1d5_G), ReadL1_b40dce56_G)
  fold acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1, 0, constant_HopLen_faafd1d5_G()), constant_ReadL1_b40dce56_G())
}

// decreases 
method DecodeFromBytes_faafd1d5_PMHopField$L$26$1(raw_V0_CN1$in: Slice[Ref], h_V0_CN0$in: ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], N6$in: Int) returns (N6$out: Int)
  requires true && (forall fn$$12: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0$in): Emb_6_Intbyte$$$_S_$$$)), fn$$12): Ref) } 0 <= fn$$12 && fn$$12 < 6 ==> acc((ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0$in): Emb_6_Intbyte$$$_S_$$$)), fn$$12): Ref).val$_Int, write))
  requires acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1$in, 0, constant_HopLen_faafd1d5_G()), constant_ReadL1_b40dce56_G())
  ensures true && (forall fn$$13: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0$in): Emb_6_Intbyte$$$_S_$$$)), fn$$13): Ref) } 0 <= fn$$13 && fn$$13 < 6 ==> acc((ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0$in): Emb_6_Intbyte$$$_S_$$$)), fn$$13): Ref).val$_Int, write))
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1$in, 0, constant_HopLen_faafd1d5_G()), constant_ReadL1_b40dce56_G())
{
  var raw_V0_CN1: Slice[Ref]
  var h_V0_CN0: ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]
  var N6: Int
  raw_V0_CN1 := raw_V0_CN1$in
  h_V0_CN0 := h_V0_CN0$in
  N6 := N6$in
  
  // unfold acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1, 0, HopLen_faafd1d5_G), ReadL1_b40dce56_G)
  unfold acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1, 0, constant_HopLen_faafd1d5_G()), constant_ReadL1_b40dce56_G())
  
  // assert forall i_V1: int :: { &*h_V0_CN0.MacA[0:len(*h_V0_CN0.MacA)][i_V1] } 0 <= i_V1 && i_V1 < len(*h_V0_CN0.MacA[0:len(*h_V0_CN0.MacA)]) ==> &*h_V0_CN0.MacA[i_V1] == &*h_V0_CN0.MacA[0:len(*h_V0_CN0.MacA)][i_V1]
  assert (forall i_V1: Int :: { (ShArrayloc((sarray(ssliceFromArray_Ref(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$)), 0, (ShArraylen(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$))): Int))): ShArray[Ref]), sadd((soffset(ssliceFromArray_Ref(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$)), 0, (ShArraylen(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$))): Int))): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(ssliceFromArray_Ref(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$)), 0, (ShArraylen(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$))): Int))): Int) ==> (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$)), i_V1): Ref) == (ShArrayloc((sarray(ssliceFromArray_Ref(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$)), 0, (ShArraylen(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$))): Int))): ShArray[Ref]), sadd((soffset(ssliceFromArray_Ref(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$)), 0, (ShArraylen(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$))): Int))): Int), i_V1)): Ref))
  
  // assert forall i_V2: int :: { &raw_V0_CN1[6:6 + MacLen_faafd1d5_G][i_V2] } 0 <= i_V2 && i_V2 < len(raw_V0_CN1[6:6 + MacLen_faafd1d5_G]) ==> &raw_V0_CN1[6:6 + MacLen_faafd1d5_G][i_V2] == &raw_V0_CN1[i_V2 + 6]
  assert (forall i_V2: Int ::  0 <= i_V2 && i_V2 < (slen(ssliceFromSlice_Ref(raw_V0_CN1, 6, 6 + constant_MacLen_faafd1d5_G())): Int) ==> (ShArrayloc((sarray(ssliceFromSlice_Ref(raw_V0_CN1, 6, 6 + constant_MacLen_faafd1d5_G())): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(raw_V0_CN1, 6, 6 + constant_MacLen_faafd1d5_G())): Int), i_V2)): Ref) == (ShArrayloc((sarray(raw_V0_CN1): ShArray[Ref]), sadd((soffset(raw_V0_CN1): Int), i_V2 + 6)): Ref))
  
  // N6 = copy_BFSliceIntbyte$$$_S_$$$$$$$_E_$$$_SliceIntbyte$$$_S_$$$$$$$_E_$$$_Permission$$$$_E_$$$(*h_V0_CN0.MacA[0:len(*h_V0_CN0.MacA)], raw_V0_CN1[6:6 + MacLen_faafd1d5_G], ReadL2_b40dce56_G)
  assert !true || true
  N6 := copy_BFSliceIntbyte$$$_S_$$$$$$$_E_$$$_SliceIntbyte$$$_S_$$$$$$$_E_$$$_Permission$$$$_E_$$$(ssliceFromArray_Ref(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$)), 0, (ShArraylen(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$))): Int)), ssliceFromSlice_Ref(raw_V0_CN1, 6, 6 + constant_MacLen_faafd1d5_G()), constant_ReadL2_b40dce56_G())
  
  // fold acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1, 0, HopLen_faafd1d5_G), ReadL1_b40dce56_G)
  fold acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1, 0, constant_HopLen_faafd1d5_G()), constant_ReadL1_b40dce56_G())
  N6$out := N6
}

// decreases 
method SerializeTo_faafd1d5_PMHopField$L$9$1(b_V0_CN1$in: Slice[Ref], h_V0_CN0$in: ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$])
  requires (slen(b_V0_CN1$in): Int) >= constant_HopLen_faafd1d5_G()
  requires acc(Mem_faafd1d5_PMHopField(h_V0_CN0$in), constant_ReadL1_b40dce56_G())
  requires acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1$in, 0, constant_HopLen_faafd1d5_G()), write)
  ensures acc(Mem_faafd1d5_PMHopField(h_V0_CN0$in), constant_ReadL1_b40dce56_G())
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1$in, 0, constant_HopLen_faafd1d5_G()), write)
{
  var b_V0_CN1: Slice[Ref]
  var h_V0_CN0: ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]
  b_V0_CN1 := b_V0_CN1$in
  h_V0_CN0 := h_V0_CN0$in
  
  // unfold acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, HopLen_faafd1d5_G))
  unfold acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, constant_HopLen_faafd1d5_G()), write)
  
  // unfold acc(h_V0_CN0.Mem(), ReadL1_b40dce56_G)
  unfold acc(Mem_faafd1d5_PMHopField(h_V0_CN0), constant_ReadL1_b40dce56_G())
  
  // b_V0_CN1[0] = 0
  (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 0)): Ref).val$_Int := 0
  
  // if(*h_V0_CN0.EgressRouterAlertA) {...} else {...}
  if ((ShStructget1of6(h_V0_CN0): Ref).val$_Bool) {
    
    // decl 
    
    // b_V0_CN1[0] = b_V0_CN1[0] | 0x1
    (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 0)): Ref).val$_Int := intBitwiseOr((ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 0)): Ref).val$_Int, 1)
  }
  
  // if(*h_V0_CN0.IngressRouterAlertA) {...} else {...}
  if ((ShStructget0of6(h_V0_CN0): Ref).val$_Bool) {
    
    // decl 
    
    // b_V0_CN1[0] = b_V0_CN1[0] | 0x2
    (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 0)): Ref).val$_Int := intBitwiseOr((ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 0)): Ref).val$_Int, 2)
  }
  
  // b_V0_CN1[1] = *h_V0_CN0.ExpTimeA
  (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 1)): Ref).val$_Int := (ShStructget2of6(h_V0_CN0): Ref).val$_Int
  
  // assert &b_V0_CN1[2:4][0] == &b_V0_CN1[2] && &b_V0_CN1[2:4][1] == &b_V0_CN1[3]
  assert (ShArrayloc((sarray(ssliceFromSlice_Ref(b_V0_CN1, 2, 4)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(b_V0_CN1, 2, 4)): Int), 0)): Ref) == (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 2)): Ref) && (ShArrayloc((sarray(ssliceFromSlice_Ref(b_V0_CN1, 2, 4)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(b_V0_CN1, 2, 4)): Int), 1)): Ref) == (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 3)): Ref)
  
  // BigEndian_bf01f2a6_GPutUint16(b_V0_CN1[2:4], *h_V0_CN0.ConsIngressA)
  assert !true || true
  PutUint16_bf01f2a6_MbigEndian(constant_BigEndian_bf01f2a6_G(), ssliceFromSlice_Ref(b_V0_CN1, 2, 4), (ShStructget3of6(h_V0_CN0): Ref).val$_Int)
  
  // assert &b_V0_CN1[4:6][0] == &b_V0_CN1[4] && &b_V0_CN1[4:6][1] == &b_V0_CN1[5]
  assert (ShArrayloc((sarray(ssliceFromSlice_Ref(b_V0_CN1, 4, 6)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(b_V0_CN1, 4, 6)): Int), 0)): Ref) == (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 4)): Ref) && (ShArrayloc((sarray(ssliceFromSlice_Ref(b_V0_CN1, 4, 6)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(b_V0_CN1, 4, 6)): Int), 1)): Ref) == (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 5)): Ref)
  
  // BigEndian_bf01f2a6_GPutUint16(b_V0_CN1[4:6], *h_V0_CN0.ConsEgressA)
  assert !true || true
  PutUint16_bf01f2a6_MbigEndian(constant_BigEndian_bf01f2a6_G(), ssliceFromSlice_Ref(b_V0_CN1, 4, 6), (ShStructget4of6(h_V0_CN0): Ref).val$_Int)
  
  // assert forall i_V1: int :: { &b_V0_CN1[i_V1] } 0 <= i_V1 && i_V1 < HopLen_faafd1d5_G ==> acc(b_V0_CN1[i_V1])
  assert (forall i_V1: Int :: { (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < constant_HopLen_faafd1d5_G() ==> acc((ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), i_V1)): Ref).val$_Int, write))
  
  // fold acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, HopLen_faafd1d5_G))
  fold acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, constant_HopLen_faafd1d5_G()), write)
  
  // fold acc(h_V0_CN0.Mem(), ReadL1_b40dce56_G)
  fold acc(Mem_faafd1d5_PMHopField(h_V0_CN0), constant_ReadL1_b40dce56_G())
}

// decreases 
method SerializeTo_faafd1d5_PMHopField$L$32$1(b_V0_CN1$in: Slice[Ref], h_V0_CN0$in: ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], N4$in: Int) returns (N4$out: Int)
  requires (slen(b_V0_CN1$in): Int) >= constant_HopLen_faafd1d5_G()
  requires acc(Mem_faafd1d5_PMHopField(h_V0_CN0$in), constant_ReadL1_b40dce56_G())
  requires acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1$in, 0, constant_HopLen_faafd1d5_G()), write)
  ensures acc(Mem_faafd1d5_PMHopField(h_V0_CN0$in), constant_ReadL1_b40dce56_G())
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1$in, 0, constant_HopLen_faafd1d5_G()), write)
{
  var b_V0_CN1: Slice[Ref]
  var h_V0_CN0: ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]
  var N4: Int
  b_V0_CN1 := b_V0_CN1$in
  h_V0_CN0 := h_V0_CN0$in
  N4 := N4$in
  
  // unfold acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, HopLen_faafd1d5_G))
  unfold acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, constant_HopLen_faafd1d5_G()), write)
  
  // unfold acc(h_V0_CN0.Mem(), ReadL1_b40dce56_G)
  unfold acc(Mem_faafd1d5_PMHopField(h_V0_CN0), constant_ReadL1_b40dce56_G())
  
  // assert forall i_V2: int :: { &*h_V0_CN0.MacA[0:len(*h_V0_CN0.MacA)][i_V2] } 0 <= i_V2 && i_V2 < len(*h_V0_CN0.MacA) ==> &*h_V0_CN0.MacA[i_V2] == &*h_V0_CN0.MacA[0:len(*h_V0_CN0.MacA)][i_V2]
  assert (forall i_V2: Int :: { (ShArrayloc((sarray(ssliceFromArray_Ref(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$)), 0, (ShArraylen(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$))): Int))): ShArray[Ref]), sadd((soffset(ssliceFromArray_Ref(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$)), 0, (ShArraylen(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$))): Int))): Int), i_V2)): Ref) } 0 <= i_V2 && i_V2 < (ShArraylen(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$))): Int) ==> (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$)), i_V2): Ref) == (ShArrayloc((sarray(ssliceFromArray_Ref(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$)), 0, (ShArraylen(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$))): Int))): ShArray[Ref]), sadd((soffset(ssliceFromArray_Ref(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$)), 0, (ShArraylen(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$))): Int))): Int), i_V2)): Ref))
  
  // assert forall i_V3: int :: {  } 0 <= i_V3 && i_V3 < MacLen_faafd1d5_G ==> &b_V0_CN1[6:6 + MacLen_faafd1d5_G][i_V3] == &b_V0_CN1[i_V3 + 6]
  assert (forall i_V3: Int, fresh__4: Int :: { sadd((soffset(ssliceFromSlice_Ref(b_V0_CN1, 6, fresh__4)): Int), i_V3) } 0 <= i_V3 && i_V3 < constant_MacLen_faafd1d5_G() ==> (ShArrayloc((sarray(ssliceFromSlice_Ref(b_V0_CN1, 6, 6 + constant_MacLen_faafd1d5_G())): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(b_V0_CN1, 6, 6 + constant_MacLen_faafd1d5_G())): Int), i_V3)): Ref) == (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), i_V3 + 6)): Ref))
  
  // N4 = copy_BFSliceIntbyte$$$_S_$$$$$$$_E_$$$_SliceIntbyte$$$_S_$$$$$$$_E_$$$_Permission$$$$_E_$$$(b_V0_CN1[6:6 + MacLen_faafd1d5_G], *h_V0_CN0.MacA[0:len(*h_V0_CN0.MacA)], ReadL1_b40dce56_G)
  assert !true || true
  N4 := copy_BFSliceIntbyte$$$_S_$$$$$$$_E_$$$_SliceIntbyte$$$_S_$$$$$$$_E_$$$_Permission$$$$_E_$$$(ssliceFromSlice_Ref(b_V0_CN1, 6, 6 + constant_MacLen_faafd1d5_G()), ssliceFromArray_Ref(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$)), 0, (ShArraylen(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0_CN0): Emb_6_Intbyte$$$_S_$$$))): Int)), constant_ReadL1_b40dce56_G())
  
  // fold acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, HopLen_faafd1d5_G))
  fold acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, constant_HopLen_faafd1d5_G()), write)
  
  // fold acc(h_V0_CN0.Mem(), ReadL1_b40dce56_G)
  fold acc(Mem_faafd1d5_PMHopField(h_V0_CN0), constant_ReadL1_b40dce56_G())
  N4$out := N4
}

// decreases _
method copy_BFSliceIntbyte$$$_S_$$$$$$$_E_$$$_SliceIntbyte$$$_S_$$$$$$$_E_$$$_Permission$$$$_E_$$$(dst: Slice[Ref], src: Slice[Ref], p: Perm) returns (res: Int)
  requires none < p
  requires (forall i1: Int :: { (ShArrayloc((sarray(dst): ShArray[Ref]), sadd((soffset(dst): Int), i1)): Ref).val$_Int } i1 >= 0 && i1 < (slen(dst): Int) ==> acc((ShArrayloc((sarray(dst): ShArray[Ref]), sadd((soffset(dst): Int), i1)): Ref).val$_Int, write))
  requires (forall i2: Int :: { (ShArrayloc((sarray(src): ShArray[Ref]), sadd((soffset(src): Int), i2)): Ref).val$_Int } i2 >= 0 && i2 < (slen(src): Int) ==> acc((ShArrayloc((sarray(src): ShArray[Ref]), sadd((soffset(src): Int), i2)): Ref).val$_Int, p))
  ensures (slen(dst): Int) <= (slen(src): Int) ==> (slen(dst): Int) == res
  ensures (slen(src): Int) < (slen(dst): Int) ==> (slen(src): Int) == res
  ensures (forall i1: Int :: { (ShArrayloc((sarray(dst): ShArray[Ref]), sadd((soffset(dst): Int), i1)): Ref).val$_Int } i1 >= 0 && i1 < (slen(dst): Int) ==> acc((ShArrayloc((sarray(dst): ShArray[Ref]), sadd((soffset(dst): Int), i1)): Ref).val$_Int, write))
  ensures (forall i2: Int :: { (ShArrayloc((sarray(src): ShArray[Ref]), sadd((soffset(src): Int), i2)): Ref).val$_Int } i2 >= 0 && i2 < (slen(src): Int) ==> acc((ShArrayloc((sarray(src): ShArray[Ref]), sadd((soffset(src): Int), i2)): Ref).val$_Int, p))
  ensures (forall i3: Int :: { (ShArrayloc((sarray(dst): ShArray[Ref]), sadd((soffset(dst): Int), i3)): Ref).val$_Int } i3 >= 0 && i3 < (slen(src): Int) && (i3 >= 0 && i3 < (slen(dst): Int)) ==> (ShArrayloc((sarray(dst): ShArray[Ref]), sadd((soffset(dst): Int), i3)): Ref).val$_Int == old((ShArrayloc((sarray(src): ShArray[Ref]), sadd((soffset(src): Int), i3)): Ref).val$_Int))
  ensures (forall i4: Int :: { (ShArrayloc((sarray(dst): ShArray[Ref]), sadd((soffset(dst): Int), i4)): Ref).val$_Int } i4 >= (slen(src): Int) && i4 < (slen(dst): Int) ==> (ShArrayloc((sarray(dst): ShArray[Ref]), sadd((soffset(dst): Int), i4)): Ref).val$_Int == old((ShArrayloc((sarray(dst): ShArray[Ref]), sadd((soffset(dst): Int), i4)): Ref).val$_Int))


// decreases 
method closureCall$NewPathSpec_faafd1d5_F$(closure: Closure) returns (p_V0: Tuple2[Ref, Types])
  requires closureImplements$NewPathSpec_faafd1d5_F$(closure)
  ensures acc(dynamic_pred_0(p_V0), write)


// decreases 
method DecodeFromBytes_faafd1d5_PMHopField(h_V0: ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], raw_V0: Slice[Ref]) returns (err_V0: Tuple2[Ref, Types])
  requires true && acc((ShStructget0of6(h_V0): Ref).val$_Bool, write) && acc((ShStructget1of6(h_V0): Ref).val$_Bool, write) && acc((ShStructget2of6(h_V0): Ref).val$_Int, write) && acc((ShStructget3of6(h_V0): Ref).val$_Int, write) && acc((ShStructget4of6(h_V0): Ref).val$_Int, write) && (true && (forall fn$$0: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0): Emb_6_Intbyte$$$_S_$$$)), fn$$0): Ref) } 0 <= fn$$0 && fn$$0 < 6 ==> acc((ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(h_V0): Emb_6_Intbyte$$$_S_$$$)), fn$$0): Ref).val$_Int, write)))
  requires (slen(raw_V0): Int) >= constant_HopLen_faafd1d5_G()
  requires acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0, 0, constant_HopLen_faafd1d5_G()), constant_ReadL1_b40dce56_G())
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0, 0, constant_HopLen_faafd1d5_G()), constant_ReadL1_b40dce56_G())
  ensures acc(Mem_faafd1d5_PMHopField(h_V0), write)
  ensures assertArg2_Bool(comparableInterface(err_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
{
  inhale err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // decl h_V0_CN0: *HopField_faafd1d5_T°, raw_V0_CN1: []byte°, err_V0_CN2: error_a4af0e5e_T°
  var err_V0_CN2: Tuple2[Ref, Types]
  var raw_V0_CN1: Slice[Ref]
  var h_V0_CN0: ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]
  
  
  
  // init h_V0_CN0
  inhale h_V0_CN0 == shStructDefault_$IngressRouterAlertA_Bool$$$_S_$$$_EgressRouterAlertA_Bool$$$_S_$$$_ExpTimeA_Intuint8$$$_S_$$$_ConsIngressA_Intuint16$$$_S_$$$_ConsEgressA_Intuint16$$$_S_$$$_MacA_Array6Intbyte$$$_S_$$$$$$_S_$$$$()
  
  // init raw_V0_CN1
  inhale raw_V0_CN1 == sliceDefault_Intbyte$$$_S_$$$()
  
  // init err_V0_CN2
  inhale err_V0_CN2 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // h_V0_CN0 = h_V0
  h_V0_CN0 := h_V0
  
  // raw_V0_CN1 = raw_V0
  raw_V0_CN1 := raw_V0
  
  // decl N6: int°
  var N6: Int
  
  // if(len(raw_V0_CN1) < HopLen_faafd1d5_G) {...} else {...}
  if ((slen(raw_V0_CN1): Int) < constant_HopLen_faafd1d5_G()) {
    
    // decl N3: error_a4af0e5e_T°
    var N3: Tuple2[Ref, Types]
    
    // N3 = New_a58fd4a8_F("HopField raw too short", []interface(name is empty_interface) { 0:toInterface("expected"), 1:toInterface(HopLen_faafd1d5_G), 2:toInterface("actual"), 3:toInterface(len(raw_V0_CN1)) })
    var fn$$3: Emb_4_Interfaceempty_interface$$$_S_$$$
    var fn$$4: Emb_4_Interfaceempty_interface$$$$_E_$$$
    var fn$$1: Emb_4_Interfaceempty_interface$$$_S_$$$
    fn$$3 := fn$$1
    fn$$4 := arrayDefault_4_Interfaceempty_interface$$$$_E_$$$()
    inhale true && (forall fn$$2: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), fn$$2): Ref) } 0 <= fn$$2 && fn$$2 < 4 ==> acc((ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), fn$$2): Ref).val$_Tuple2_RefTypes, write)) && ((forall fn$$5: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$3), fn$$5): Ref) } { unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$4)[fn$$5] } 0 <= fn$$5 && fn$$5 < 4 ==> (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$3), fn$$5): Ref).val$_Tuple2_RefTypes == unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$4)[fn$$5]) && !(fn$$1 == box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(arrayNil_4_Interfaceempty_interface$$$_S_$$$())))
    var fn$$7: Emb_4_Interfaceempty_interface$$$_S_$$$
    var fn$$8: Emb_4_Interfaceempty_interface$$$$_E_$$$
    fn$$7 := fn$$1
    fn$$8 := box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(Seq((tuple2((box_Poly(stringLit6578706563746564()): Ref), string_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly(constant_HopLen_faafd1d5_G()): Ref), integer_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly(stringLit61637475616c()): Ref), string_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly((slen(raw_V0_CN1): Int)): Ref), integer_Types()): Tuple2[Ref, Types])))
    exhale true && (forall fn$$6: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), fn$$6): Ref) } 0 <= fn$$6 && fn$$6 < 4 ==> acc((ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), fn$$6): Ref).val$_Tuple2_RefTypes, write))
    inhale true && (forall fn$$6: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), fn$$6): Ref) } 0 <= fn$$6 && fn$$6 < 4 ==> acc((ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), fn$$6): Ref).val$_Tuple2_RefTypes, write)) && (forall fn$$9: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$7), fn$$9): Ref) } { unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$8)[fn$$9] } 0 <= fn$$9 && fn$$9 < 4 ==> (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$7), fn$$9): Ref).val$_Tuple2_RefTypes == unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$8)[fn$$9])
    assert !true || true
    N3 := New_a58fd4a8_F(stringLit486f704669656c642072617720746f6f2073686f7274(), ssliceFromArray_Ref(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), 0, 4))
    
    // err_V0_CN2 = N3
    err_V0_CN2 := N3
    
    // return
    goto returnLabel
  }
  
  // 
//   requires acc(*h_V0_CN0)
//   requires acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1, 0, HopLen_faafd1d5_G), ReadL1_b40dce56_G)
//   ensures acc(*h_V0_CN0)
//   ensures acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1, 0, HopLen_faafd1d5_G), ReadL1_b40dce56_G)
//   ensures *h_V0_CN0.ConsIngressA >= 0
//   ensures *h_V0_CN0.ConsEgressA >= 0
//   decreases  
//   outline
  assert !true || true
  DecodeFromBytes_faafd1d5_PMHopField$L$10$1(raw_V0_CN1, h_V0_CN0)
  
  // 
//   requires acc(*h_V0_CN0.MacA)
//   requires acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1, 0, HopLen_faafd1d5_G), ReadL1_b40dce56_G)
//   ensures acc(*h_V0_CN0.MacA)
//   ensures acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1, 0, HopLen_faafd1d5_G), ReadL1_b40dce56_G)
//   decreases  
//   outline
  assert !true || true
  N6 := DecodeFromBytes_faafd1d5_PMHopField$L$26$1(raw_V0_CN1, h_V0_CN0, N6)
  
  // fold acc(h_V0_CN0.Mem())
  fold acc(Mem_faafd1d5_PMHopField(h_V0_CN0), write)
  
  // err_V0_CN2 = (nil:error_a4af0e5e_T)
  err_V0_CN2 := (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // return
  goto returnLabel
  label returnLabel
  
  // err_V0 = err_V0_CN2
  err_V0 := err_V0_CN2
}

// decreases 
method SerializeTo_faafd1d5_PMHopField(h_V0: ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$], b_V0: Slice[Ref]) returns (err_V0: Tuple2[Ref, Types])
  requires (slen(b_V0): Int) >= constant_HopLen_faafd1d5_G()
  requires acc(Mem_faafd1d5_PMHopField(h_V0), constant_ReadL1_b40dce56_G())
  requires acc(AbsSlice_Bytes_88c2f8cc_F(b_V0, 0, constant_HopLen_faafd1d5_G()), write)
  ensures acc(Mem_faafd1d5_PMHopField(h_V0), constant_ReadL1_b40dce56_G())
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(b_V0, 0, constant_HopLen_faafd1d5_G()), write)
  ensures assertArg2_Bool(comparableInterface(err_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
{
  inhale err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // decl h_V0_CN0: *HopField_faafd1d5_T°, b_V0_CN1: []byte°, err_V0_CN2: error_a4af0e5e_T°
  var err_V0_CN2: Tuple2[Ref, Types]
  var b_V0_CN1: Slice[Ref]
  var h_V0_CN0: ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]
  
  
  
  // init h_V0_CN0
  inhale h_V0_CN0 == shStructDefault_$IngressRouterAlertA_Bool$$$_S_$$$_EgressRouterAlertA_Bool$$$_S_$$$_ExpTimeA_Intuint8$$$_S_$$$_ConsIngressA_Intuint16$$$_S_$$$_ConsEgressA_Intuint16$$$_S_$$$_MacA_Array6Intbyte$$$_S_$$$$$$_S_$$$$()
  
  // init b_V0_CN1
  inhale b_V0_CN1 == sliceDefault_Intbyte$$$_S_$$$()
  
  // init err_V0_CN2
  inhale err_V0_CN2 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // h_V0_CN0 = h_V0
  h_V0_CN0 := h_V0
  
  // b_V0_CN1 = b_V0
  b_V0_CN1 := b_V0
  
  // decl N4: int°
  var N4: Int
  
  // if(len(b_V0_CN1) < HopLen_faafd1d5_G) {...} else {...}
  if ((slen(b_V0_CN1): Int) < constant_HopLen_faafd1d5_G()) {
    
    // decl N3: error_a4af0e5e_T°
    var N3: Tuple2[Ref, Types]
    
    // N3 = New_a58fd4a8_F("buffer for HopField too short", []interface(name is empty_interface) { 0:toInterface("expected"), 1:toInterface(MacLen_faafd1d5_G), 2:toInterface("actual"), 3:toInterface(len(b_V0_CN1)) })
    var fn$$2: Emb_4_Interfaceempty_interface$$$_S_$$$
    var fn$$3: Emb_4_Interfaceempty_interface$$$$_E_$$$
    var fn$$0: Emb_4_Interfaceempty_interface$$$_S_$$$
    fn$$2 := fn$$0
    fn$$3 := arrayDefault_4_Interfaceempty_interface$$$$_E_$$$()
    inhale true && (forall fn$$1: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$1): Ref) } 0 <= fn$$1 && fn$$1 < 4 ==> acc((ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$1): Ref).val$_Tuple2_RefTypes, write)) && ((forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$2), fn$$4): Ref) } { unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$3)[fn$$4] } 0 <= fn$$4 && fn$$4 < 4 ==> (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$2), fn$$4): Ref).val$_Tuple2_RefTypes == unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$3)[fn$$4]) && !(fn$$0 == box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(arrayNil_4_Interfaceempty_interface$$$_S_$$$())))
    var fn$$6: Emb_4_Interfaceempty_interface$$$_S_$$$
    var fn$$7: Emb_4_Interfaceempty_interface$$$$_E_$$$
    fn$$6 := fn$$0
    fn$$7 := box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(Seq((tuple2((box_Poly(stringLit6578706563746564()): Ref), string_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly(constant_MacLen_faafd1d5_G()): Ref), integer_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly(stringLit61637475616c()): Ref), string_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly((slen(b_V0_CN1): Int)): Ref), integer_Types()): Tuple2[Ref, Types])))
    exhale true && (forall fn$$5: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$5): Ref) } 0 <= fn$$5 && fn$$5 < 4 ==> acc((ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$5): Ref).val$_Tuple2_RefTypes, write))
    inhale true && (forall fn$$5: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$5): Ref) } 0 <= fn$$5 && fn$$5 < 4 ==> acc((ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$5): Ref).val$_Tuple2_RefTypes, write)) && (forall fn$$8: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$6), fn$$8): Ref) } { unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$7)[fn$$8] } 0 <= fn$$8 && fn$$8 < 4 ==> (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$6), fn$$8): Ref).val$_Tuple2_RefTypes == unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$7)[fn$$8])
    assert !true || true
    N3 := New_a58fd4a8_F(stringLit62756666657220666f7220486f704669656c6420746f6f2073686f7274(), ssliceFromArray_Ref(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), 0, 4))
    
    // err_V0_CN2 = N3
    err_V0_CN2 := N3
    
    // return
    goto returnLabel
  }
  
  // 
//   requires len(b_V0_CN1) >= HopLen_faafd1d5_G
//   requires acc(h_V0_CN0.Mem(), ReadL1_b40dce56_G)
//   requires acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, HopLen_faafd1d5_G))
//   ensures acc(h_V0_CN0.Mem(), ReadL1_b40dce56_G)
//   ensures acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, HopLen_faafd1d5_G))
//   decreases  
//   outline
  assert !true || true
  SerializeTo_faafd1d5_PMHopField$L$9$1(b_V0_CN1, h_V0_CN0)
  
  // 
//   requires len(b_V0_CN1) >= HopLen_faafd1d5_G
//   requires acc(h_V0_CN0.Mem(), ReadL1_b40dce56_G)
//   requires acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, HopLen_faafd1d5_G))
//   ensures acc(h_V0_CN0.Mem(), ReadL1_b40dce56_G)
//   ensures acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, HopLen_faafd1d5_G))
//   decreases  
//   outline
  assert !true || true
  N4 := SerializeTo_faafd1d5_PMHopField$L$32$1(b_V0_CN1, h_V0_CN0, N4)
  
  // err_V0_CN2 = (nil:error_a4af0e5e_T)
  err_V0_CN2 := (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // return
  goto returnLabel
  label returnLabel
  
  // err_V0 = err_V0_CN2
  err_V0 := err_V0_CN2
}

// decreases 
method ExpTimeToDuration_faafd1d5_F(expTime_V0: Int) returns (P0_PO0: Int)
{
  inhale P0_PO0 == 0
  
  // decl expTime_V0_CN0: uint8°
  var expTime_V0_CN0: Int
  
  
  
  // init expTime_V0_CN0
  inhale expTime_V0_CN0 == 0
  
  // expTime_V0_CN0 = expTime_V0
  expTime_V0_CN0 := expTime_V0
  
  // decl 
  
  // P0_PO0 = Duration_531757d2_T(expTime_V0_CN0) + 1 * Duration_531757d2_T(expTimeUnit_faafd1d5_G) * Second_531757d2_G
  P0_PO0 := (expTime_V0_CN0 + 1) * constant_expTimeUnit_faafd1d5_G() * constant_Second_531757d2_G()
  
  // return
  goto returnLabel
  label returnLabel
}

method foldMem_test_faafd1d5_F()
{
  
  // decl 
  
  
  
  // decl N0: *rawPath_faafd1d5_T°, r_V0: *rawPath_faafd1d5_T°, N1: []byte°
  var N1: Slice[Ref]
  var r_V0: ShStruct2[Ref, Ref]
  var N0: ShStruct2[Ref, Ref]
  
  // N0 = new(rawPath_faafd1d5_T{dflt[[]byte], dflt[Type_faafd1d5_T]})
  var fn$$0: ShStruct2[Ref, Ref]
  inhale true && acc((ShStructget0of2(fn$$0): Ref).val$_Slice_Ref, write) && acc((ShStructget1of2(fn$$0): Ref).val$_Int, write) && (true && (ShStructget0of2(fn$$0): Ref).val$_Slice_Ref == (get0of2((tuple2(sliceDefault_Intbyte$$$_S_$$$(), 0): Tuple2[Slice[Ref], Int])): Slice[Ref]) && (ShStructget1of2(fn$$0): Ref).val$_Int == (get1of2((tuple2(sliceDefault_Intbyte$$$_S_$$$(), 0): Tuple2[Slice[Ref], Int])): Int))
  N0 := fn$$0
  
  // init r_V0
  inhale r_V0 == shStructDefault_$rawA_SliceIntbyte$$$_S_$$$$$$_S_$$$_pathTypeA_DefinedType_faafd1d5_T$$$_S_$$$$()
  
  // r_V0 = N0
  r_V0 := N0
  
  // N1 = make([]byte, 10)
  var fn$$1: Slice[Ref]
  exhale true && 0 <= 10 && 0 <= 10 && 10 <= 10
  inhale true && (forall fn$$2: Int :: { (ShArrayloc((sarray(fn$$1): ShArray[Ref]), sadd((soffset(fn$$1): Int), fn$$2)): Ref) } 0 <= fn$$2 && fn$$2 < (scap(fn$$1): Int) ==> acc((ShArrayloc((sarray(fn$$1): ShArray[Ref]), sadd((soffset(fn$$1): Int), fn$$2)): Ref).val$_Int, write))
  inhale (scap(fn$$1): Int) == 10
  inhale (slen(fn$$1): Int) == 10
  inhale (forall fn$$3: Int :: { (ShArrayloc((sarray(fn$$1): ShArray[Ref]), sadd((soffset(fn$$1): Int), fn$$3)): Ref) } 0 <= fn$$3 && fn$$3 < 10 ==> (ShArrayloc((sarray(fn$$1): ShArray[Ref]), sadd((soffset(fn$$1): Int), fn$$3)): Ref).val$_Int == 0)
  N1 := fn$$1
  
  // *r_V0.rawA = N1
  (ShStructget0of2(r_V0): Ref).val$_Slice_Ref := N1
  
  // fold acc(AbsSlice_Bytes_88c2f8cc_F(*r_V0.rawA, 0, len(*r_V0.rawA)))
  fold acc(AbsSlice_Bytes_88c2f8cc_F((ShStructget0of2(r_V0): Ref).val$_Slice_Ref, 0, (slen((ShStructget0of2(r_V0): Ref).val$_Slice_Ref): Int)), write)
  
  // fold acc(r_V0.Mem())
  fold acc(dynamic_pred_1((tuple2((box_Poly(r_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  label returnLabel
}

method foldNonInitMem_test_faafd1d5_F()
{
  
  // decl 
  
  
  
  // decl N0: *rawPath_faafd1d5_T°, r_V0: *rawPath_faafd1d5_T°, N1: []byte°
  var N1: Slice[Ref]
  var r_V0: ShStruct2[Ref, Ref]
  var N0: ShStruct2[Ref, Ref]
  
  // N0 = new(rawPath_faafd1d5_T{dflt[[]byte], dflt[Type_faafd1d5_T]})
  var fn$$0: ShStruct2[Ref, Ref]
  inhale true && acc((ShStructget0of2(fn$$0): Ref).val$_Slice_Ref, write) && acc((ShStructget1of2(fn$$0): Ref).val$_Int, write) && (true && (ShStructget0of2(fn$$0): Ref).val$_Slice_Ref == (get0of2((tuple2(sliceDefault_Intbyte$$$_S_$$$(), 0): Tuple2[Slice[Ref], Int])): Slice[Ref]) && (ShStructget1of2(fn$$0): Ref).val$_Int == (get1of2((tuple2(sliceDefault_Intbyte$$$_S_$$$(), 0): Tuple2[Slice[Ref], Int])): Int))
  N0 := fn$$0
  
  // init r_V0
  inhale r_V0 == shStructDefault_$rawA_SliceIntbyte$$$_S_$$$$$$_S_$$$_pathTypeA_DefinedType_faafd1d5_T$$$_S_$$$$()
  
  // r_V0 = N0
  r_V0 := N0
  
  // N1 = make([]byte, 10)
  var fn$$1: Slice[Ref]
  exhale true && 0 <= 10 && 0 <= 10 && 10 <= 10
  inhale true && (forall fn$$2: Int :: { (ShArrayloc((sarray(fn$$1): ShArray[Ref]), sadd((soffset(fn$$1): Int), fn$$2)): Ref) } 0 <= fn$$2 && fn$$2 < (scap(fn$$1): Int) ==> acc((ShArrayloc((sarray(fn$$1): ShArray[Ref]), sadd((soffset(fn$$1): Int), fn$$2)): Ref).val$_Int, write))
  inhale (scap(fn$$1): Int) == 10
  inhale (slen(fn$$1): Int) == 10
  inhale (forall fn$$3: Int :: { (ShArrayloc((sarray(fn$$1): ShArray[Ref]), sadd((soffset(fn$$1): Int), fn$$3)): Ref) } 0 <= fn$$3 && fn$$3 < 10 ==> (ShArrayloc((sarray(fn$$1): ShArray[Ref]), sadd((soffset(fn$$1): Int), fn$$3)): Ref).val$_Int == 0)
  N1 := fn$$1
  
  // *r_V0.rawA = N1
  (ShStructget0of2(r_V0): Ref).val$_Slice_Ref := N1
  
  // fold acc(r_V0.NonInitMem())
  fold acc(dynamic_pred_0((tuple2((box_Poly(r_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  label returnLabel
}

// decreases 
method DecodeFromBytes_faafd1d5_PMInfoField(inf_V0: ShStruct4[Ref, Ref, Ref, Ref], raw_V0: Slice[Ref]) returns (err_V0: Tuple2[Ref, Types])
  requires (slen(raw_V0): Int) >= constant_InfoLen_faafd1d5_G()
  requires true && acc((ShStructget0of4(inf_V0): Ref).val$_Bool, write) && acc((ShStructget1of4(inf_V0): Ref).val$_Bool, write) && acc((ShStructget2of4(inf_V0): Ref).val$_Int, write) && acc((ShStructget3of4(inf_V0): Ref).val$_Int, write)
  requires acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0, 0, constant_InfoLen_faafd1d5_G()), constant_ReadL1_b40dce56_G())
  ensures true && acc((ShStructget0of4(inf_V0): Ref).val$_Bool, write) && acc((ShStructget1of4(inf_V0): Ref).val$_Bool, write) && acc((ShStructget2of4(inf_V0): Ref).val$_Int, write) && acc((ShStructget3of4(inf_V0): Ref).val$_Int, write)
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0, 0, constant_InfoLen_faafd1d5_G()), constant_ReadL1_b40dce56_G())
  ensures assertArg2_Bool(comparableInterface(err_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
{
  inhale err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // decl inf_V0_CN0: *InfoField_faafd1d5_T°, raw_V0_CN1: []byte°, err_V0_CN2: error_a4af0e5e_T°
  var err_V0_CN2: Tuple2[Ref, Types]
  var raw_V0_CN1: Slice[Ref]
  var inf_V0_CN0: ShStruct4[Ref, Ref, Ref, Ref]
  
  
  
  // init inf_V0_CN0
  inhale inf_V0_CN0 == shStructDefault_$PeerA_Bool$$$_S_$$$_ConsDirA_Bool$$$_S_$$$_SegIDA_Intuint16$$$_S_$$$_TimestampA_Intuint32$$$_S_$$$$()
  
  // init raw_V0_CN1
  inhale raw_V0_CN1 == sliceDefault_Intbyte$$$_S_$$$()
  
  // init err_V0_CN2
  inhale err_V0_CN2 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // inf_V0_CN0 = inf_V0
  inf_V0_CN0 := inf_V0
  
  // raw_V0_CN1 = raw_V0
  raw_V0_CN1 := raw_V0
  
  // decl 
  
  // if(len(raw_V0_CN1) < InfoLen_faafd1d5_G) {...} else {...}
  if ((slen(raw_V0_CN1): Int) < constant_InfoLen_faafd1d5_G()) {
    
    // decl N3: error_a4af0e5e_T°
    var N3: Tuple2[Ref, Types]
    
    // N3 = New_a58fd4a8_F("InfoField raw too short", []interface(name is empty_interface) { 0:toInterface("expected"), 1:toInterface(InfoLen_faafd1d5_G), 2:toInterface("actual"), 3:toInterface(len(raw_V0_CN1)) })
    var fn$$2: Emb_4_Interfaceempty_interface$$$_S_$$$
    var fn$$3: Emb_4_Interfaceempty_interface$$$$_E_$$$
    var fn$$0: Emb_4_Interfaceempty_interface$$$_S_$$$
    fn$$2 := fn$$0
    fn$$3 := arrayDefault_4_Interfaceempty_interface$$$$_E_$$$()
    inhale true && (forall fn$$1: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$1): Ref) } 0 <= fn$$1 && fn$$1 < 4 ==> acc((ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$1): Ref).val$_Tuple2_RefTypes, write)) && ((forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$2), fn$$4): Ref) } { unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$3)[fn$$4] } 0 <= fn$$4 && fn$$4 < 4 ==> (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$2), fn$$4): Ref).val$_Tuple2_RefTypes == unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$3)[fn$$4]) && !(fn$$0 == box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(arrayNil_4_Interfaceempty_interface$$$_S_$$$())))
    var fn$$6: Emb_4_Interfaceempty_interface$$$_S_$$$
    var fn$$7: Emb_4_Interfaceempty_interface$$$$_E_$$$
    fn$$6 := fn$$0
    fn$$7 := box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(Seq((tuple2((box_Poly(stringLit6578706563746564()): Ref), string_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly(constant_InfoLen_faafd1d5_G()): Ref), integer_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly(stringLit61637475616c()): Ref), string_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly((slen(raw_V0_CN1): Int)): Ref), integer_Types()): Tuple2[Ref, Types])))
    exhale true && (forall fn$$5: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$5): Ref) } 0 <= fn$$5 && fn$$5 < 4 ==> acc((ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$5): Ref).val$_Tuple2_RefTypes, write))
    inhale true && (forall fn$$5: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$5): Ref) } 0 <= fn$$5 && fn$$5 < 4 ==> acc((ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$5): Ref).val$_Tuple2_RefTypes, write)) && (forall fn$$8: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$6), fn$$8): Ref) } { unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$7)[fn$$8] } 0 <= fn$$8 && fn$$8 < 4 ==> (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$6), fn$$8): Ref).val$_Tuple2_RefTypes == unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$7)[fn$$8])
    assert !true || true
    N3 := New_a58fd4a8_F(stringLit496e666f4669656c642072617720746f6f2073686f7274(), ssliceFromArray_Ref(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), 0, 4))
    
    // err_V0_CN2 = N3
    err_V0_CN2 := N3
    
    // return
    goto returnLabel
  }
  
  // unfold acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1, 0, InfoLen_faafd1d5_G), ReadL1_b40dce56_G)
  unfold acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1, 0, constant_InfoLen_faafd1d5_G()), constant_ReadL1_b40dce56_G())
  
  // *inf_V0_CN0.ConsDirA = raw_V0_CN1[0] & 0x1 == 0x1
  (ShStructget1of4(inf_V0_CN0): Ref).val$_Bool := intBitwiseAnd((ShArrayloc((sarray(raw_V0_CN1): ShArray[Ref]), sadd((soffset(raw_V0_CN1): Int), 0)): Ref).val$_Int, 1) == 1
  
  // *inf_V0_CN0.PeerA = raw_V0_CN1[0] & 0x2 == 0x2
  (ShStructget0of4(inf_V0_CN0): Ref).val$_Bool := intBitwiseAnd((ShArrayloc((sarray(raw_V0_CN1): ShArray[Ref]), sadd((soffset(raw_V0_CN1): Int), 0)): Ref).val$_Int, 2) == 2
  
  // assert &raw_V0_CN1[2:4][0] == &raw_V0_CN1[2] && &raw_V0_CN1[2:4][1] == &raw_V0_CN1[3]
  assert (ShArrayloc((sarray(ssliceFromSlice_Ref(raw_V0_CN1, 2, 4)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(raw_V0_CN1, 2, 4)): Int), 0)): Ref) == (ShArrayloc((sarray(raw_V0_CN1): ShArray[Ref]), sadd((soffset(raw_V0_CN1): Int), 2)): Ref) && (ShArrayloc((sarray(ssliceFromSlice_Ref(raw_V0_CN1, 2, 4)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(raw_V0_CN1, 2, 4)): Int), 1)): Ref) == (ShArrayloc((sarray(raw_V0_CN1): ShArray[Ref]), sadd((soffset(raw_V0_CN1): Int), 3)): Ref)
  
  // *inf_V0_CN0.SegIDA = BigEndian_bf01f2a6_G.Uint16(raw_V0_CN1[2:4])
  (ShStructget2of4(inf_V0_CN0): Ref).val$_Int := Uint16_bf01f2a6_MbigEndian(constant_BigEndian_bf01f2a6_G(), ssliceFromSlice_Ref(raw_V0_CN1, 2, 4))
  
  // assert &raw_V0_CN1[4:8][0] == &raw_V0_CN1[4] && &raw_V0_CN1[4:8][1] == &raw_V0_CN1[5]
  assert (ShArrayloc((sarray(ssliceFromSlice_Ref(raw_V0_CN1, 4, 8)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(raw_V0_CN1, 4, 8)): Int), 0)): Ref) == (ShArrayloc((sarray(raw_V0_CN1): ShArray[Ref]), sadd((soffset(raw_V0_CN1): Int), 4)): Ref) && (ShArrayloc((sarray(ssliceFromSlice_Ref(raw_V0_CN1, 4, 8)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(raw_V0_CN1, 4, 8)): Int), 1)): Ref) == (ShArrayloc((sarray(raw_V0_CN1): ShArray[Ref]), sadd((soffset(raw_V0_CN1): Int), 5)): Ref)
  
  // assert &raw_V0_CN1[4:8][2] == &raw_V0_CN1[6] && &raw_V0_CN1[4:8][3] == &raw_V0_CN1[7]
  assert (ShArrayloc((sarray(ssliceFromSlice_Ref(raw_V0_CN1, 4, 8)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(raw_V0_CN1, 4, 8)): Int), 2)): Ref) == (ShArrayloc((sarray(raw_V0_CN1): ShArray[Ref]), sadd((soffset(raw_V0_CN1): Int), 6)): Ref) && (ShArrayloc((sarray(ssliceFromSlice_Ref(raw_V0_CN1, 4, 8)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(raw_V0_CN1, 4, 8)): Int), 3)): Ref) == (ShArrayloc((sarray(raw_V0_CN1): ShArray[Ref]), sadd((soffset(raw_V0_CN1): Int), 7)): Ref)
  
  // *inf_V0_CN0.TimestampA = BigEndian_bf01f2a6_G.Uint32(raw_V0_CN1[4:8])
  (ShStructget3of4(inf_V0_CN0): Ref).val$_Int := Uint32_bf01f2a6_MbigEndian(constant_BigEndian_bf01f2a6_G(), ssliceFromSlice_Ref(raw_V0_CN1, 4, 8))
  
  // fold acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1, 0, InfoLen_faafd1d5_G), ReadL1_b40dce56_G)
  fold acc(AbsSlice_Bytes_88c2f8cc_F(raw_V0_CN1, 0, constant_InfoLen_faafd1d5_G()), constant_ReadL1_b40dce56_G())
  
  // err_V0_CN2 = (nil:error_a4af0e5e_T)
  err_V0_CN2 := (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // return
  goto returnLabel
  label returnLabel
  
  // err_V0 = err_V0_CN2
  err_V0 := err_V0_CN2
}

// decreases 
method SerializeTo_faafd1d5_PMInfoField(inf_V0: ShStruct4[Ref, Ref, Ref, Ref], b_V0: Slice[Ref]) returns (err_V0: Tuple2[Ref, Types])
  requires (slen(b_V0): Int) >= constant_InfoLen_faafd1d5_G()
  requires true && acc((ShStructget0of4(inf_V0): Ref).val$_Bool, constant_ReadL1_b40dce56_G()) && acc((ShStructget1of4(inf_V0): Ref).val$_Bool, constant_ReadL1_b40dce56_G()) && acc((ShStructget2of4(inf_V0): Ref).val$_Int, constant_ReadL1_b40dce56_G()) && acc((ShStructget3of4(inf_V0): Ref).val$_Int, constant_ReadL1_b40dce56_G())
  requires acc(AbsSlice_Bytes_88c2f8cc_F(b_V0, 0, constant_InfoLen_faafd1d5_G()), write)
  ensures true && acc((ShStructget0of4(inf_V0): Ref).val$_Bool, constant_ReadL1_b40dce56_G()) && acc((ShStructget1of4(inf_V0): Ref).val$_Bool, constant_ReadL1_b40dce56_G()) && acc((ShStructget2of4(inf_V0): Ref).val$_Int, constant_ReadL1_b40dce56_G()) && acc((ShStructget3of4(inf_V0): Ref).val$_Int, constant_ReadL1_b40dce56_G())
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(b_V0, 0, constant_InfoLen_faafd1d5_G()), write)
  ensures assertArg2_Bool(comparableInterface(err_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
{
  inhale err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // decl inf_V0_CN0: *InfoField_faafd1d5_T°, b_V0_CN1: []byte°, err_V0_CN2: error_a4af0e5e_T°
  var err_V0_CN2: Tuple2[Ref, Types]
  var b_V0_CN1: Slice[Ref]
  var inf_V0_CN0: ShStruct4[Ref, Ref, Ref, Ref]
  
  
  
  // init inf_V0_CN0
  inhale inf_V0_CN0 == shStructDefault_$PeerA_Bool$$$_S_$$$_ConsDirA_Bool$$$_S_$$$_SegIDA_Intuint16$$$_S_$$$_TimestampA_Intuint32$$$_S_$$$$()
  
  // init b_V0_CN1
  inhale b_V0_CN1 == sliceDefault_Intbyte$$$_S_$$$()
  
  // init err_V0_CN2
  inhale err_V0_CN2 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // inf_V0_CN0 = inf_V0
  inf_V0_CN0 := inf_V0
  
  // b_V0_CN1 = b_V0
  b_V0_CN1 := b_V0
  
  // decl 
  
  // if(len(b_V0_CN1) < InfoLen_faafd1d5_G) {...} else {...}
  if ((slen(b_V0_CN1): Int) < constant_InfoLen_faafd1d5_G()) {
    
    // decl N3: error_a4af0e5e_T°
    var N3: Tuple2[Ref, Types]
    
    // N3 = New_a58fd4a8_F("buffer for InfoField too short", []interface(name is empty_interface) { 0:toInterface("expected"), 1:toInterface(InfoLen_faafd1d5_G), 2:toInterface("actual"), 3:toInterface(len(b_V0_CN1)) })
    var fn$$2: Emb_4_Interfaceempty_interface$$$_S_$$$
    var fn$$3: Emb_4_Interfaceempty_interface$$$$_E_$$$
    var fn$$0: Emb_4_Interfaceempty_interface$$$_S_$$$
    fn$$2 := fn$$0
    fn$$3 := arrayDefault_4_Interfaceempty_interface$$$$_E_$$$()
    inhale true && (forall fn$$1: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$1): Ref) } 0 <= fn$$1 && fn$$1 < 4 ==> acc((ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$1): Ref).val$_Tuple2_RefTypes, write)) && ((forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$2), fn$$4): Ref) } { unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$3)[fn$$4] } 0 <= fn$$4 && fn$$4 < 4 ==> (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$2), fn$$4): Ref).val$_Tuple2_RefTypes == unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$3)[fn$$4]) && !(fn$$0 == box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(arrayNil_4_Interfaceempty_interface$$$_S_$$$())))
    var fn$$6: Emb_4_Interfaceempty_interface$$$_S_$$$
    var fn$$7: Emb_4_Interfaceempty_interface$$$$_E_$$$
    fn$$6 := fn$$0
    fn$$7 := box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(Seq((tuple2((box_Poly(stringLit6578706563746564()): Ref), string_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly(constant_InfoLen_faafd1d5_G()): Ref), integer_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly(stringLit61637475616c()): Ref), string_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly((slen(b_V0_CN1): Int)): Ref), integer_Types()): Tuple2[Ref, Types])))
    exhale true && (forall fn$$5: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$5): Ref) } 0 <= fn$$5 && fn$$5 < 4 ==> acc((ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$5): Ref).val$_Tuple2_RefTypes, write))
    inhale true && (forall fn$$5: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$5): Ref) } 0 <= fn$$5 && fn$$5 < 4 ==> acc((ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$5): Ref).val$_Tuple2_RefTypes, write)) && (forall fn$$8: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$6), fn$$8): Ref) } { unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$7)[fn$$8] } 0 <= fn$$8 && fn$$8 < 4 ==> (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$6), fn$$8): Ref).val$_Tuple2_RefTypes == unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$7)[fn$$8])
    assert !true || true
    N3 := New_a58fd4a8_F(stringLit62756666657220666f7220496e666f4669656c6420746f6f2073686f7274(), ssliceFromArray_Ref(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), 0, 4))
    
    // err_V0_CN2 = N3
    err_V0_CN2 := N3
    
    // return
    goto returnLabel
  }
  
  // unfold acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, InfoLen_faafd1d5_G))
  unfold acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, constant_InfoLen_faafd1d5_G()), write)
  
  // b_V0_CN1[0] = 0
  (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 0)): Ref).val$_Int := 0
  
  // if(*inf_V0_CN0.ConsDirA) {...} else {...}
  if ((ShStructget1of4(inf_V0_CN0): Ref).val$_Bool) {
    
    // decl 
    
    // b_V0_CN1[0] = b_V0_CN1[0] | 0x1
    (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 0)): Ref).val$_Int := intBitwiseOr((ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 0)): Ref).val$_Int, 1)
  }
  
  // if(*inf_V0_CN0.PeerA) {...} else {...}
  if ((ShStructget0of4(inf_V0_CN0): Ref).val$_Bool) {
    
    // decl 
    
    // b_V0_CN1[0] = b_V0_CN1[0] | 0x2
    (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 0)): Ref).val$_Int := intBitwiseOr((ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 0)): Ref).val$_Int, 2)
  }
  
  // b_V0_CN1[1] = 0
  (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 1)): Ref).val$_Int := 0
  
  // assert &b_V0_CN1[2:4][0] == &b_V0_CN1[2] && &b_V0_CN1[2:4][1] == &b_V0_CN1[3]
  assert (ShArrayloc((sarray(ssliceFromSlice_Ref(b_V0_CN1, 2, 4)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(b_V0_CN1, 2, 4)): Int), 0)): Ref) == (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 2)): Ref) && (ShArrayloc((sarray(ssliceFromSlice_Ref(b_V0_CN1, 2, 4)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(b_V0_CN1, 2, 4)): Int), 1)): Ref) == (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 3)): Ref)
  
  // BigEndian_bf01f2a6_GPutUint16(b_V0_CN1[2:4], *inf_V0_CN0.SegIDA)
  assert !true || true
  PutUint16_bf01f2a6_MbigEndian(constant_BigEndian_bf01f2a6_G(), ssliceFromSlice_Ref(b_V0_CN1, 2, 4), (ShStructget2of4(inf_V0_CN0): Ref).val$_Int)
  
  // assert &b_V0_CN1[4:8][0] == &b_V0_CN1[4] && &b_V0_CN1[4:8][1] == &b_V0_CN1[5]
  assert (ShArrayloc((sarray(ssliceFromSlice_Ref(b_V0_CN1, 4, 8)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(b_V0_CN1, 4, 8)): Int), 0)): Ref) == (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 4)): Ref) && (ShArrayloc((sarray(ssliceFromSlice_Ref(b_V0_CN1, 4, 8)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(b_V0_CN1, 4, 8)): Int), 1)): Ref) == (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 5)): Ref)
  
  // assert &b_V0_CN1[4:8][2] == &b_V0_CN1[6] && &b_V0_CN1[4:8][3] == &b_V0_CN1[7]
  assert (ShArrayloc((sarray(ssliceFromSlice_Ref(b_V0_CN1, 4, 8)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(b_V0_CN1, 4, 8)): Int), 2)): Ref) == (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 6)): Ref) && (ShArrayloc((sarray(ssliceFromSlice_Ref(b_V0_CN1, 4, 8)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(b_V0_CN1, 4, 8)): Int), 3)): Ref) == (ShArrayloc((sarray(b_V0_CN1): ShArray[Ref]), sadd((soffset(b_V0_CN1): Int), 7)): Ref)
  
  // BigEndian_bf01f2a6_GPutUint32(b_V0_CN1[4:8], *inf_V0_CN0.TimestampA)
  assert !true || true
  PutUint32_bf01f2a6_MbigEndian(constant_BigEndian_bf01f2a6_G(), ssliceFromSlice_Ref(b_V0_CN1, 4, 8), (ShStructget3of4(inf_V0_CN0): Ref).val$_Int)
  
  // fold acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, InfoLen_faafd1d5_G))
  fold acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, constant_InfoLen_faafd1d5_G()), write)
  
  // err_V0_CN2 = (nil:error_a4af0e5e_T)
  err_V0_CN2 := (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // return
  goto returnLabel
  label returnLabel
  
  // err_V0 = err_V0_CN2
  err_V0 := err_V0_CN2
}

// decreases 
method UpdateSegID_faafd1d5_PMInfoField(inf_V0: ShStruct4[Ref, Ref, Ref, Ref], hfMac_V0: Emb_6_Intbyte$$$$_E_$$$)
  requires true && acc((ShStructget0of4(inf_V0): Ref).val$_Bool, write) && acc((ShStructget1of4(inf_V0): Ref).val$_Bool, write) && acc((ShStructget2of4(inf_V0): Ref).val$_Int, write) && acc((ShStructget3of4(inf_V0): Ref).val$_Int, write)
  ensures true && acc((ShStructget0of4(inf_V0): Ref).val$_Bool, write) && acc((ShStructget1of4(inf_V0): Ref).val$_Bool, write) && acc((ShStructget2of4(inf_V0): Ref).val$_Int, write) && acc((ShStructget3of4(inf_V0): Ref).val$_Int, write)
{
  
  // decl inf_V0_CN0: *InfoField_faafd1d5_T°, hfMac_V0_CN1: [6]byte@
  var hfMac_V0_CN1: Emb_6_Intbyte$$$_S_$$$
  var inf_V0_CN0: ShStruct4[Ref, Ref, Ref, Ref]
  
  
  
  // init inf_V0_CN0
  inhale inf_V0_CN0 == shStructDefault_$PeerA_Bool$$$_S_$$$_ConsDirA_Bool$$$_S_$$$_SegIDA_Intuint16$$$_S_$$$_TimestampA_Intuint32$$$_S_$$$$()
  
  // init hfMac_V0_CN1
  var fn$$1: Emb_6_Intbyte$$$_S_$$$
  var fn$$2: Emb_6_Intbyte$$$$_E_$$$
  fn$$1 := hfMac_V0_CN1
  fn$$2 := arrayDefault_6_Intbyte$$$$_E_$$$()
  inhale true && (forall fn$$0: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(hfMac_V0_CN1), fn$$0): Ref) } 0 <= fn$$0 && fn$$0 < 6 ==> acc((ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(hfMac_V0_CN1), fn$$0): Ref).val$_Int, write)) && ((forall fn$$3: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(fn$$1), fn$$3): Ref) } { unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$2)[fn$$3] } 0 <= fn$$3 && fn$$3 < 6 ==> (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(fn$$1), fn$$3): Ref).val$_Int == unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$2)[fn$$3]) && !(hfMac_V0_CN1 == box_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(arrayNil_6_Intbyte$$$_S_$$$())))
  
  // inf_V0_CN0 = inf_V0
  inf_V0_CN0 := inf_V0
  
  // hfMac_V0_CN1 = hfMac_V0
  var fn$$5: Emb_6_Intbyte$$$_S_$$$
  var fn$$6: Emb_6_Intbyte$$$$_E_$$$
  fn$$5 := hfMac_V0_CN1
  fn$$6 := hfMac_V0
  exhale true && (forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(hfMac_V0_CN1), fn$$4): Ref) } 0 <= fn$$4 && fn$$4 < 6 ==> acc((ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(hfMac_V0_CN1), fn$$4): Ref).val$_Int, write))
  inhale true && (forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(hfMac_V0_CN1), fn$$4): Ref) } 0 <= fn$$4 && fn$$4 < 6 ==> acc((ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(hfMac_V0_CN1), fn$$4): Ref).val$_Int, write)) && (forall fn$$7: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(fn$$5), fn$$7): Ref) } { unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$6)[fn$$7] } 0 <= fn$$7 && fn$$7 < 6 ==> (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(fn$$5), fn$$7): Ref).val$_Int == unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$6)[fn$$7])
  
  // decl 
  
  // *inf_V0_CN0.SegIDA = *inf_V0_CN0.SegIDA ^ BigEndian_bf01f2a6_G.Uint16(hfMac_V0_CN1[0:2])
  (ShStructget2of4(inf_V0_CN0): Ref).val$_Int := intBitwiseXor((ShStructget2of4(inf_V0_CN0): Ref).val$_Int, Uint16_bf01f2a6_MbigEndian(constant_BigEndian_bf01f2a6_G(), ssliceFromArray_Ref(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(hfMac_V0_CN1), 0, 2)))
  label returnLabel
}

// decreases 
method String_faafd1d5_MInfoField(inf_V0: Tuple4[Bool, Bool, Int, Int]) returns (P0_PO0: Int)


// decreases 
method NewPathSpec_faafd1d5_F() returns (p_V0: Tuple2[Ref, Types])
  ensures acc(dynamic_pred_0(p_V0), write)


// decreases 
method ExchangeBufMem_faafd1d5_PMrawPath(r_V0: ShStruct2[Ref, Ref], buf_V0: Slice[Ref])
  requires acc(dynamic_pred_1((tuple2((box_Poly(r_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  requires GetUnderlyingBuf_faafd1d5_PMrawPath(r_V0) == buf_V0
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0, 0, (slen(buf_V0): Int)), write)

  ensures acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0, 0, (slen(buf_V0): Int)), write) --* acc(dynamic_pred_1((tuple2((box_Poly(r_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write) && GetUnderlyingBuf_faafd1d5_PMrawPath(r_V0) == buf_V0
{
  
  // decl r_V0_CN0: *rawPath_faafd1d5_T°, buf_V0_CN1: []byte°
  var buf_V0_CN1: Slice[Ref]
  var r_V0_CN0: ShStruct2[Ref, Ref]
  
  
  
  // init r_V0_CN0
  inhale r_V0_CN0 == shStructDefault_$rawA_SliceIntbyte$$$_S_$$$$$$_S_$$$_pathTypeA_DefinedType_faafd1d5_T$$$_S_$$$$()
  
  // init buf_V0_CN1
  inhale buf_V0_CN1 == sliceDefault_Intbyte$$$_S_$$$()
  
  // r_V0_CN0 = r_V0
  r_V0_CN0 := r_V0
  
  // buf_V0_CN1 = buf_V0
  buf_V0_CN1 := buf_V0
  
  // decl 
  
  // unfold acc(r_V0_CN0.Mem())
  unfold acc(dynamic_pred_1((tuple2((box_Poly(r_V0_CN0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  
  // assert buf_V0_CN1 === *r_V0_CN0.rawA
  assert buf_V0_CN1 == (ShStructget0of2(r_V0_CN0): Ref).val$_Slice_Ref
  
  // package acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0_CN1, 0, len(buf_V0_CN1))) --* acc(r_V0_CN0.Mem()) && r_V0_CN0.GetUnderlyingBuf() === buf_V0_CN1
  package acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0_CN1, 0, (slen(buf_V0_CN1): Int)), write) --* acc(dynamic_pred_1((tuple2((box_Poly(r_V0_CN0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write) && GetUnderlyingBuf_faafd1d5_PMrawPath(r_V0_CN0) == buf_V0_CN1 {
    
    // decl 
    
    // assert acc(*r_V0_CN0.rawA)
    assert acc((ShStructget0of2(r_V0_CN0): Ref).val$_Slice_Ref, write)
    
    // assert buf_V0_CN1 === *r_V0_CN0.rawA
    assert buf_V0_CN1 == (ShStructget0of2(r_V0_CN0): Ref).val$_Slice_Ref
    
    // fold acc(r_V0_CN0.Mem())
    fold acc(dynamic_pred_1((tuple2((box_Poly(r_V0_CN0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  }
  
  // assert acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0_CN1, 0, len(buf_V0_CN1)))
  assert acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0_CN1, 0, (slen(buf_V0_CN1): Int)), write)
  
  // assert acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0_CN1, 0, len(buf_V0_CN1))) --* acc(r_V0_CN0.Mem()) && r_V0_CN0.GetUnderlyingBuf() === buf_V0_CN1
  assert acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0_CN1, 0, (slen(buf_V0_CN1): Int)), write) --* acc(dynamic_pred_1((tuple2((box_Poly(r_V0_CN0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write) && GetUnderlyingBuf_faafd1d5_PMrawPath(r_V0_CN0) == buf_V0_CN1
  label returnLabel
}

// decreases 
method DowngradePerm_faafd1d5_PMrawPath(p_V0: ShStruct2[Ref, Ref], buf_V0: Slice[Ref])
  requires acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  requires GetUnderlyingBuf_faafd1d5_PMrawPath(p_V0) == buf_V0
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0, 0, (slen(buf_V0): Int)), write)
  ensures acc(dynamic_pred_0((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
{
  
  // decl p_V0_CN0: *rawPath_faafd1d5_T°, buf_V0_CN1: []byte°
  var buf_V0_CN1: Slice[Ref]
  var p_V0_CN0: ShStruct2[Ref, Ref]
  
  
  
  // init p_V0_CN0
  inhale p_V0_CN0 == shStructDefault_$rawA_SliceIntbyte$$$_S_$$$$$$_S_$$$_pathTypeA_DefinedType_faafd1d5_T$$$_S_$$$$()
  
  // init buf_V0_CN1
  inhale buf_V0_CN1 == sliceDefault_Intbyte$$$_S_$$$()
  
  // p_V0_CN0 = p_V0
  p_V0_CN0 := p_V0
  
  // buf_V0_CN1 = buf_V0
  buf_V0_CN1 := buf_V0
  
  // decl 
  
  // unfold acc(p_V0_CN0.Mem())
  unfold acc(dynamic_pred_1((tuple2((box_Poly(p_V0_CN0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  
  // assert *p_V0_CN0.rawA === buf_V0_CN1
  assert (ShStructget0of2(p_V0_CN0): Ref).val$_Slice_Ref == buf_V0_CN1
  
  // assert acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0_CN1, 0, len(buf_V0_CN1)))
  assert acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0_CN1, 0, (slen(buf_V0_CN1): Int)), write)
  
  // fold acc(p_V0_CN0.NonInitMem())
  fold acc(dynamic_pred_0((tuple2((box_Poly(p_V0_CN0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  label returnLabel
}

method testAllocateHopField_faafd1d5_F()
{
  
  // decl 
  
  
  
  // decl N0: *HopField_faafd1d5_T°, p_V0: *HopField_faafd1d5_T°
  var p_V0: ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]
  var N0: ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]
  
  // N0 = new(HopField_faafd1d5_T{dflt[bool], dflt[bool], dflt[uint8], dflt[uint16], dflt[uint16], dflt[[6]byte]})
  var fn$$0: ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]
  var fn$$2: Emb_6_Intbyte$$$_S_$$$
  var fn$$3: Emb_6_Intbyte$$$$_E_$$$
  fn$$2 := (ShStructget5of6(fn$$0): Emb_6_Intbyte$$$_S_$$$)
  fn$$3 := (get5of6((tuple6(false, false, 0, 0, 0, arrayDefault_6_Intbyte$$$$_E_$$$()): Tuple6[Bool, Bool, Int, Int, Int, Emb_6_Intbyte$$$$_E_$$$])): Emb_6_Intbyte$$$$_E_$$$)
  inhale true && acc((ShStructget0of6(fn$$0): Ref).val$_Bool, write) && acc((ShStructget1of6(fn$$0): Ref).val$_Bool, write) && acc((ShStructget2of6(fn$$0): Ref).val$_Int, write) && acc((ShStructget3of6(fn$$0): Ref).val$_Int, write) && acc((ShStructget4of6(fn$$0): Ref).val$_Int, write) && (true && (forall fn$$1: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(fn$$0): Emb_6_Intbyte$$$_S_$$$)), fn$$1): Ref) } 0 <= fn$$1 && fn$$1 < 6 ==> acc((ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref((ShStructget5of6(fn$$0): Emb_6_Intbyte$$$_S_$$$)), fn$$1): Ref).val$_Int, write))) && (true && (ShStructget0of6(fn$$0): Ref).val$_Bool == (get0of6((tuple6(false, false, 0, 0, 0, arrayDefault_6_Intbyte$$$$_E_$$$()): Tuple6[Bool, Bool, Int, Int, Int, Emb_6_Intbyte$$$$_E_$$$])): Bool) && (ShStructget1of6(fn$$0): Ref).val$_Bool == (get1of6((tuple6(false, false, 0, 0, 0, arrayDefault_6_Intbyte$$$$_E_$$$()): Tuple6[Bool, Bool, Int, Int, Int, Emb_6_Intbyte$$$$_E_$$$])): Bool) && (ShStructget2of6(fn$$0): Ref).val$_Int == (get2of6((tuple6(false, false, 0, 0, 0, arrayDefault_6_Intbyte$$$$_E_$$$()): Tuple6[Bool, Bool, Int, Int, Int, Emb_6_Intbyte$$$$_E_$$$])): Int) && (ShStructget3of6(fn$$0): Ref).val$_Int == (get3of6((tuple6(false, false, 0, 0, 0, arrayDefault_6_Intbyte$$$$_E_$$$()): Tuple6[Bool, Bool, Int, Int, Int, Emb_6_Intbyte$$$$_E_$$$])): Int) && (ShStructget4of6(fn$$0): Ref).val$_Int == (get4of6((tuple6(false, false, 0, 0, 0, arrayDefault_6_Intbyte$$$$_E_$$$()): Tuple6[Bool, Bool, Int, Int, Int, Emb_6_Intbyte$$$$_E_$$$])): Int) && (forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(fn$$2), fn$$4): Ref) } { unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$3)[fn$$4] } 0 <= fn$$4 && fn$$4 < 6 ==> (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(fn$$2), fn$$4): Ref).val$_Int == unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$3)[fn$$4]))
  N0 := fn$$0
  
  // init p_V0
  inhale p_V0 == shStructDefault_$IngressRouterAlertA_Bool$$$_S_$$$_EgressRouterAlertA_Bool$$$_S_$$$_ExpTimeA_Intuint8$$$_S_$$$_ConsIngressA_Intuint16$$$_S_$$$_ConsEgressA_Intuint16$$$_S_$$$_MacA_Array6Intbyte$$$_S_$$$$$$_S_$$$$()
  
  // p_V0 = N0
  p_V0 := N0
  
  // fold acc(p_V0.Mem())
  fold acc(Mem_faafd1d5_PMHopField(p_V0), write)
  
  // return
  goto returnLabel
  label returnLabel
}

// decreases 
method MAC_faafd1d5_F(h_V0: Tuple2[Ref, Types], info_V0: Tuple4[Bool, Bool, Int, Int], hf_V0: Tuple6[Bool, Bool, Int, Int, Int, Emb_6_Intbyte$$$$_E_$$$], buffer_V0: Slice[Ref]) returns (P0_PO0: Emb_6_Intbyte$$$$_E_$$$)
  requires !assertArg2_Bool(comparableInterface(h_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), h_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) && acc(Mem_6f559e0_SY$353949c1_6f559e0_(h_V0), write) && Size_6f559e0_SY$353949c1_6f559e0_(h_V0) >= constant_MACBufferSize_faafd1d5_G()
  requires (slen(buffer_V0): Int) >= constant_MACBufferSize_faafd1d5_G() ==> acc(AbsSlice_Bytes_88c2f8cc_F(buffer_V0, 0, (slen(buffer_V0): Int)), write)
  ensures (slen(buffer_V0): Int) >= constant_MACBufferSize_faafd1d5_G() ==> acc(AbsSlice_Bytes_88c2f8cc_F(buffer_V0, 0, (slen(buffer_V0): Int)), write)
{
  var fn$$0: Emb_6_Intbyte$$$$_E_$$$
  var fn$$1: Emb_6_Intbyte$$$$_E_$$$
  fn$$0 := P0_PO0
  fn$$1 := arrayDefault_6_Intbyte$$$$_E_$$$()
  inhale (forall fn$$2: Int :: { unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$0)[fn$$2] } { unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$1)[fn$$2] } 0 <= fn$$2 && fn$$2 < 6 ==> unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$0)[fn$$2] == unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$1)[fn$$2])
  
  // decl h_V0_CN0: Hash_6f559e0_T°, info_V0_CN1: InfoField_faafd1d5_T°, hf_V0_CN2: HopField_faafd1d5_T°, buffer_V0_CN3: []byte°
  var buffer_V0_CN3: Slice[Ref]
  var hf_V0_CN2: Tuple6[Bool, Bool, Int, Int, Int, Emb_6_Intbyte$$$$_E_$$$]
  var info_V0_CN1: Tuple4[Bool, Bool, Int, Int]
  var h_V0_CN0: Tuple2[Ref, Types]
  
  
  
  // init h_V0_CN0
  inhale h_V0_CN0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // init info_V0_CN1
  inhale (get0of4(info_V0_CN1): Bool) == false
  inhale (get1of4(info_V0_CN1): Bool) == false
  inhale (get2of4(info_V0_CN1): Int) == 0
  inhale (get3of4(info_V0_CN1): Int) == 0
  
  // init hf_V0_CN2
  inhale (get0of6(hf_V0_CN2): Bool) == false
  inhale (get1of6(hf_V0_CN2): Bool) == false
  inhale (get2of6(hf_V0_CN2): Int) == 0
  inhale (get3of6(hf_V0_CN2): Int) == 0
  inhale (get4of6(hf_V0_CN2): Int) == 0
  var fn$$3: Emb_6_Intbyte$$$$_E_$$$
  var fn$$4: Emb_6_Intbyte$$$$_E_$$$
  fn$$3 := (get5of6(hf_V0_CN2): Emb_6_Intbyte$$$$_E_$$$)
  fn$$4 := arrayDefault_6_Intbyte$$$$_E_$$$()
  inhale (forall fn$$5: Int :: { unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$3)[fn$$5] } { unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$4)[fn$$5] } 0 <= fn$$5 && fn$$5 < 6 ==> unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$3)[fn$$5] == unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$4)[fn$$5])
  
  // init buffer_V0_CN3
  inhale buffer_V0_CN3 == sliceDefault_Intbyte$$$_S_$$$()
  
  // h_V0_CN0 = h_V0
  h_V0_CN0 := h_V0
  
  // info_V0_CN1 = info_V0
  info_V0_CN1 := info_V0
  
  // hf_V0_CN2 = hf_V0
  hf_V0_CN2 := hf_V0
  
  // buffer_V0_CN3 = buffer_V0
  buffer_V0_CN3 := buffer_V0
  
  // decl N5: []byte°, mac_V1: []byte°, res_V1: [6]byte@, N6: int°
  var N6: Int
  var res_V1: Emb_6_Intbyte$$$_S_$$$
  var mac_V1: Slice[Ref]
  var N5: Slice[Ref]
  
  // N5 = FullMAC_faafd1d5_F(h_V0_CN0, info_V0_CN1, hf_V0_CN2, buffer_V0_CN3)
  assert !true || true
  N5 := FullMAC_faafd1d5_F(h_V0_CN0, info_V0_CN1, hf_V0_CN2, buffer_V0_CN3)
  
  // init mac_V1
  inhale mac_V1 == sliceDefault_Intbyte$$$_S_$$$()
  
  // mac_V1 = N5
  mac_V1 := N5
  
  // init res_V1
  var fn$$7: Emb_6_Intbyte$$$_S_$$$
  var fn$$8: Emb_6_Intbyte$$$$_E_$$$
  fn$$7 := res_V1
  fn$$8 := arrayDefault_6_Intbyte$$$$_E_$$$()
  inhale true && (forall fn$$6: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(res_V1), fn$$6): Ref) } 0 <= fn$$6 && fn$$6 < 6 ==> acc((ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(res_V1), fn$$6): Ref).val$_Int, write)) && ((forall fn$$9: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(fn$$7), fn$$9): Ref) } { unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$8)[fn$$9] } 0 <= fn$$9 && fn$$9 < 6 ==> (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(fn$$7), fn$$9): Ref).val$_Int == unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$8)[fn$$9]) && !(res_V1 == box_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(arrayNil_6_Intbyte$$$_S_$$$())))
  
  // res_V1 = dflt[[6]byte]
  var fn$$11: Emb_6_Intbyte$$$_S_$$$
  var fn$$12: Emb_6_Intbyte$$$$_E_$$$
  fn$$11 := res_V1
  fn$$12 := arrayDefault_6_Intbyte$$$$_E_$$$()
  exhale true && (forall fn$$10: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(res_V1), fn$$10): Ref) } 0 <= fn$$10 && fn$$10 < 6 ==> acc((ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(res_V1), fn$$10): Ref).val$_Int, write))
  inhale true && (forall fn$$10: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(res_V1), fn$$10): Ref) } 0 <= fn$$10 && fn$$10 < 6 ==> acc((ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(res_V1), fn$$10): Ref).val$_Int, write)) && (forall fn$$13: Int :: { (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(fn$$11), fn$$13): Ref) } { unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$12)[fn$$13] } 0 <= fn$$13 && fn$$13 < 6 ==> (ShArrayloc(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(fn$$11), fn$$13): Ref).val$_Int == unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$12)[fn$$13])
  
  // unfold acc(AbsSlice_Bytes_88c2f8cc_F(mac_V1, 0, MACBufferSize_faafd1d5_G))
  unfold acc(AbsSlice_Bytes_88c2f8cc_F(mac_V1, 0, constant_MACBufferSize_faafd1d5_G()), write)
  
  // N6 = copy_BFSliceIntbyte$$$_S_$$$$$$$_E_$$$_SliceIntbyte$$$_S_$$$$$$$_E_$$$_Permission$$$$_E_$$$(res_V1[0:len(res_V1)], mac_V1[0:MacLen_faafd1d5_G], ReadL1_b40dce56_G)
  assert !true || true
  N6 := copy_BFSliceIntbyte$$$_S_$$$$$$$_E_$$$_SliceIntbyte$$$_S_$$$$$$$_E_$$$_Permission$$$$_E_$$$(ssliceFromArray_Ref(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(res_V1), 0, (ShArraylen(unbox_Emb_6_Intbyte$$$_S_$$$_ShArray_Ref(res_V1)): Int)), ssliceFromSlice_Ref(mac_V1, 0, constant_MacLen_faafd1d5_G()), constant_ReadL1_b40dce56_G())
  
  // P0_PO0 = res_V1
  P0_PO0 := arrayConversion_6_Intbyte$$$_S_$$$(res_V1)
  
  // return
  goto returnLabel
  label returnLabel
}

// decreases 
method FullMAC_faafd1d5_F(h_V0: Tuple2[Ref, Types], info_V0: Tuple4[Bool, Bool, Int, Int], hf_V0: Tuple6[Bool, Bool, Int, Int, Int, Emb_6_Intbyte$$$$_E_$$$], buffer_V0: Slice[Ref]) returns (res_V0: Slice[Ref])
  requires !assertArg2_Bool(comparableInterface(h_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), h_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) && acc(Mem_6f559e0_SY$353949c1_6f559e0_(h_V0), write) && Size_6f559e0_SY$353949c1_6f559e0_(h_V0) >= constant_MACBufferSize_faafd1d5_G()
  requires (slen(buffer_V0): Int) >= constant_MACBufferSize_faafd1d5_G() ==> acc(AbsSlice_Bytes_88c2f8cc_F(buffer_V0, 0, (slen(buffer_V0): Int)), write)
  ensures (slen(buffer_V0): Int) >= constant_MACBufferSize_faafd1d5_G() ==> acc(AbsSlice_Bytes_88c2f8cc_F(buffer_V0, 0, (slen(buffer_V0): Int)), write)
  ensures acc(Mem_6f559e0_SY$353949c1_6f559e0_(h_V0), write)
  ensures (slen(res_V0): Int) == constant_MACBufferSize_faafd1d5_G() && acc(AbsSlice_Bytes_88c2f8cc_F(res_V0, 0, constant_MACBufferSize_faafd1d5_G()), write)
{
  inhale res_V0 == sliceDefault_Intbyte$$$_S_$$$()
  
  // decl h_V0_CN0: Hash_6f559e0_T°, info_V0_CN1: InfoField_faafd1d5_T°, hf_V0_CN2: HopField_faafd1d5_T°, buffer_V0_CN3: []byte°, res_V0_CN4: []byte°
  var res_V0_CN4: Slice[Ref]
  var buffer_V0_CN3: Slice[Ref]
  var hf_V0_CN2: Tuple6[Bool, Bool, Int, Int, Int, Emb_6_Intbyte$$$$_E_$$$]
  var info_V0_CN1: Tuple4[Bool, Bool, Int, Int]
  var h_V0_CN0: Tuple2[Ref, Types]
  
  
  var fn$$6_activation: Bool
  var fn$$6_0: Slice[Ref]
  var fn$$6_1: Int
  var fn$$6_2: Int
  var fn$$6_3: Perm
  fn$$6_activation := false
  
  // init h_V0_CN0
  inhale h_V0_CN0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // init info_V0_CN1
  inhale (get0of4(info_V0_CN1): Bool) == false
  inhale (get1of4(info_V0_CN1): Bool) == false
  inhale (get2of4(info_V0_CN1): Int) == 0
  inhale (get3of4(info_V0_CN1): Int) == 0
  
  // init hf_V0_CN2
  inhale (get0of6(hf_V0_CN2): Bool) == false
  inhale (get1of6(hf_V0_CN2): Bool) == false
  inhale (get2of6(hf_V0_CN2): Int) == 0
  inhale (get3of6(hf_V0_CN2): Int) == 0
  inhale (get4of6(hf_V0_CN2): Int) == 0
  var fn$$0: Emb_6_Intbyte$$$$_E_$$$
  var fn$$1: Emb_6_Intbyte$$$$_E_$$$
  fn$$0 := (get5of6(hf_V0_CN2): Emb_6_Intbyte$$$$_E_$$$)
  fn$$1 := arrayDefault_6_Intbyte$$$$_E_$$$()
  inhale (forall fn$$2: Int :: { unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$0)[fn$$2] } { unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$1)[fn$$2] } 0 <= fn$$2 && fn$$2 < 6 ==> unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$0)[fn$$2] == unbox_Emb_6_Intbyte$$$$_E_$$$_Seq_Int(fn$$1)[fn$$2])
  
  // init buffer_V0_CN3
  inhale buffer_V0_CN3 == sliceDefault_Intbyte$$$_S_$$$()
  
  // init res_V0_CN4
  inhale res_V0_CN4 == sliceDefault_Intbyte$$$_S_$$$()
  
  // h_V0_CN0 = h_V0
  h_V0_CN0 := h_V0
  
  // info_V0_CN1 = info_V0
  info_V0_CN1 := info_V0
  
  // hf_V0_CN2 = hf_V0
  hf_V0_CN2 := hf_V0
  
  // buffer_V0_CN3 = buffer_V0
  buffer_V0_CN3 := buffer_V0
  
  // decl N11: []byte°
  var N11: Slice[Ref]
  
  // if(len(buffer_V0_CN3) < MACBufferSize_faafd1d5_G) {...} else {...}
  if ((slen(buffer_V0_CN3): Int) < constant_MACBufferSize_faafd1d5_G()) {
    
    // decl N6: []byte°
    var N6: Slice[Ref]
    
    // N6 = make([]byte, MACBufferSize_faafd1d5_G)
    var fn$$3: Slice[Ref]
    exhale true && 0 <= constant_MACBufferSize_faafd1d5_G() && 0 <= constant_MACBufferSize_faafd1d5_G() && constant_MACBufferSize_faafd1d5_G() <= constant_MACBufferSize_faafd1d5_G()
    inhale true && (forall fn$$4: Int :: { (ShArrayloc((sarray(fn$$3): ShArray[Ref]), sadd((soffset(fn$$3): Int), fn$$4)): Ref) } 0 <= fn$$4 && fn$$4 < (scap(fn$$3): Int) ==> acc((ShArrayloc((sarray(fn$$3): ShArray[Ref]), sadd((soffset(fn$$3): Int), fn$$4)): Ref).val$_Int, write))
    inhale (scap(fn$$3): Int) == constant_MACBufferSize_faafd1d5_G()
    inhale (slen(fn$$3): Int) == constant_MACBufferSize_faafd1d5_G()
    inhale (forall fn$$5: Int :: { (ShArrayloc((sarray(fn$$3): ShArray[Ref]), sadd((soffset(fn$$3): Int), fn$$5)): Ref) } 0 <= fn$$5 && fn$$5 < constant_MACBufferSize_faafd1d5_G() ==> (ShArrayloc((sarray(fn$$3): ShArray[Ref]), sadd((soffset(fn$$3): Int), fn$$5)): Ref).val$_Int == 0)
    N6 := fn$$3
    
    // buffer_V0_CN3 = N6
    buffer_V0_CN3 := N6
    
    // fold acc(AbsSlice_Bytes_88c2f8cc_F(buffer_V0_CN3, 0, len(buffer_V0_CN3)))
    fold acc(AbsSlice_Bytes_88c2f8cc_F(buffer_V0_CN3, 0, (slen(buffer_V0_CN3): Int)), write)
  }
  
  // h_V0_CN0Reset()
  assert !true || true
  Reset_6f559e0_SY$353949c1_6f559e0_(h_V0_CN0)
  
  // MACInput_faafd1d5_F(info_V0_CN1.SegIDA, info_V0_CN1.TimestampA, hf_V0_CN2.ExpTimeA, hf_V0_CN2.ConsIngressA, hf_V0_CN2.ConsEgressA, buffer_V0_CN3)
  assert !true || true
  MACInput_faafd1d5_F((get2of4(info_V0_CN1): Int), (get3of4(info_V0_CN1): Int), (get2of6(hf_V0_CN2): Int), (get3of6(hf_V0_CN2): Int), (get4of6(hf_V0_CN2): Int), buffer_V0_CN3)
  
  // unfold acc(AbsSlice_Bytes_88c2f8cc_F(buffer_V0_CN3, 0, len(buffer_V0_CN3)))
  unfold acc(AbsSlice_Bytes_88c2f8cc_F(buffer_V0_CN3, 0, (slen(buffer_V0_CN3): Int)), write)
  
  // defer fold acc(AbsSlice_Bytes_88c2f8cc_F(buffer_V0_CN3, 0, len(buffer_V0_CN3)))
  fn$$6_0 := buffer_V0_CN3
  fn$$6_1 := 0
  fn$$6_2 := (slen(buffer_V0_CN3): Int)
  fn$$6_3 := write
  fn$$6_activation := true
  
  // decl N7: int°, N8: error_a4af0e5e_T°, N9: int°, err_V1: error_a4af0e5e_T°
  var err_V1: Tuple2[Ref, Types]
  var N9: Int
  var N8: Tuple2[Ref, Types]
  var N7: Int
  
  // N7, N8 = h_V0_CN0Write(buffer_V0_CN3)
  assert !true || true
  N7, N8 := Write_6f559e0_SY$353949c1_6f559e0_(h_V0_CN0, buffer_V0_CN3)
  
  // init err_V1
  inhale err_V1 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // N9 = N7
  N9 := N7
  
  // err_V1 = N8
  err_V1 := N8
  
  // if(err_V1 != (nil:error_a4af0e5e_T)) {...} else {...}
  if (!assertArg2_Bool(comparableInterface(err_V1) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), err_V1 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))) {
    
    // decl 
    
    // panic_a4af0e5e_F(err_V1)
    assert !true || false
    panic_a4af0e5e_F(err_V1)
  }
  
  // assert h_V0_CN0.Size() >= 16
  assert Size_6f559e0_SY$353949c1_6f559e0_(h_V0_CN0) >= 16
  
  // N11 = h_V0_CN0Sum(buffer_V0_CN3[0:0])
  assert !true || true
  N11 := Sum_6f559e0_SY$353949c1_6f559e0_(h_V0_CN0, ssliceFromSlice_Ref(buffer_V0_CN3, 0, 0))
  
  // res_V0_CN4 = N11[0:16]
  res_V0_CN4 := ssliceFromSlice_Ref(N11, 0, 16)
  
  // fold acc(AbsSlice_Bytes_88c2f8cc_F(res_V0_CN4, 0, MACBufferSize_faafd1d5_G))
  fold acc(AbsSlice_Bytes_88c2f8cc_F(res_V0_CN4, 0, constant_MACBufferSize_faafd1d5_G()), write)
  
  // res_V0_CN4 = res_V0_CN4
  res_V0_CN4 := res_V0_CN4
  
  // return
  goto returnLabel
  label returnLabel
  if (fn$$6_activation) {
    
    // fold acc(AbsSlice_Bytes_88c2f8cc_F(fn$$6_0, fn$$6_1, fn$$6_2), fn$$6_3)
    fold acc(AbsSlice_Bytes_88c2f8cc_F(fn$$6_0, fn$$6_1, fn$$6_2), fn$$6_3)
  }
  
  // res_V0 = res_V0_CN4
  res_V0 := res_V0_CN4
}

// decreases 
method MACInput_faafd1d5_F(segID_V0: Int, timestamp_V0: Int, expTime_V0: Int, consIngress_V0: Int, consEgress_V0: Int, buffer_V0: Slice[Ref])
  requires (slen(buffer_V0): Int) >= constant_MACBufferSize_faafd1d5_G()
  requires acc(AbsSlice_Bytes_88c2f8cc_F(buffer_V0, 0, (slen(buffer_V0): Int)), write)
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(buffer_V0, 0, (slen(buffer_V0): Int)), write)
{
  
  // decl segID_V0_CN0: uint16°, timestamp_V0_CN1: uint32°, expTime_V0_CN2: uint8°, consIngress_V0_CN3: uint16°, consEgress_V0_CN4: uint16°, buffer_V0_CN5: []byte°
  var buffer_V0_CN5: Slice[Ref]
  var consEgress_V0_CN4: Int
  var consIngress_V0_CN3: Int
  var expTime_V0_CN2: Int
  var timestamp_V0_CN1: Int
  var segID_V0_CN0: Int
  
  
  
  // init segID_V0_CN0
  inhale segID_V0_CN0 == 0
  
  // init timestamp_V0_CN1
  inhale timestamp_V0_CN1 == 0
  
  // init expTime_V0_CN2
  inhale expTime_V0_CN2 == 0
  
  // init consIngress_V0_CN3
  inhale consIngress_V0_CN3 == 0
  
  // init consEgress_V0_CN4
  inhale consEgress_V0_CN4 == 0
  
  // init buffer_V0_CN5
  inhale buffer_V0_CN5 == sliceDefault_Intbyte$$$_S_$$$()
  
  // segID_V0_CN0 = segID_V0
  segID_V0_CN0 := segID_V0
  
  // timestamp_V0_CN1 = timestamp_V0
  timestamp_V0_CN1 := timestamp_V0
  
  // expTime_V0_CN2 = expTime_V0
  expTime_V0_CN2 := expTime_V0
  
  // consIngress_V0_CN3 = consIngress_V0
  consIngress_V0_CN3 := consIngress_V0
  
  // consEgress_V0_CN4 = consEgress_V0
  consEgress_V0_CN4 := consEgress_V0
  
  // buffer_V0_CN5 = buffer_V0
  buffer_V0_CN5 := buffer_V0
  
  // decl 
  
  // unfold acc(AbsSlice_Bytes_88c2f8cc_F(buffer_V0_CN5, 0, len(buffer_V0_CN5)))
  unfold acc(AbsSlice_Bytes_88c2f8cc_F(buffer_V0_CN5, 0, (slen(buffer_V0_CN5): Int)), write)
  
  // assert &buffer_V0_CN5[0:2][0] == &buffer_V0_CN5[0] && &buffer_V0_CN5[0:2][1] == &buffer_V0_CN5[1]
  assert (ShArrayloc((sarray(ssliceFromSlice_Ref(buffer_V0_CN5, 0, 2)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(buffer_V0_CN5, 0, 2)): Int), 0)): Ref) == (ShArrayloc((sarray(buffer_V0_CN5): ShArray[Ref]), sadd((soffset(buffer_V0_CN5): Int), 0)): Ref) && (ShArrayloc((sarray(ssliceFromSlice_Ref(buffer_V0_CN5, 0, 2)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(buffer_V0_CN5, 0, 2)): Int), 1)): Ref) == (ShArrayloc((sarray(buffer_V0_CN5): ShArray[Ref]), sadd((soffset(buffer_V0_CN5): Int), 1)): Ref)
  
  // BigEndian_bf01f2a6_GPutUint16(buffer_V0_CN5[0:2], 0)
  assert !true || true
  PutUint16_bf01f2a6_MbigEndian(constant_BigEndian_bf01f2a6_G(), ssliceFromSlice_Ref(buffer_V0_CN5, 0, 2), 0)
  
  // assert &buffer_V0_CN5[2:4][0] == &buffer_V0_CN5[2] && &buffer_V0_CN5[2:4][1] == &buffer_V0_CN5[3]
  assert (ShArrayloc((sarray(ssliceFromSlice_Ref(buffer_V0_CN5, 2, 4)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(buffer_V0_CN5, 2, 4)): Int), 0)): Ref) == (ShArrayloc((sarray(buffer_V0_CN5): ShArray[Ref]), sadd((soffset(buffer_V0_CN5): Int), 2)): Ref) && (ShArrayloc((sarray(ssliceFromSlice_Ref(buffer_V0_CN5, 2, 4)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(buffer_V0_CN5, 2, 4)): Int), 1)): Ref) == (ShArrayloc((sarray(buffer_V0_CN5): ShArray[Ref]), sadd((soffset(buffer_V0_CN5): Int), 3)): Ref)
  
  // BigEndian_bf01f2a6_GPutUint16(buffer_V0_CN5[2:4], segID_V0_CN0)
  assert !true || true
  PutUint16_bf01f2a6_MbigEndian(constant_BigEndian_bf01f2a6_G(), ssliceFromSlice_Ref(buffer_V0_CN5, 2, 4), segID_V0_CN0)
  
  // assert &buffer_V0_CN5[4:8][0] == &buffer_V0_CN5[4] && &buffer_V0_CN5[4:8][1] == &buffer_V0_CN5[5]
  assert (ShArrayloc((sarray(ssliceFromSlice_Ref(buffer_V0_CN5, 4, 8)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(buffer_V0_CN5, 4, 8)): Int), 0)): Ref) == (ShArrayloc((sarray(buffer_V0_CN5): ShArray[Ref]), sadd((soffset(buffer_V0_CN5): Int), 4)): Ref) && (ShArrayloc((sarray(ssliceFromSlice_Ref(buffer_V0_CN5, 4, 8)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(buffer_V0_CN5, 4, 8)): Int), 1)): Ref) == (ShArrayloc((sarray(buffer_V0_CN5): ShArray[Ref]), sadd((soffset(buffer_V0_CN5): Int), 5)): Ref)
  
  // assert &buffer_V0_CN5[4:8][2] == &buffer_V0_CN5[6] && &buffer_V0_CN5[4:8][3] == &buffer_V0_CN5[7]
  assert (ShArrayloc((sarray(ssliceFromSlice_Ref(buffer_V0_CN5, 4, 8)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(buffer_V0_CN5, 4, 8)): Int), 2)): Ref) == (ShArrayloc((sarray(buffer_V0_CN5): ShArray[Ref]), sadd((soffset(buffer_V0_CN5): Int), 6)): Ref) && (ShArrayloc((sarray(ssliceFromSlice_Ref(buffer_V0_CN5, 4, 8)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(buffer_V0_CN5, 4, 8)): Int), 3)): Ref) == (ShArrayloc((sarray(buffer_V0_CN5): ShArray[Ref]), sadd((soffset(buffer_V0_CN5): Int), 7)): Ref)
  
  // BigEndian_bf01f2a6_GPutUint32(buffer_V0_CN5[4:8], timestamp_V0_CN1)
  assert !true || true
  PutUint32_bf01f2a6_MbigEndian(constant_BigEndian_bf01f2a6_G(), ssliceFromSlice_Ref(buffer_V0_CN5, 4, 8), timestamp_V0_CN1)
  
  // buffer_V0_CN5[8] = 0
  (ShArrayloc((sarray(buffer_V0_CN5): ShArray[Ref]), sadd((soffset(buffer_V0_CN5): Int), 8)): Ref).val$_Int := 0
  
  // buffer_V0_CN5[9] = expTime_V0_CN2
  (ShArrayloc((sarray(buffer_V0_CN5): ShArray[Ref]), sadd((soffset(buffer_V0_CN5): Int), 9)): Ref).val$_Int := expTime_V0_CN2
  
  // assert &buffer_V0_CN5[10:12][0] == &buffer_V0_CN5[10] && &buffer_V0_CN5[10:12][1] == &buffer_V0_CN5[11]
  assert (ShArrayloc((sarray(ssliceFromSlice_Ref(buffer_V0_CN5, 10, 12)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(buffer_V0_CN5, 10, 12)): Int), 0)): Ref) == (ShArrayloc((sarray(buffer_V0_CN5): ShArray[Ref]), sadd((soffset(buffer_V0_CN5): Int), 10)): Ref) && (ShArrayloc((sarray(ssliceFromSlice_Ref(buffer_V0_CN5, 10, 12)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(buffer_V0_CN5, 10, 12)): Int), 1)): Ref) == (ShArrayloc((sarray(buffer_V0_CN5): ShArray[Ref]), sadd((soffset(buffer_V0_CN5): Int), 11)): Ref)
  
  // BigEndian_bf01f2a6_GPutUint16(buffer_V0_CN5[10:12], consIngress_V0_CN3)
  assert !true || true
  PutUint16_bf01f2a6_MbigEndian(constant_BigEndian_bf01f2a6_G(), ssliceFromSlice_Ref(buffer_V0_CN5, 10, 12), consIngress_V0_CN3)
  
  // assert &buffer_V0_CN5[12:14][0] == &buffer_V0_CN5[12] && &buffer_V0_CN5[12:14][1] == &buffer_V0_CN5[13]
  assert (ShArrayloc((sarray(ssliceFromSlice_Ref(buffer_V0_CN5, 12, 14)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(buffer_V0_CN5, 12, 14)): Int), 0)): Ref) == (ShArrayloc((sarray(buffer_V0_CN5): ShArray[Ref]), sadd((soffset(buffer_V0_CN5): Int), 12)): Ref) && (ShArrayloc((sarray(ssliceFromSlice_Ref(buffer_V0_CN5, 12, 14)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(buffer_V0_CN5, 12, 14)): Int), 1)): Ref) == (ShArrayloc((sarray(buffer_V0_CN5): ShArray[Ref]), sadd((soffset(buffer_V0_CN5): Int), 13)): Ref)
  
  // BigEndian_bf01f2a6_GPutUint16(buffer_V0_CN5[12:14], consEgress_V0_CN4)
  assert !true || true
  PutUint16_bf01f2a6_MbigEndian(constant_BigEndian_bf01f2a6_G(), ssliceFromSlice_Ref(buffer_V0_CN5, 12, 14), consEgress_V0_CN4)
  
  // assert &buffer_V0_CN5[14:16][0] == &buffer_V0_CN5[14] && &buffer_V0_CN5[14:16][1] == &buffer_V0_CN5[15]
  assert (ShArrayloc((sarray(ssliceFromSlice_Ref(buffer_V0_CN5, 14, 16)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(buffer_V0_CN5, 14, 16)): Int), 0)): Ref) == (ShArrayloc((sarray(buffer_V0_CN5): ShArray[Ref]), sadd((soffset(buffer_V0_CN5): Int), 14)): Ref) && (ShArrayloc((sarray(ssliceFromSlice_Ref(buffer_V0_CN5, 14, 16)): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(buffer_V0_CN5, 14, 16)): Int), 1)): Ref) == (ShArrayloc((sarray(buffer_V0_CN5): ShArray[Ref]), sadd((soffset(buffer_V0_CN5): Int), 15)): Ref)
  
  // BigEndian_bf01f2a6_GPutUint16(buffer_V0_CN5[14:16], 0)
  assert !true || true
  PutUint16_bf01f2a6_MbigEndian(constant_BigEndian_bf01f2a6_G(), ssliceFromSlice_Ref(buffer_V0_CN5, 14, 16), 0)
  
  // fold acc(AbsSlice_Bytes_88c2f8cc_F(buffer_V0_CN5, 0, len(buffer_V0_CN5)))
  fold acc(AbsSlice_Bytes_88c2f8cc_F(buffer_V0_CN5, 0, (slen(buffer_V0_CN5): Int)), write)
  label returnLabel
}

// decreases 
method String_faafd1d5_MType(t_V0: Int) returns (P0_PO0: Int)
  requires 0 <= t_V0 && t_V0 < constant_maxPathType_faafd1d5_G()
  requires acc(PathPackageMem_faafd1d5_F(), constant_ReadL20_b40dce56_G())
  ensures acc(PathPackageMem_faafd1d5_F(), constant_ReadL20_b40dce56_G())
{
  inhale P0_PO0 == stringLit()
  
  // decl t_V0_CN0: Type_faafd1d5_T°
  var t_V0_CN0: Int
  
  
  var fn$$0_activation: Bool
  var fn$$0_0: Perm
  fn$$0_activation := false
  
  // init t_V0_CN0
  inhale t_V0_CN0 == 0
  
  // t_V0_CN0 = t_V0
  t_V0_CN0 := t_V0
  
  // decl pm_V1: metadata_faafd1d5_T°, N2: string°
  var N2: Int
  var pm_V1: Tuple2[Bool, Tuple3[Int, Int, Closure]]
  
  // unfold acc(PathPackageMem_faafd1d5_F(), ReadL20_b40dce56_G)
  unfold acc(PathPackageMem_faafd1d5_F(), constant_ReadL20_b40dce56_G())
  
  // defer fold acc(PathPackageMem_faafd1d5_F(), ReadL20_b40dce56_G)
  fn$$0_0 := constant_ReadL20_b40dce56_G()
  fn$$0_activation := true
  
  // init pm_V1
  inhale (get0of2(pm_V1): Bool) == false
  inhale (get0of3((get1of2(pm_V1): Tuple3[Int, Int, Closure])): Int) == 0
  inhale (get1of3((get1of2(pm_V1): Tuple3[Int, Int, Closure])): Int) == stringLit()
  inhale (get2of3((get1of2(pm_V1): Tuple3[Int, Int, Closure])): Closure) == closureNil()
  
  // pm_V1 = registeredPaths[t_V0_CN0]
  pm_V1 := (tuple2((ShStructget0of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), t_V0_CN0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): Ref).val$_Bool, (tuple3((ShStructget0of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), t_V0_CN0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int, (ShStructget1of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), t_V0_CN0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int, (ShStructget2of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), t_V0_CN0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Closure): Tuple3[Int, Int, Closure])): Tuple2[Bool, Tuple3[Int, Int, Closure]])
  
  // if(!pm_V1.inUseA) {...} else {...}
  if (!(get0of2(pm_V1): Bool)) {
    
    // decl N1: string°
    var N1: Int
    
    // N1 = Sprintf_1402f601_F("UNKNOWN (%d)", []interface(name is empty_interface) { 0:toInterface(t_V0_CN0) })
    var fn$$3: Emb_1_Interfaceempty_interface$$$_S_$$$
    var fn$$4: Emb_1_Interfaceempty_interface$$$$_E_$$$
    var fn$$1: Emb_1_Interfaceempty_interface$$$_S_$$$
    fn$$3 := fn$$1
    fn$$4 := arrayDefault_1_Interfaceempty_interface$$$$_E_$$$()
    inhale true && (forall fn$$2: Int :: { (ShArrayloc(unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), fn$$2): Ref) } 0 <= fn$$2 && fn$$2 < 1 ==> acc((ShArrayloc(unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), fn$$2): Ref).val$_Tuple2_RefTypes, write)) && ((forall fn$$5: Int :: { (ShArrayloc(unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$3), fn$$5): Ref) } { unbox_Emb_1_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$4)[fn$$5] } 0 <= fn$$5 && fn$$5 < 1 ==> (ShArrayloc(unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$3), fn$$5): Ref).val$_Tuple2_RefTypes == unbox_Emb_1_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$4)[fn$$5]) && !(fn$$1 == box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(arrayNil_1_Interfaceempty_interface$$$_S_$$$())))
    var fn$$7: Emb_1_Interfaceempty_interface$$$_S_$$$
    var fn$$8: Emb_1_Interfaceempty_interface$$$$_E_$$$
    fn$$7 := fn$$1
    fn$$8 := box_Emb_1_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(Seq((tuple2((box_Poly(t_V0_CN0): Ref), Type_faafd1d5_T_Types()): Tuple2[Ref, Types])))
    exhale true && (forall fn$$6: Int :: { (ShArrayloc(unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), fn$$6): Ref) } 0 <= fn$$6 && fn$$6 < 1 ==> acc((ShArrayloc(unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), fn$$6): Ref).val$_Tuple2_RefTypes, write))
    inhale true && (forall fn$$6: Int :: { (ShArrayloc(unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), fn$$6): Ref) } 0 <= fn$$6 && fn$$6 < 1 ==> acc((ShArrayloc(unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), fn$$6): Ref).val$_Tuple2_RefTypes, write)) && (forall fn$$9: Int :: { (ShArrayloc(unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$7), fn$$9): Ref) } { unbox_Emb_1_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$8)[fn$$9] } 0 <= fn$$9 && fn$$9 < 1 ==> (ShArrayloc(unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$7), fn$$9): Ref).val$_Tuple2_RefTypes == unbox_Emb_1_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$8)[fn$$9])
    assert !true || true
    N1 := Sprintf_1402f601_F(stringLit554e4b4e4f574e2028256429(), ssliceFromArray_Ref(unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), 0, 1))
    
    // P0_PO0 = N1
    P0_PO0 := N1
    
    // return
    goto returnLabel
  }
  
  // N2 = Sprintf_1402f601_F("%v (%d)", []interface(name is empty_interface) { 0:toInterface(pm_V1.MetadataA.DescA), 1:toInterface(t_V0_CN0) })
  var fn$$12: Emb_2_Interfaceempty_interface$$$_S_$$$
  var fn$$13: Emb_2_Interfaceempty_interface$$$$_E_$$$
  var fn$$10: Emb_2_Interfaceempty_interface$$$_S_$$$
  fn$$12 := fn$$10
  fn$$13 := arrayDefault_2_Interfaceempty_interface$$$$_E_$$$()
  inhale true && (forall fn$$11: Int :: { (ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$10), fn$$11): Ref) } 0 <= fn$$11 && fn$$11 < 2 ==> acc((ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$10), fn$$11): Ref).val$_Tuple2_RefTypes, write)) && ((forall fn$$14: Int :: { (ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$12), fn$$14): Ref) } { unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$13)[fn$$14] } 0 <= fn$$14 && fn$$14 < 2 ==> (ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$12), fn$$14): Ref).val$_Tuple2_RefTypes == unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$13)[fn$$14]) && !(fn$$10 == box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(arrayNil_2_Interfaceempty_interface$$$_S_$$$())))
  var fn$$16: Emb_2_Interfaceempty_interface$$$_S_$$$
  var fn$$17: Emb_2_Interfaceempty_interface$$$$_E_$$$
  fn$$16 := fn$$10
  fn$$17 := box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(Seq((tuple2((box_Poly((get1of3((get1of2(pm_V1): Tuple3[Int, Int, Closure])): Int)): Ref), string_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly(t_V0_CN0): Ref), Type_faafd1d5_T_Types()): Tuple2[Ref, Types])))
  exhale true && (forall fn$$15: Int :: { (ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$10), fn$$15): Ref) } 0 <= fn$$15 && fn$$15 < 2 ==> acc((ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$10), fn$$15): Ref).val$_Tuple2_RefTypes, write))
  inhale true && (forall fn$$15: Int :: { (ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$10), fn$$15): Ref) } 0 <= fn$$15 && fn$$15 < 2 ==> acc((ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$10), fn$$15): Ref).val$_Tuple2_RefTypes, write)) && (forall fn$$18: Int :: { (ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$16), fn$$18): Ref) } { unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$17)[fn$$18] } 0 <= fn$$18 && fn$$18 < 2 ==> (ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$16), fn$$18): Ref).val$_Tuple2_RefTypes == unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$17)[fn$$18])
  assert !true || true
  N2 := Sprintf_1402f601_F(stringLit25762028256429(), ssliceFromArray_Ref(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$10), 0, 2))
  
  // P0_PO0 = N2
  P0_PO0 := N2
  
  // return
  goto returnLabel
  label returnLabel
  if (fn$$0_activation) {
    
    // fold acc(PathPackageMem_faafd1d5_F(), fn$$0_0)
    fold acc(PathPackageMem_faafd1d5_F(), fn$$0_0)
  }
}

// decreases 
method RegisterPath_faafd1d5_F(pathMeta_V0: Tuple3[Int, Int, Closure])
  requires 0 <= (get0of3(pathMeta_V0): Int) && (get0of3(pathMeta_V0): Int) < constant_maxPathType_faafd1d5_G()
  requires acc(PathPackageMem_faafd1d5_F(), write)
  requires !Registered_faafd1d5_F((get0of3(pathMeta_V0): Int))
  requires closureImplements$NewPathSpec_faafd1d5_F$((get2of3(pathMeta_V0): Closure))
  ensures acc(PathPackageMem_faafd1d5_F(), write)
  ensures (forall t_V1: Int :: { Registered_faafd1d5_F(t_V1) } 0 <= t_V1 && t_V1 < constant_maxPathType_faafd1d5_G() ==> !(t_V1 == (get0of3(pathMeta_V0): Int)) ==> old(Registered_faafd1d5_F(t_V1)) == Registered_faafd1d5_F(t_V1))
  ensures Registered_faafd1d5_F((get0of3(pathMeta_V0): Int))
{
  
  // decl pathMeta_V0_CN0: Metadata_faafd1d5_T°
  var pathMeta_V0_CN0: Tuple3[Int, Int, Closure]
  
  
  
  // init pathMeta_V0_CN0
  inhale (get0of3(pathMeta_V0_CN0): Int) == 0
  inhale (get1of3(pathMeta_V0_CN0): Int) == stringLit()
  inhale (get2of3(pathMeta_V0_CN0): Closure) == closureNil()
  
  // pathMeta_V0_CN0 = pathMeta_V0
  pathMeta_V0_CN0 := pathMeta_V0
  
  // decl pm_V2: metadata_faafd1d5_T°
  var pm_V2: Tuple2[Bool, Tuple3[Int, Int, Closure]]
  
  // unfold acc(PathPackageMem_faafd1d5_F())
  unfold acc(PathPackageMem_faafd1d5_F(), write)
  
  // init pm_V2
  inhale (get0of2(pm_V2): Bool) == false
  inhale (get0of3((get1of2(pm_V2): Tuple3[Int, Int, Closure])): Int) == 0
  inhale (get1of3((get1of2(pm_V2): Tuple3[Int, Int, Closure])): Int) == stringLit()
  inhale (get2of3((get1of2(pm_V2): Tuple3[Int, Int, Closure])): Closure) == closureNil()
  
  // pm_V2 = registeredPaths[pathMeta_V0_CN0.TypeA]
  pm_V2 := (tuple2((ShStructget0of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), (get0of3(pathMeta_V0_CN0): Int)): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): Ref).val$_Bool, (tuple3((ShStructget0of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), (get0of3(pathMeta_V0_CN0): Int)): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int, (ShStructget1of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), (get0of3(pathMeta_V0_CN0): Int)): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int, (ShStructget2of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), (get0of3(pathMeta_V0_CN0): Int)): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Closure): Tuple3[Int, Int, Closure])): Tuple2[Bool, Tuple3[Int, Int, Closure]])
  
  // if(pm_V2.inUseA) {...} else {...}
  if ((get0of2(pm_V2): Bool)) {
    
    // decl 
    
    // panic_a4af0e5e_F(toInterface("path type already registered"))
    assert !true || false
    panic_a4af0e5e_F((tuple2((box_Poly(stringLit70617468207479706520616c72656164792072656769737465726564()): Ref), string_Types()): Tuple2[Ref, Types]))
  }
  
  // registeredPaths[pathMeta_V0_CN0.TypeA].inUseA = true
  (ShStructget0of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), (get0of3(pathMeta_V0_CN0): Int)): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): Ref).val$_Bool := true
  
  // registeredPaths[pathMeta_V0_CN0.TypeA].MetadataA = pathMeta_V0_CN0
  (ShStructget0of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), (get0of3(pathMeta_V0_CN0): Int)): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int := (get0of3(pathMeta_V0_CN0): Int)
  (ShStructget1of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), (get0of3(pathMeta_V0_CN0): Int)): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int := (get1of3(pathMeta_V0_CN0): Int)
  (ShStructget2of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), (get0of3(pathMeta_V0_CN0): Int)): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Closure := (get2of3(pathMeta_V0_CN0): Closure)
  
  // fold acc(PathPackageMem_faafd1d5_F())
  fold acc(PathPackageMem_faafd1d5_F(), write)
  label returnLabel
}

// decreases 
method StrictDecoding_faafd1d5_F(strict_V0: Bool)
  requires acc(PathPackageMem_faafd1d5_F(), write)
  ensures acc(PathPackageMem_faafd1d5_F(), write)
{
  
  // decl strict_V0_CN0: bool°
  var strict_V0_CN0: Bool
  
  
  
  // init strict_V0_CN0
  inhale strict_V0_CN0 == false
  
  // strict_V0_CN0 = strict_V0
  strict_V0_CN0 := strict_V0
  
  // decl 
  
  // unfold acc(PathPackageMem_faafd1d5_F())
  unfold acc(PathPackageMem_faafd1d5_F(), write)
  
  // strictDecoding = strict_V0_CN0
  strictDecoding_faafd1d5_G().val$_Bool := strict_V0_CN0
  
  // fold acc(PathPackageMem_faafd1d5_F())
  fold acc(PathPackageMem_faafd1d5_F(), write)
  label returnLabel
}

// decreases 
method NewPath_faafd1d5_F(pathType_V0: Int) returns (p_V0: Tuple2[Ref, Types], e_V0: Tuple2[Ref, Types])
  requires 0 <= pathType_V0 && pathType_V0 < constant_maxPathType_faafd1d5_G()
  requires acc(PathPackageMem_faafd1d5_F(), constant_ReadL20_b40dce56_G())
  ensures acc(PathPackageMem_faafd1d5_F(), constant_ReadL20_b40dce56_G())
  ensures !assertArg2_Bool(comparableInterface(e_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> acc(dynamic_pred_3(e_V0), write)
  ensures assertArg2_Bool(comparableInterface(e_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> !assertArg2_Bool(comparableInterface(p_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), p_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) && acc(dynamic_pred_0(p_V0), write)
{
  inhale p_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  inhale e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // decl pathType_V0_CN0: Type_faafd1d5_T°, p_V0_CN1: Path_faafd1d5_T°, e_V0_CN2: error_a4af0e5e_T°
  var e_V0_CN2: Tuple2[Ref, Types]
  var p_V0_CN1: Tuple2[Ref, Types]
  var pathType_V0_CN0: Int
  
  
  var fn$$0_activation: Bool
  var fn$$0_0: Perm
  fn$$0_activation := false
  
  // init pathType_V0_CN0
  inhale pathType_V0_CN0 == 0
  
  // init p_V0_CN1
  inhale p_V0_CN1 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // init e_V0_CN2
  inhale e_V0_CN2 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // pathType_V0_CN0 = pathType_V0
  pathType_V0_CN0 := pathType_V0
  
  // decl pm_V1: metadata_faafd1d5_T°, N5: Path_faafd1d5_T°, tmp_V1: Path_faafd1d5_T°
  var tmp_V1: Tuple2[Ref, Types]
  var N5: Tuple2[Ref, Types]
  var pm_V1: Tuple2[Bool, Tuple3[Int, Int, Closure]]
  
  // unfold acc(PathPackageMem_faafd1d5_F(), ReadL20_b40dce56_G)
  unfold acc(PathPackageMem_faafd1d5_F(), constant_ReadL20_b40dce56_G())
  
  // defer fold acc(PathPackageMem_faafd1d5_F(), ReadL20_b40dce56_G)
  fn$$0_0 := constant_ReadL20_b40dce56_G()
  fn$$0_activation := true
  
  // init pm_V1
  inhale (get0of2(pm_V1): Bool) == false
  inhale (get0of3((get1of2(pm_V1): Tuple3[Int, Int, Closure])): Int) == 0
  inhale (get1of3((get1of2(pm_V1): Tuple3[Int, Int, Closure])): Int) == stringLit()
  inhale (get2of3((get1of2(pm_V1): Tuple3[Int, Int, Closure])): Closure) == closureNil()
  
  // pm_V1 = registeredPaths[pathType_V0_CN0]
  pm_V1 := (tuple2((ShStructget0of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), pathType_V0_CN0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): Ref).val$_Bool, (tuple3((ShStructget0of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), pathType_V0_CN0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int, (ShStructget1of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), pathType_V0_CN0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int, (ShStructget2of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), pathType_V0_CN0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Closure): Tuple3[Int, Int, Closure])): Tuple2[Bool, Tuple3[Int, Int, Closure]])
  
  // if(!pm_V1.inUseA) {...} else {...}
  if (!(get0of2(pm_V1): Bool)) {
    
    // decl N4: *rawPath_faafd1d5_T°, tmp_V2: *rawPath_faafd1d5_T°
    var tmp_V2: ShStruct2[Ref, Ref]
    var N4: ShStruct2[Ref, Ref]
    
    // if(strictDecoding) {...} else {...}
    if (strictDecoding_faafd1d5_G().val$_Bool) {
      
      // decl N3: error_a4af0e5e_T°
      var N3: Tuple2[Ref, Types]
      
      // N3 = New_a58fd4a8_F("unsupported path", []interface(name is empty_interface) { 0:toInterface("type"), 1:toInterface(uint8(pathType_V0_CN0)) })
      var fn$$3: Emb_2_Interfaceempty_interface$$$_S_$$$
      var fn$$4: Emb_2_Interfaceempty_interface$$$$_E_$$$
      var fn$$1: Emb_2_Interfaceempty_interface$$$_S_$$$
      fn$$3 := fn$$1
      fn$$4 := arrayDefault_2_Interfaceempty_interface$$$$_E_$$$()
      inhale true && (forall fn$$2: Int :: { (ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), fn$$2): Ref) } 0 <= fn$$2 && fn$$2 < 2 ==> acc((ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), fn$$2): Ref).val$_Tuple2_RefTypes, write)) && ((forall fn$$5: Int :: { (ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$3), fn$$5): Ref) } { unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$4)[fn$$5] } 0 <= fn$$5 && fn$$5 < 2 ==> (ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$3), fn$$5): Ref).val$_Tuple2_RefTypes == unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$4)[fn$$5]) && !(fn$$1 == box_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(arrayNil_2_Interfaceempty_interface$$$_S_$$$())))
      var fn$$7: Emb_2_Interfaceempty_interface$$$_S_$$$
      var fn$$8: Emb_2_Interfaceempty_interface$$$$_E_$$$
      fn$$7 := fn$$1
      fn$$8 := box_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(Seq((tuple2((box_Poly(stringLit74797065()): Ref), string_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly(pathType_V0_CN0): Ref), byte_Types()): Tuple2[Ref, Types])))
      exhale true && (forall fn$$6: Int :: { (ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), fn$$6): Ref) } 0 <= fn$$6 && fn$$6 < 2 ==> acc((ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), fn$$6): Ref).val$_Tuple2_RefTypes, write))
      inhale true && (forall fn$$6: Int :: { (ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), fn$$6): Ref) } 0 <= fn$$6 && fn$$6 < 2 ==> acc((ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), fn$$6): Ref).val$_Tuple2_RefTypes, write)) && (forall fn$$9: Int :: { (ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$7), fn$$9): Ref) } { unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$8)[fn$$9] } 0 <= fn$$9 && fn$$9 < 2 ==> (ShArrayloc(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$7), fn$$9): Ref).val$_Tuple2_RefTypes == unbox_Emb_2_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$8)[fn$$9])
      assert !true || true
      N3 := New_a58fd4a8_F(stringLit756e737570706f727465642070617468(), ssliceFromArray_Ref(unbox_Emb_2_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$1), 0, 2))
      
      // p_V0_CN1 = (nil:Path_faafd1d5_T)
      p_V0_CN1 := (tuple2(null, nil_Types()): Tuple2[Ref, Types])
      
      // e_V0_CN2 = N3
      e_V0_CN2 := N3
      
      // return
      goto returnLabel
    }
    
    // N4 = new(rawPath_faafd1d5_T{dflt[[]byte], dflt[Type_faafd1d5_T]})
    var fn$$10: ShStruct2[Ref, Ref]
    inhale true && acc((ShStructget0of2(fn$$10): Ref).val$_Slice_Ref, write) && acc((ShStructget1of2(fn$$10): Ref).val$_Int, write) && (true && (ShStructget0of2(fn$$10): Ref).val$_Slice_Ref == (get0of2((tuple2(sliceDefault_Intbyte$$$_S_$$$(), 0): Tuple2[Slice[Ref], Int])): Slice[Ref]) && (ShStructget1of2(fn$$10): Ref).val$_Int == (get1of2((tuple2(sliceDefault_Intbyte$$$_S_$$$(), 0): Tuple2[Slice[Ref], Int])): Int))
    N4 := fn$$10
    
    // init tmp_V2
    inhale tmp_V2 == shStructDefault_$rawA_SliceIntbyte$$$_S_$$$$$$_S_$$$_pathTypeA_DefinedType_faafd1d5_T$$$_S_$$$$()
    
    // tmp_V2 = N4
    tmp_V2 := N4
    
    // fold acc(tmp_V2.NonInitMem())
    fold acc(dynamic_pred_0((tuple2((box_Poly(tmp_V2): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
    
    // p_V0_CN1 = toInterface(tmp_V2)
    p_V0_CN1 := (tuple2((box_Poly(tmp_V2): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])
    
    // e_V0_CN2 = (nil:error_a4af0e5e_T)
    e_V0_CN2 := (tuple2(null, nil_Types()): Tuple2[Ref, Types])
    
    // return
    goto returnLabel
  }
  
  // N5 = pm_V1.MetadataA.NewA() as NewPathSpec_faafd1d5_F{}
  
  // N5 = closureCall$NewPathSpec_faafd1d5_F$(pm_V1.MetadataA.NewA)
  assert !true || true
  N5 := closureCall$NewPathSpec_faafd1d5_F$((get2of3((get1of2(pm_V1): Tuple3[Int, Int, Closure])): Closure))
  
  // init tmp_V1
  inhale tmp_V1 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // tmp_V1 = N5
  tmp_V1 := N5
  
  // assume tmp_V1 != (nil:Path_faafd1d5_T)
  inhale !assertArg2_Bool(comparableInterface(tmp_V1) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), tmp_V1 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  
  // p_V0_CN1 = tmp_V1
  p_V0_CN1 := tmp_V1
  
  // e_V0_CN2 = (nil:error_a4af0e5e_T)
  e_V0_CN2 := (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // return
  goto returnLabel
  label returnLabel
  if (fn$$0_activation) {
    
    // fold acc(PathPackageMem_faafd1d5_F(), fn$$0_0)
    fold acc(PathPackageMem_faafd1d5_F(), fn$$0_0)
  }
  
  // p_V0 = p_V0_CN1
  p_V0 := p_V0_CN1
  
  // e_V0 = e_V0_CN2
  e_V0 := e_V0_CN2
}

// decreases 
method NewRawPath_faafd1d5_F() returns (p_V0: Tuple2[Ref, Types])
  ensures !assertArg2_Bool(comparableInterface(p_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), p_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  ensures acc(dynamic_pred_0(p_V0), write)
{
  inhale p_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // decl p_V0_CN0: Path_faafd1d5_T°
  var p_V0_CN0: Tuple2[Ref, Types]
  
  
  
  // init p_V0_CN0
  inhale p_V0_CN0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // decl N1: *rawPath_faafd1d5_T°
  var N1: ShStruct2[Ref, Ref]
  
  // N1 = new(rawPath_faafd1d5_T{dflt[[]byte], dflt[Type_faafd1d5_T]})
  var fn$$0: ShStruct2[Ref, Ref]
  inhale true && acc((ShStructget0of2(fn$$0): Ref).val$_Slice_Ref, write) && acc((ShStructget1of2(fn$$0): Ref).val$_Int, write) && (true && (ShStructget0of2(fn$$0): Ref).val$_Slice_Ref == (get0of2((tuple2(sliceDefault_Intbyte$$$_S_$$$(), 0): Tuple2[Slice[Ref], Int])): Slice[Ref]) && (ShStructget1of2(fn$$0): Ref).val$_Int == (get1of2((tuple2(sliceDefault_Intbyte$$$_S_$$$(), 0): Tuple2[Slice[Ref], Int])): Int))
  N1 := fn$$0
  
  // p_V0_CN0 = toInterface(N1)
  p_V0_CN0 := (tuple2((box_Poly(N1): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])
  
  // fold acc(p_V0_CN0.NonInitMem())
  fold acc(dynamic_pred_0(p_V0_CN0), write)
  
  // p_V0_CN0 = p_V0_CN0
  p_V0_CN0 := p_V0_CN0
  
  // return
  goto returnLabel
  label returnLabel
  
  // p_V0 = p_V0_CN0
  p_V0 := p_V0_CN0
}

// decreases 
method SerializeTo_faafd1d5_PMrawPath(p_V0: ShStruct2[Ref, Ref], b_V0: Slice[Ref]) returns (e_V0: Tuple2[Ref, Types])
  requires acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), constant_ReadL10_b40dce56_G())
  requires acc(AbsSlice_Bytes_88c2f8cc_F(b_V0, 0, (slen(b_V0): Int)), write)
  ensures acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), constant_ReadL10_b40dce56_G())
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(b_V0, 0, (slen(b_V0): Int)), write)
  ensures GetUnderlyingBuf_faafd1d5_PMrawPath(p_V0) == old(GetUnderlyingBuf_faafd1d5_PMrawPath(p_V0))
  ensures assertArg2_Bool(comparableInterface(e_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
{
  inhale e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // decl p_V0_CN0: *rawPath_faafd1d5_T°, b_V0_CN1: []byte°, e_V0_CN2: error_a4af0e5e_T°
  var e_V0_CN2: Tuple2[Ref, Types]
  var b_V0_CN1: Slice[Ref]
  var p_V0_CN0: ShStruct2[Ref, Ref]
  
  
  
  // init p_V0_CN0
  inhale p_V0_CN0 == shStructDefault_$rawA_SliceIntbyte$$$_S_$$$$$$_S_$$$_pathTypeA_DefinedType_faafd1d5_T$$$_S_$$$$()
  
  // init b_V0_CN1
  inhale b_V0_CN1 == sliceDefault_Intbyte$$$_S_$$$()
  
  // init e_V0_CN2
  inhale e_V0_CN2 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // p_V0_CN0 = p_V0
  p_V0_CN0 := p_V0
  
  // b_V0_CN1 = b_V0
  b_V0_CN1 := b_V0
  
  // decl N5: int°
  var N5: Int
  
  // unfold acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, len(b_V0_CN1)))
  unfold acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, (slen(b_V0_CN1): Int)), write)
  
  // unfold acc(p_V0_CN0.Mem(), ReadL10_b40dce56_G)
  unfold acc(dynamic_pred_1((tuple2((box_Poly(p_V0_CN0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), constant_ReadL10_b40dce56_G())
  
  // unfold acc(AbsSlice_Bytes_88c2f8cc_F(*p_V0_CN0.rawA, 0, len(*p_V0_CN0.rawA)), ReadL11_b40dce56_G)
  unfold acc(AbsSlice_Bytes_88c2f8cc_F((ShStructget0of2(p_V0_CN0): Ref).val$_Slice_Ref, 0, (slen((ShStructget0of2(p_V0_CN0): Ref).val$_Slice_Ref): Int)), constant_ReadL11_b40dce56_G())
  
  // N5 = copy_BFSliceIntbyte$$$_S_$$$$$$$_E_$$$_SliceIntbyte$$$_S_$$$$$$$_E_$$$_Permission$$$$_E_$$$(b_V0_CN1, *p_V0_CN0.rawA, ReadL11_b40dce56_G)
  assert !true || true
  N5 := copy_BFSliceIntbyte$$$_S_$$$$$$$_E_$$$_SliceIntbyte$$$_S_$$$$$$$_E_$$$_Permission$$$$_E_$$$(b_V0_CN1, (ShStructget0of2(p_V0_CN0): Ref).val$_Slice_Ref, constant_ReadL11_b40dce56_G())
  
  // fold acc(AbsSlice_Bytes_88c2f8cc_F(*p_V0_CN0.rawA, 0, len(*p_V0_CN0.rawA)), ReadL11_b40dce56_G)
  fold acc(AbsSlice_Bytes_88c2f8cc_F((ShStructget0of2(p_V0_CN0): Ref).val$_Slice_Ref, 0, (slen((ShStructget0of2(p_V0_CN0): Ref).val$_Slice_Ref): Int)), constant_ReadL11_b40dce56_G())
  
  // fold acc(p_V0_CN0.Mem(), ReadL10_b40dce56_G)
  fold acc(dynamic_pred_1((tuple2((box_Poly(p_V0_CN0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), constant_ReadL10_b40dce56_G())
  
  // fold acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, len(b_V0_CN1)))
  fold acc(AbsSlice_Bytes_88c2f8cc_F(b_V0_CN1, 0, (slen(b_V0_CN1): Int)), write)
  
  // e_V0_CN2 = (nil:error_a4af0e5e_T)
  e_V0_CN2 := (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // return
  goto returnLabel
  label returnLabel
  
  // e_V0 = e_V0_CN2
  e_V0 := e_V0_CN2
}

// decreases 
method DecodeFromBytes_faafd1d5_PMrawPath(p_V0: ShStruct2[Ref, Ref], b_V0: Slice[Ref]) returns (e_V0: Tuple2[Ref, Types])
  requires acc(dynamic_pred_0((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write) && acc(AbsSlice_Bytes_88c2f8cc_F(b_V0, 0, (slen(b_V0): Int)), write)
  ensures acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  ensures GetUnderlyingBuf_faafd1d5_PMrawPath(p_V0) == b_V0
  ensures assertArg2_Bool(comparableInterface(e_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
{
  inhale e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // decl p_V0_CN0: *rawPath_faafd1d5_T°, b_V0_CN1: []byte°, e_V0_CN2: error_a4af0e5e_T°
  var e_V0_CN2: Tuple2[Ref, Types]
  var b_V0_CN1: Slice[Ref]
  var p_V0_CN0: ShStruct2[Ref, Ref]
  
  
  
  // init p_V0_CN0
  inhale p_V0_CN0 == shStructDefault_$rawA_SliceIntbyte$$$_S_$$$$$$_S_$$$_pathTypeA_DefinedType_faafd1d5_T$$$_S_$$$$()
  
  // init b_V0_CN1
  inhale b_V0_CN1 == sliceDefault_Intbyte$$$_S_$$$()
  
  // init e_V0_CN2
  inhale e_V0_CN2 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // p_V0_CN0 = p_V0
  p_V0_CN0 := p_V0
  
  // b_V0_CN1 = b_V0
  b_V0_CN1 := b_V0
  
  // decl 
  
  // unfold acc(p_V0_CN0.NonInitMem())
  unfold acc(dynamic_pred_0((tuple2((box_Poly(p_V0_CN0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  
  // *p_V0_CN0.rawA = b_V0_CN1
  (ShStructget0of2(p_V0_CN0): Ref).val$_Slice_Ref := b_V0_CN1
  
  // fold acc(p_V0_CN0.Mem())
  fold acc(dynamic_pred_1((tuple2((box_Poly(p_V0_CN0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  
  // e_V0_CN2 = (nil:error_a4af0e5e_T)
  e_V0_CN2 := (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // return
  goto returnLabel
  label returnLabel
  
  // e_V0 = e_V0_CN2
  e_V0 := e_V0_CN2
}

// decreases 
method Reverse_faafd1d5_PMrawPath(p_V0: ShStruct2[Ref, Ref]) returns (r_V0: Tuple2[Ref, Types], e_V0: Tuple2[Ref, Types])
  requires acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  ensures !assertArg2_Bool(comparableInterface(e_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) && acc(dynamic_pred_3(e_V0), write)
{
  inhale r_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  inhale e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // decl p_V0_CN0: *rawPath_faafd1d5_T°, r_V0_CN1: Path_faafd1d5_T°, e_V0_CN2: error_a4af0e5e_T°
  var e_V0_CN2: Tuple2[Ref, Types]
  var r_V0_CN1: Tuple2[Ref, Types]
  var p_V0_CN0: ShStruct2[Ref, Ref]
  
  
  
  // init p_V0_CN0
  inhale p_V0_CN0 == shStructDefault_$rawA_SliceIntbyte$$$_S_$$$$$$_S_$$$_pathTypeA_DefinedType_faafd1d5_T$$$_S_$$$$()
  
  // init r_V0_CN1
  inhale r_V0_CN1 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // init e_V0_CN2
  inhale e_V0_CN2 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // p_V0_CN0 = p_V0
  p_V0_CN0 := p_V0
  
  // decl N3: error_a4af0e5e_T°
  var N3: Tuple2[Ref, Types]
  
  // N3 = New_a58fd4a8_F("not supported", (nil:[]interface(name is empty_interface)))
  assert !true || true
  N3 := New_a58fd4a8_F(stringLit6e6f7420737570706f72746564(), sliceDefault_Interfaceempty_interface$$$_S_$$$())
  
  // r_V0_CN1 = (nil:Path_faafd1d5_T)
  r_V0_CN1 := (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // e_V0_CN2 = N3
  e_V0_CN2 := N3
  
  // return
  goto returnLabel
  label returnLabel
  
  // r_V0 = r_V0_CN1
  r_V0 := r_V0_CN1
  
  // e_V0 = e_V0_CN2
  e_V0 := e_V0_CN2
}

method $IMPORTS_faafd1d5_faafd1d5()
  requires acc(PathPackageMem_faafd1d5_F(), write)
{
  
  // decl 
  
  
  label returnLabel
}

method $IMPORTS_faafd1d5_467a9bee()
{
  
  // decl 
  
  
  label returnLabel
}

method $IMPORTS_faafd1d5_531757d2()
{
  
  // decl 
  
  
  label returnLabel
}

method $IMPORTS_faafd1d5_a58fd4a8()
{
  
  // decl 
  
  
  label returnLabel
}

method $IMPORTS_faafd1d5_c31aebe5()
{
  
  // decl 
  
  
  label returnLabel
}

method $IMPORTS_faafd1d5_c085d058()
{
  
  // decl 
  
  
  label returnLabel
}

method $IMPORTS_faafd1d5_a397bb98()
{
  
  // decl 
  
  
  label returnLabel
}

method $IMPORTS_faafd1d5_1402f601()
{
  
  // decl 
  
  
  label returnLabel
}

method $IMPORTS_faafd1d5_bf01f2a6()
{
  
  // decl 
  
  
  label returnLabel
}

method $IMPORTS_faafd1d5_b40dce56()
{
  
  // decl 
  
  
  label returnLabel
}

method $IMPORTS_faafd1d5_6f559e0()
{
  
  // decl 
  
  
  label returnLabel
}

method $IMPORTS_faafd1d5_3773bb97()
{
  
  // decl 
  
  
  label returnLabel
}

method $IMPORTS_faafd1d5_88c2f8cc()
{
  
  // decl 
  
  
  label returnLabel
}

method $IMPORTS_faafd1d5_a4af0e5e()
{
  
  // decl 
  
  
  label returnLabel
}

// decreases 
method $INIT_faafd1d5_9a51a757()
{
  
  // decl 
  
  
  label returnLabel
}

// decreases 
method $INIT_faafd1d5_bbcc973()
  ensures acc(PathPackageMem_faafd1d5_F(), write)
{
  
  // decl 
  
  
  
  // init registeredPaths
  var fn$$1: Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$
  var fn$$2: Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$
  fn$$1 := registeredPaths_faafd1d5_G()
  fn$$2 := arrayDefault_256_Definedmetadata_faafd1d5_T$$$$_E_$$$()
  inhale true && (forall fn$$0: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$0 && fn$$0 < 256 ==> true) && (forall fn$$0: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$0 && fn$$0 < 256 ==> acc((ShStructget0of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): Ref).val$_Bool, write)) && (forall fn$$0: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$0 && fn$$0 < 256 ==> true) && (forall fn$$0: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$0 && fn$$0 < 256 ==> acc((ShStructget0of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int, write)) && (forall fn$$0: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$0 && fn$$0 < 256 ==> acc((ShStructget1of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int, write)) && (forall fn$$0: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$0 && fn$$0 < 256 ==> acc((ShStructget2of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Closure, write)) && ((forall fn$$3: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(fn$$1), fn$$3): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } { unbox_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(fn$$2)[fn$$3] } 0 <= fn$$3 && fn$$3 < 256 ==> true && (ShStructget0of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(fn$$1), fn$$3): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): Ref).val$_Bool == (get0of2(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(fn$$2)[fn$$3]): Bool) && (true && (ShStructget0of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(fn$$1), fn$$3): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int == (get0of3((get1of2(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(fn$$2)[fn$$3]): Tuple3[Int, Int, Closure])): Int) && (ShStructget1of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(fn$$1), fn$$3): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int == (get1of3((get1of2(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(fn$$2)[fn$$3]): Tuple3[Int, Int, Closure])): Int) && (ShStructget2of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(fn$$1), fn$$3): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Closure == (get2of3((get1of2(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(fn$$2)[fn$$3]): Tuple3[Int, Int, Closure])): Closure))) && !(registeredPaths_faafd1d5_G() == box_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(arrayNil_256_Definedmetadata_faafd1d5_T$$$_S_$$$())))
  
  // init strictDecoding
  inhale acc(strictDecoding_faafd1d5_G().val$_Bool, write) && (strictDecoding_faafd1d5_G().val$_Bool == false && !(strictDecoding_faafd1d5_G() == null))
  
  // registeredPaths = dflt[[256]metadata_faafd1d5_T]
  var fn$$5: Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$
  var fn$$6: Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$
  fn$$5 := registeredPaths_faafd1d5_G()
  fn$$6 := arrayDefault_256_Definedmetadata_faafd1d5_T$$$$_E_$$$()
  exhale true && (forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$4 && fn$$4 < 256 ==> true) && (forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$4 && fn$$4 < 256 ==> acc((ShStructget0of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): Ref).val$_Bool, write)) && (forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$4 && fn$$4 < 256 ==> true) && (forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$4 && fn$$4 < 256 ==> acc((ShStructget0of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int, write)) && (forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$4 && fn$$4 < 256 ==> acc((ShStructget1of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int, write)) && (forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$4 && fn$$4 < 256 ==> acc((ShStructget2of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Closure, write))
  inhale true && (forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$4 && fn$$4 < 256 ==> true) && (forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$4 && fn$$4 < 256 ==> acc((ShStructget0of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): Ref).val$_Bool, write)) && (forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$4 && fn$$4 < 256 ==> true) && (forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$4 && fn$$4 < 256 ==> acc((ShStructget0of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int, write)) && (forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$4 && fn$$4 < 256 ==> acc((ShStructget1of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int, write)) && (forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$4 && fn$$4 < 256 ==> acc((ShStructget2of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$4): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Closure, write)) && (forall fn$$7: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(fn$$5), fn$$7): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } { unbox_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(fn$$6)[fn$$7] } 0 <= fn$$7 && fn$$7 < 256 ==> true && (ShStructget0of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(fn$$5), fn$$7): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): Ref).val$_Bool == (get0of2(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(fn$$6)[fn$$7]): Bool) && (true && (ShStructget0of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(fn$$5), fn$$7): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int == (get0of3((get1of2(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(fn$$6)[fn$$7]): Tuple3[Int, Int, Closure])): Int) && (ShStructget1of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(fn$$5), fn$$7): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int == (get1of3((get1of2(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(fn$$6)[fn$$7]): Tuple3[Int, Int, Closure])): Int) && (ShStructget2of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(fn$$5), fn$$7): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Closure == (get2of3((get1of2(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$$_E_$$$_Seq_Tuple2_BoolTuple3_IntIntClosure(fn$$6)[fn$$7]): Tuple3[Int, Int, Closure])): Closure)))
  
  // strictDecoding = true
  strictDecoding_faafd1d5_G().val$_Bool := true
  
  // decl 
  
  // assert acc(registeredPaths)
  assert true && (forall fn$$8: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$8): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$8 && fn$$8 < 256 ==> true) && (forall fn$$8: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$8): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$8 && fn$$8 < 256 ==> acc((ShStructget0of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$8): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): Ref).val$_Bool, write)) && (forall fn$$8: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$8): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$8 && fn$$8 < 256 ==> true) && (forall fn$$8: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$8): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$8 && fn$$8 < 256 ==> acc((ShStructget0of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$8): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int, write)) && (forall fn$$8: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$8): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$8 && fn$$8 < 256 ==> acc((ShStructget1of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$8): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Int, write)) && (forall fn$$8: Int :: { (ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$8): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]]) } 0 <= fn$$8 && fn$$8 < 256 ==> acc((ShStructget2of3((ShStructget1of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), fn$$8): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): ShStruct3[Ref, Ref, Ref])): Ref).val$_Closure, write))
  
  // assert acc(strictDecoding)
  assert acc(strictDecoding_faafd1d5_G().val$_Bool, write)
  
  // assert forall t_V0: Type_faafd1d5_T :: {  } 0 <= t_V0 && t_V0 < maxPathType_faafd1d5_G ==> !registeredPaths[t_V0].inUseA
  assert (forall t_V0: Int :: { (ShStructget0of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), t_V0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): Ref) } 0 <= t_V0 && t_V0 < constant_maxPathType_faafd1d5_G() ==> !(ShStructget0of2((ShArrayloc(unbox_Emb_256_Definedmetadata_faafd1d5_T$$$_S_$$$_ShArray_ShStruct2_RefShStruct3_RefRefRef(registeredPaths_faafd1d5_G()), t_V0): ShStruct2[Ref, ShStruct3[Ref, Ref, Ref]])): Ref).val$_Bool)
  
  // fold acc(PathPackageMem_faafd1d5_F())
  fold acc(PathPackageMem_faafd1d5_F(), write)
  label returnLabel
}

// decreases 
method $INIT_faafd1d5_14248783()
{
  
  // decl 
  
  
  label returnLabel
}

// decreases 
method $INIT_faafd1d5_a58b545b()
{
  
  // decl 
  
  
  label returnLabel
}

// decreases 
method $INIT_faafd1d5_5efae206()
{
  
  // decl 
  
  
  label returnLabel
}

// decreases 
method $INIT_faafd1d5_403184ee()
{
  
  // decl 
  
  
  label returnLabel
}

// decreases 
method $INIT_faafd1d5_53d53249()
{
  
  // decl 
  
  
  label returnLabel
}

// decreases 
method $INIT_faafd1d5_d1376150()
{
  
  // decl 
  
  
  label returnLabel
}

// decreases 
method $INIT_faafd1d5_8ce7e062()
{
  
  // decl 
  
  
  label returnLabel
}

// decreases 
method DefinederrOrMsg_a58fd4a8_T$$$$_E_$$$_Error_a58fd4a8_MerrOrMsg_Error_a4af0e5e_SY$1dcebcb0_a4af0e5e__proof(m_V0: Tuple2[Int, Tuple2[Ref, Types]]) returns (P0_PO0: Int)
  requires acc(dynamic_pred_3((tuple2((box_Poly(m_V0): Ref), errOrMsg_a58fd4a8_T_Types()): Tuple2[Ref, Types])), write)
  ensures acc(dynamic_pred_3((tuple2((box_Poly(m_V0): Ref), errOrMsg_a58fd4a8_T_Types()): Tuple2[Ref, Types])), write)
{
  inhale P0_PO0 == stringLit()
  
  // decl 
  
  
  
  // P0_PO0 = m_V0Error()
  assert !true || true
  P0_PO0 := Error_a58fd4a8_MerrOrMsg(m_V0)
  label returnLabel
}

// decreases 
method DefinedbasicError_a58fd4a8_T$$$$_E_$$$_Error_a58fd4a8_MbasicError_Error_a4af0e5e_SY$1dcebcb0_a4af0e5e__proof(e_V0: Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref]) returns (P0_PO0: Int)
  requires acc(dynamic_pred_3((tuple2((box_Poly(e_V0): Ref), basicError_a58fd4a8_T_Types()): Tuple2[Ref, Types])), write)
  ensures acc(dynamic_pred_3((tuple2((box_Poly(e_V0): Ref), basicError_a58fd4a8_T_Types()): Tuple2[Ref, Types])), write)
{
  inhale P0_PO0 == stringLit()
  
  // decl 
  
  
  
  // P0_PO0 = e_V0Error()
  assert !true || true
  P0_PO0 := Error_a58fd4a8_MbasicError(e_V0)
  label returnLabel
}

// decreases 
method PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_ExchangeBufMem_faafd1d5_PMrawPath_ExchangeBufMem_faafd1d5_SY$91c0a5f1_faafd1d5__proof(r_V0: ShStruct2[Ref, Ref], buf_V0: Slice[Ref])
  requires acc(dynamic_pred_1((tuple2((box_Poly(r_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  requires PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_GetUnderlyingBuf_faafd1d5_PMrawPath_GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5__proof(r_V0) == buf_V0
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0, 0, (slen(buf_V0): Int)), write)


// proof
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0, 0, (slen(buf_V0): Int)), write) --* acc(dynamic_pred_1((tuple2((box_Poly(r_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write) && GetUnderlyingBuf_faafd1d5_PMrawPath(r_V0) == buf_V0

// interface
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0, 0, (slen(buf_V0): Int)), write) --* acc(dynamic_pred_1(thisItf), write) && GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5_(thisItf) == buf_V0

// implementation
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0, 0, (slen(buf_V0): Int)), write) --* acc(dynamic_pred_1((tuple2((box_Poly(r_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write) && PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_GetUnderlyingBuf_faafd1d5_PMrawPath_GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5__proof(r_V0) == buf_V0
{
  
  // decl 
  
  
  
  // r_V0ExchangeBufMem(buf_V0)
  assert !true || true
  ExchangeBufMem_faafd1d5_PMrawPath(r_V0, buf_V0)
  label returnLabel
}

// decreases 
method PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_DowngradePerm_faafd1d5_PMrawPath_DowngradePerm_faafd1d5_SY$91c0a5f1_faafd1d5__proof(p_V0: ShStruct2[Ref, Ref], buf_V0: Slice[Ref])
  requires acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  requires buf_V0 == PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_GetUnderlyingBuf_faafd1d5_PMrawPath_GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5__proof(p_V0)
  ensures acc(dynamic_pred_0((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0, 0, (slen(buf_V0): Int)), write)
{
  
  // decl 
  
  
  
  // p_V0DowngradePerm(buf_V0)
  assert !true || true
  DowngradePerm_faafd1d5_PMrawPath(p_V0, buf_V0)
  label returnLabel
}

// decreases 
method DefinedbigEndian_bf01f2a6_T$$$$_E_$$$_PutUint64_bf01f2a6_MbigEndian_PutUint64_bf01f2a6_SY$55c5ed_bf01f2a6__proof(e_V0: Int, b_V0: Slice[Ref], v_V0: Int)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref).val$_Int, write)
{
  
  // decl 
  
  
  
  // e_V0PutUint64(b_V0, v_V0)
  assert !true || true
  PutUint64_bf01f2a6_MbigEndian(e_V0, b_V0, v_V0)
  label returnLabel
}

// decreases 
method DefinedlittleEndian_bf01f2a6_T$$$$_E_$$$_PutUint64_bf01f2a6_MlittleEndian_PutUint64_bf01f2a6_SY$55c5ed_bf01f2a6__proof(e_V0: Int, b_V0: Slice[Ref], v_V0: Int)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref).val$_Int, write)
{
  
  // decl 
  
  
  
  // e_V0PutUint64(b_V0, v_V0)
  assert !true || true
  PutUint64_bf01f2a6_MlittleEndian(e_V0, b_V0, v_V0)
  label returnLabel
}

// decreases 
method PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_SerializeTo_faafd1d5_PMrawPath_SerializeTo_faafd1d5_SY$91c0a5f1_faafd1d5__proof(p_V0: ShStruct2[Ref, Ref], b_V0: Slice[Ref]) returns (e_V0: Tuple2[Ref, Types])
  requires acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  requires acc(AbsSlice_Bytes_88c2f8cc_F(b_V0, 0, (slen(b_V0): Int)), write)
  ensures acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(b_V0, 0, (slen(b_V0): Int)), write)
  ensures PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_GetUnderlyingBuf_faafd1d5_PMrawPath_GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5__proof(p_V0) == old(PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_GetUnderlyingBuf_faafd1d5_PMrawPath_GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5__proof(p_V0))
  ensures !assertArg2_Bool(comparableInterface(e_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> acc(dynamic_pred_3(e_V0), write)
{
  inhale e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // decl 
  
  
  
  // e_V0 = p_V0SerializeTo(b_V0)
  assert !true || true
  e_V0 := SerializeTo_faafd1d5_PMrawPath(p_V0, b_V0)
  label returnLabel
}

// decreases 
method DefinedbigEndian_bf01f2a6_T$$$$_E_$$$_PutUint16_bf01f2a6_MbigEndian_PutUint16_bf01f2a6_SY$55c5ed_bf01f2a6__proof(e_V0: Int, b_V0: Slice[Ref], v_V0: Int)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write)
{
  
  // decl 
  
  
  
  // e_V0PutUint16(b_V0, v_V0)
  assert !true || true
  PutUint16_bf01f2a6_MbigEndian(e_V0, b_V0, v_V0)
  label returnLabel
}

// decreases 
method DefinedlittleEndian_bf01f2a6_T$$$$_E_$$$_PutUint32_bf01f2a6_MlittleEndian_PutUint32_bf01f2a6_SY$55c5ed_bf01f2a6__proof(e_V0: Int, b_V0: Slice[Ref], v_V0: Int)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)
{
  
  // decl 
  
  
  
  // e_V0PutUint32(b_V0, v_V0)
  assert !true || true
  PutUint32_bf01f2a6_MlittleEndian(e_V0, b_V0, v_V0)
  label returnLabel
}

// decreases 
method PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_DecodeFromBytes_faafd1d5_PMrawPath_DecodeFromBytes_faafd1d5_SY$91c0a5f1_faafd1d5__proof(p_V0: ShStruct2[Ref, Ref], b_V0: Slice[Ref]) returns (e_V0: Tuple2[Ref, Types])
  requires acc(dynamic_pred_0((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  requires acc(AbsSlice_Bytes_88c2f8cc_F(b_V0, 0, (slen(b_V0): Int)), write)
  ensures assertArg2_Bool(comparableInterface(e_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  ensures assertArg2_Bool(comparableInterface(e_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> b_V0 == PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_GetUnderlyingBuf_faafd1d5_PMrawPath_GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5__proof(p_V0)
  ensures !assertArg2_Bool(comparableInterface(e_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> acc(dynamic_pred_3(e_V0), write)
  ensures !assertArg2_Bool(comparableInterface(e_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> acc(dynamic_pred_0((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  ensures !assertArg2_Bool(comparableInterface(e_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> acc(AbsSlice_Bytes_88c2f8cc_F(b_V0, 0, (slen(b_V0): Int)), write)
{
  inhale e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // decl 
  
  
  
  // e_V0 = p_V0DecodeFromBytes(b_V0)
  assert !true || true
  e_V0 := DecodeFromBytes_faafd1d5_PMrawPath(p_V0, b_V0)
  label returnLabel
}

// decreases 
method DefinedbigEndian_bf01f2a6_T$$$$_E_$$$_PutUint32_bf01f2a6_MbigEndian_PutUint32_bf01f2a6_SY$55c5ed_bf01f2a6__proof(e_V0: Int, b_V0: Slice[Ref], v_V0: Int)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)
{
  
  // decl 
  
  
  
  // e_V0PutUint32(b_V0, v_V0)
  assert !true || true
  PutUint32_bf01f2a6_MbigEndian(e_V0, b_V0, v_V0)
  label returnLabel
}

// decreases 
method DefinedList_a58fd4a8_T$$$$_E_$$$_Error_a58fd4a8_MList_Error_a4af0e5e_SY$1dcebcb0_a4af0e5e__proof(e_V0: Slice[Ref]) returns (P0_PO0: Int)
  requires acc(dynamic_pred_3((tuple2((box_Poly(e_V0): Ref), List_a58fd4a8_T_Types()): Tuple2[Ref, Types])), write)
  ensures acc(dynamic_pred_3((tuple2((box_Poly(e_V0): Ref), List_a58fd4a8_T_Types()): Tuple2[Ref, Types])), write)
{
  inhale P0_PO0 == stringLit()
  
  // decl 
  
  
  
  // P0_PO0 = e_V0Error()
  assert !true || true
  P0_PO0 := Error_a58fd4a8_MList(e_V0)
  label returnLabel
}

// decreases 
method PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_Reverse_faafd1d5_PMrawPath_Reverse_faafd1d5_SY$91c0a5f1_faafd1d5__proof(p_V0: ShStruct2[Ref, Ref]) returns (r_V0: Tuple2[Ref, Types], e_V0: Tuple2[Ref, Types])
  requires acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), write)
  ensures assertArg2_Bool(comparableInterface(e_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> !assertArg2_Bool(comparableInterface(r_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), r_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) && acc(dynamic_pred_1(r_V0), write)
  ensures !assertArg2_Bool(comparableInterface(e_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> acc(dynamic_pred_3(e_V0), write)
{
  inhale r_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  inhale e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // decl 
  
  
  
  // r_V0, e_V0 = p_V0Reverse()
  assert !true || true
  r_V0, e_V0 := Reverse_faafd1d5_PMrawPath(p_V0)
  label returnLabel
}

// decreases 
method DefinedlittleEndian_bf01f2a6_T$$$$_E_$$$_PutUint16_bf01f2a6_MlittleEndian_PutUint16_bf01f2a6_SY$55c5ed_bf01f2a6__proof(e_V0: Int, b_V0: Slice[Ref], v_V0: Int)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write)
{
  
  // decl 
  
  
  
  // e_V0PutUint16(b_V0, v_V0)
  assert !true || true
  PutUint16_bf01f2a6_MlittleEndian(e_V0, b_V0, v_V0)
  label returnLabel
}

method panic_a4af0e5e_F(v_V0: Tuple2[Ref, Types])
  requires false


method SplitByIndexC_Bytes_88c2f8cc_F(s_V0: Slice[Ref], start_V0: Int, end_V0: Int, idx_V0: Int, contents_V0: Seq[Int])
  requires acc(AbsSliceC_Bytes_88c2f8cc_F(s_V0, start_V0, end_V0, contents_V0), write)
  requires start_V0 < idx_V0 && idx_V0 < end_V0
  ensures acc(AbsSliceC_Bytes_88c2f8cc_F(s_V0, start_V0, idx_V0, contents_V0[..idx_V0 - start_V0]), write) && acc(AbsSliceC_Bytes_88c2f8cc_F(s_V0, idx_V0, end_V0, contents_V0[idx_V0 - start_V0..]), write)


method CombineAtIndexC_Bytes_88c2f8cc_F(s_V0: Slice[Ref], start_V0: Int, end_V0: Int, idx_V0: Int, contents1_V0: Seq[Int], contents2_V0: Seq[Int])
  requires acc(AbsSliceC_Bytes_88c2f8cc_F(s_V0, start_V0, idx_V0, contents1_V0), write)
  requires acc(AbsSliceC_Bytes_88c2f8cc_F(s_V0, idx_V0, end_V0, contents2_V0), write)
  ensures acc(AbsSliceC_Bytes_88c2f8cc_F(s_V0, start_V0, end_V0, contents1_V0 ++ contents2_V0), write)


method ResliceC_Bytes_88c2f8cc_F(s_V0: Slice[Ref], start_V0: Int, end_V0: Int, contents_V0: Seq[Int])
  requires acc(AbsSliceC_Bytes_88c2f8cc_F(s_V0, start_V0, end_V0, contents_V0), write)
  requires (unfolding acc(AbsSliceC_Bytes_88c2f8cc_F(s_V0, start_V0, end_V0, contents_V0), write) in true)
  ensures acc(AbsSliceC_Bytes_88c2f8cc_F(ssliceFromSlice_Ref(s_V0, start_V0, end_V0), 0, (slen(ssliceFromSlice_Ref(s_V0, start_V0, end_V0)): Int), contents_V0), write)


// decreases 
method SplitByIndex_Bytes_88c2f8cc_F(s_V0: Slice[Ref], start_V0: Int, end_V0: Int, idx_V0: Int, p_V0: Perm)
  requires 0 / 1 <= p_V0
  requires acc(AbsSlice_Bytes_88c2f8cc_F(s_V0, start_V0, end_V0), p_V0)
  requires start_V0 <= idx_V0 && idx_V0 <= end_V0
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(s_V0, start_V0, idx_V0), p_V0)
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(s_V0, idx_V0, end_V0), p_V0)


// decreases 
method CombineAtIndex_Bytes_88c2f8cc_F(s_V0: Slice[Ref], start_V0: Int, end_V0: Int, idx_V0: Int, p_V0: Perm)
  requires 0 / 1 <= p_V0
  requires acc(AbsSlice_Bytes_88c2f8cc_F(s_V0, start_V0, idx_V0), p_V0)
  requires acc(AbsSlice_Bytes_88c2f8cc_F(s_V0, idx_V0, end_V0), p_V0)
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(s_V0, start_V0, end_V0), p_V0)


// decreases 
method Reslice_Bytes_88c2f8cc_F(s_V0: Slice[Ref], start_V0: Int, end_V0: Int, p_V0: Perm)
  requires 0 / 1 <= p_V0
  requires acc(AbsSlice_Bytes_88c2f8cc_F(s_V0, start_V0, end_V0), p_V0)
  requires (unfolding acc(AbsSlice_Bytes_88c2f8cc_F(s_V0, start_V0, end_V0), p_V0) in true)
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(ssliceFromSlice_Ref(s_V0, start_V0, end_V0), 0, (slen(ssliceFromSlice_Ref(s_V0, start_V0, end_V0)): Int)), p_V0)


// decreases 
method Unslice_Bytes_88c2f8cc_F(s_V0: Slice[Ref], start_V0: Int, end_V0: Int, p_V0: Perm)
  requires 0 / 1 <= p_V0
  requires 0 <= start_V0 && start_V0 <= end_V0 && end_V0 <= (scap(s_V0): Int)
  requires (slen(ssliceFromSlice_Ref(s_V0, start_V0, end_V0)): Int) <= (scap(s_V0): Int)
  requires acc(AbsSlice_Bytes_88c2f8cc_F(ssliceFromSlice_Ref(s_V0, start_V0, end_V0), 0, (slen(ssliceFromSlice_Ref(s_V0, start_V0, end_V0)): Int)), p_V0)
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(s_V0, start_V0, end_V0), p_V0)


method SplitByIndexC_Any_88c2f8cc_F(s_V0: Slice[Ref], start_V0: Int, end_V0: Int, idx_V0: Int, contents_V0: Seq[Tuple2[Ref, Types]])
  requires acc(AbsSliceC_Any_88c2f8cc_F(s_V0, start_V0, end_V0, contents_V0), write)
  requires start_V0 < idx_V0 && idx_V0 < end_V0
  ensures acc(AbsSliceC_Any_88c2f8cc_F(s_V0, start_V0, idx_V0, contents_V0[..idx_V0 - start_V0]), write) && acc(AbsSliceC_Any_88c2f8cc_F(s_V0, idx_V0, end_V0, contents_V0[idx_V0 - start_V0..]), write)


// decreases 
method SplitByIndex_Any_88c2f8cc_F(s_V0: Slice[Ref], start_V0: Int, end_V0: Int, idx_V0: Int, p_V0: Perm)
  requires 0 / 1 <= p_V0
  requires acc(AbsSlice_Any_88c2f8cc_F(s_V0, start_V0, end_V0), p_V0)
  requires start_V0 <= idx_V0 && idx_V0 <= end_V0
  ensures acc(AbsSlice_Any_88c2f8cc_F(s_V0, start_V0, idx_V0), p_V0)
  ensures acc(AbsSlice_Any_88c2f8cc_F(s_V0, idx_V0, end_V0), p_V0)


// decreases 
method CombineAtIndex_Any_88c2f8cc_F(s_V0: Slice[Ref], start_V0: Int, end_V0: Int, idx_V0: Int, p_V0: Perm)
  requires 0 / 1 <= p_V0
  requires acc(AbsSlice_Any_88c2f8cc_F(s_V0, start_V0, idx_V0), p_V0)
  requires acc(AbsSlice_Any_88c2f8cc_F(s_V0, idx_V0, end_V0), p_V0)
  ensures acc(AbsSlice_Any_88c2f8cc_F(s_V0, start_V0, end_V0), p_V0)


// decreases 
method Reslice_Any_88c2f8cc_F(s_V0: Slice[Ref], start_V0: Int, end_V0: Int, p_V0: Perm)
  requires 0 / 1 <= p_V0
  requires acc(AbsSlice_Any_88c2f8cc_F(s_V0, start_V0, end_V0), p_V0)
  requires (unfolding acc(AbsSlice_Any_88c2f8cc_F(s_V0, start_V0, end_V0), p_V0) in true)
  ensures acc(AbsSlice_Any_88c2f8cc_F(ssliceFromSlice_Ref(s_V0, start_V0, end_V0), 0, (slen(ssliceFromSlice_Ref(s_V0, start_V0, end_V0)): Int)), p_V0)


// decreases 
method Unslice_Any_88c2f8cc_F(s_V0: Slice[Ref], start_V0: Int, end_V0: Int, p_V0: Perm)
  requires 0 / 1 <= p_V0
  requires 0 <= start_V0 && start_V0 <= end_V0 && end_V0 <= (scap(s_V0): Int)
  requires (slen(ssliceFromSlice_Ref(s_V0, start_V0, end_V0)): Int) <= (scap(s_V0): Int)
  requires acc(AbsSlice_Any_88c2f8cc_F(ssliceFromSlice_Ref(s_V0, start_V0, end_V0), 0, (slen(ssliceFromSlice_Ref(s_V0, start_V0, end_V0)): Int)), p_V0)
  ensures acc(AbsSlice_Any_88c2f8cc_F(s_V0, start_V0, end_V0), p_V0)


method AbsSliceC_Bytes_test_88c2f8cc_F()


method AbsSlice_Bytes_test_88c2f8cc_F()


method AbsSliceC_Any_test_88c2f8cc_F()


method AbsSlice_Any_test_88c2f8cc_F()


method Close_3773bb97_SY$f5ff51c5_3773bb97_(thisItf: Tuple2[Ref, Types]) returns (P0_PO0: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(Mem_3773bb97_SY$f5ff51c5_3773bb97_(thisItf), write)


method Write_3773bb97_SY$df734670_3773bb97_(thisItf: Tuple2[Ref, Types], p_V0: Slice[Ref]) returns (n_V0: Int, err_V0: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(Mem_3773bb97_SY$df734670_3773bb97_(thisItf), write)
  requires true && (forall fn$$0: Int :: { (ShArrayloc((sarray(p_V0): ShArray[Ref]), sadd((soffset(p_V0): Int), fn$$0)): Ref) } 0 <= fn$$0 && fn$$0 < (slen(p_V0): Int) ==> acc((ShArrayloc((sarray(p_V0): ShArray[Ref]), sadd((soffset(p_V0): Int), fn$$0)): Ref).val$_Int, 1 / 1000))
  ensures acc(Mem_3773bb97_SY$df734670_3773bb97_(thisItf), write)
  ensures true && (forall fn$$1: Int :: { (ShArrayloc((sarray(p_V0): ShArray[Ref]), sadd((soffset(p_V0): Int), fn$$1)): Ref) } 0 <= fn$$1 && fn$$1 < (slen(p_V0): Int) ==> acc((ShArrayloc((sarray(p_V0): ShArray[Ref]), sadd((soffset(p_V0): Int), fn$$1)): Ref).val$_Int, 1 / 1000))
  ensures 0 <= n_V0 && n_V0 <= (slen(p_V0): Int)
  ensures n_V0 < (slen(p_V0): Int) == !assertArg2_Bool(comparableInterface(err_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))


method Read_3773bb97_SY$a233e55e_3773bb97_(thisItf: Tuple2[Ref, Types], p_V0: Slice[Ref]) returns (n_V0: Int, err_V0: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(Mem_3773bb97_SY$a233e55e_3773bb97_(thisItf), write)
  requires true && (forall fn$$0: Int :: { (ShArrayloc((sarray(p_V0): ShArray[Ref]), sadd((soffset(p_V0): Int), fn$$0)): Ref) } 0 <= fn$$0 && fn$$0 < (slen(p_V0): Int) ==> acc((ShArrayloc((sarray(p_V0): ShArray[Ref]), sadd((soffset(p_V0): Int), fn$$0)): Ref).val$_Int, write))
  ensures acc(Mem_3773bb97_SY$a233e55e_3773bb97_(thisItf), write)
  ensures true && (forall fn$$1: Int :: { (ShArrayloc((sarray(p_V0): ShArray[Ref]), sadd((soffset(p_V0): Int), fn$$1)): Ref) } 0 <= fn$$1 && fn$$1 < (slen(p_V0): Int) ==> acc((ShArrayloc((sarray(p_V0): ShArray[Ref]), sadd((soffset(p_V0): Int), fn$$1)): Ref).val$_Int, write))
  ensures 0 <= n_V0 && n_V0 <= (slen(p_V0): Int)


// decreases 
method BlockSize_6f559e0_SY$353949c1_6f559e0_(thisItf: Tuple2[Ref, Types]) returns (res_V0: Int)
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(Mem_6f559e0_SY$353949c1_6f559e0_(thisItf), wildcard)
  ensures res_V0 >= 0


// decreases 
method Reset_6f559e0_SY$353949c1_6f559e0_(thisItf: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(Mem_6f559e0_SY$353949c1_6f559e0_(thisItf), write)
  ensures acc(Mem_6f559e0_SY$353949c1_6f559e0_(thisItf), write)
  ensures Size_6f559e0_SY$353949c1_6f559e0_(thisItf) >= old(Size_6f559e0_SY$353949c1_6f559e0_(thisItf))


// decreases 
method Sum_6f559e0_SY$353949c1_6f559e0_(thisItf: Tuple2[Ref, Types], b_V0: Slice[Ref]) returns (res_V0: Slice[Ref])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires true && (forall fn$$0: Int :: { (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), fn$$0)): Ref) } 0 <= fn$$0 && fn$$0 < (slen(b_V0): Int) ==> acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), fn$$0)): Ref).val$_Int, write))
  requires acc(Mem_6f559e0_SY$353949c1_6f559e0_(thisItf), 1 / 1000)
  ensures acc(Mem_6f559e0_SY$353949c1_6f559e0_(thisItf), 1 / 1000)
  ensures true && (forall fn$$1: Int :: { (ShArrayloc((sarray(res_V0): ShArray[Ref]), sadd((soffset(res_V0): Int), fn$$1)): Ref) } 0 <= fn$$1 && fn$$1 < (slen(res_V0): Int) ==> acc((ShArrayloc((sarray(res_V0): ShArray[Ref]), sadd((soffset(res_V0): Int), fn$$1)): Ref).val$_Int, write)) && (slen(res_V0): Int) == Size_6f559e0_SY$353949c1_6f559e0_(thisItf)


// decreases 
method Write_6f559e0_SY$353949c1_6f559e0_(thisItf: Tuple2[Ref, Types], p_V0: Slice[Ref]) returns (n_V0: Int, err_V0: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(Mem_6f559e0_SY$353949c1_6f559e0_(thisItf), write)
  requires true && (forall fn$$0: Int :: { (ShArrayloc((sarray(p_V0): ShArray[Ref]), sadd((soffset(p_V0): Int), fn$$0)): Ref) } 0 <= fn$$0 && fn$$0 < (slen(p_V0): Int) ==> acc((ShArrayloc((sarray(p_V0): ShArray[Ref]), sadd((soffset(p_V0): Int), fn$$0)): Ref).val$_Int, 1 / 1000))
  ensures acc(Mem_6f559e0_SY$353949c1_6f559e0_(thisItf), write)
  ensures true && (forall fn$$1: Int :: { (ShArrayloc((sarray(p_V0): ShArray[Ref]), sadd((soffset(p_V0): Int), fn$$1)): Ref) } 0 <= fn$$1 && fn$$1 < (slen(p_V0): Int) ==> acc((ShArrayloc((sarray(p_V0): ShArray[Ref]), sadd((soffset(p_V0): Int), fn$$1)): Ref).val$_Int, 1 / 1000))
  ensures 0 <= n_V0 && n_V0 <= (slen(p_V0): Int)
  ensures assertArg2_Bool(comparableInterface(err_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) && n_V0 == (slen(p_V0): Int)
  ensures Size_6f559e0_SY$353949c1_6f559e0_(thisItf) >= old(Size_6f559e0_SY$353949c1_6f559e0_(thisItf))


method IsOfPrimitiveType_test_b40dce56_F()


// decreases 
method PutUint16_bf01f2a6_MlittleEndian(e_V0: Int, b_V0: Slice[Ref], v_V0: Int)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write)


// decreases 
method PutUint32_bf01f2a6_MlittleEndian(e_V0: Int, b_V0: Slice[Ref], v_V0: Int)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)


// decreases 
method PutUint64_bf01f2a6_MlittleEndian(e_V0: Int, b_V0: Slice[Ref], v_V0: Int)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref).val$_Int, write)


// decreases 
method PutUint16_bf01f2a6_MbigEndian(e_V0: Int, b_V0: Slice[Ref], v_V0: Int)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write)


// decreases 
method PutUint32_bf01f2a6_MbigEndian(e_V0: Int, b_V0: Slice[Ref], v_V0: Int)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)


// decreases 
method PutUint64_bf01f2a6_MbigEndian(e_V0: Int, b_V0: Slice[Ref], v_V0: Int)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref).val$_Int, write)


// decreases 
method Size_bf01f2a6_F(v_V0: Tuple2[Ref, Types]) returns (P0_PO0: Int)


// decreases _
method Sprintf_1402f601_F(format_V0: Int, v_V0: Slice[Ref]) returns (P0_PO0: Int)
  requires (forall i_V1: Int :: { (ShArrayloc((sarray(v_V0): ShArray[Ref]), sadd((soffset(v_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(v_V0): Int) ==> acc((ShArrayloc((sarray(v_V0): ShArray[Ref]), sadd((soffset(v_V0): Int), i_V1)): Ref).val$_Tuple2_RefTypes, 1 / 1000))
  ensures (forall i_V1: Int :: { (ShArrayloc((sarray(v_V0): ShArray[Ref]), sadd((soffset(v_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(v_V0): Int) ==> acc((ShArrayloc((sarray(v_V0): ShArray[Ref]), sadd((soffset(v_V0): Int), i_V1)): Ref).val$_Tuple2_RefTypes, 1 / 1000))


// decreases 
method String_1402f601_SY$8f734176_1402f601_(thisItf: Tuple2[Ref, Types]) returns (P0_PO0: Int)
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(Mem_1402f601_SY$8f734176_1402f601_(thisItf), write)
  ensures acc(Mem_1402f601_SY$8f734176_1402f601_(thisItf), write)


method Count_a397bb98_F(s_V0: Int, substr_V0: Int) returns (P0_PO0: Int)


method Contains_a397bb98_F(s_V0: Int, substr_V0: Int) returns (P0_PO0: Bool)


method ContainsAny_a397bb98_F(s_V0: Int, chars_V0: Int) returns (P0_PO0: Bool)


method ContainsRune_a397bb98_F(s_V0: Int, r_V0: Int) returns (P0_PO0: Bool)


method LastIndex_a397bb98_F(s_V0: Int, substr_V0: Int) returns (P0_PO0: Int)


method IndexByte_a397bb98_F(s_V0: Int, c_V0: Int) returns (P0_PO0: Int)


method IndexRune_a397bb98_F(s_V0: Int, r_V0: Int) returns (P0_PO0: Int)


method IndexAny_a397bb98_F(s_V0: Int, chars_V0: Int) returns (P0_PO0: Int)


method LastIndexAny_a397bb98_F(s_V0: Int, chars_V0: Int) returns (P0_PO0: Int)


method LastIndexByte_a397bb98_F(s_V0: Int, c_V0: Int) returns (P0_PO0: Int)


// decreases _
method SplitN_a397bb98_F(s_V0: Int, sep_V0: Int, n_V0: Int) returns (res_V0: Slice[Ref])
  ensures (forall i_V1: Int :: { (ShArrayloc((sarray(res_V0): ShArray[Ref]), sadd((soffset(res_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(res_V0): Int) ==> acc((ShArrayloc((sarray(res_V0): ShArray[Ref]), sadd((soffset(res_V0): Int), i_V1)): Ref).val$_Int, write))


// decreases _
method SplitAfterN_a397bb98_F(s_V0: Int, sep_V0: Int, n_V0: Int) returns (res_V0: Slice[Ref])
  ensures (forall i_V1: Int :: { (ShArrayloc((sarray(res_V0): ShArray[Ref]), sadd((soffset(res_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(res_V0): Int) ==> acc((ShArrayloc((sarray(res_V0): ShArray[Ref]), sadd((soffset(res_V0): Int), i_V1)): Ref).val$_Int, write))


// decreases _
method Split_a397bb98_F(s_V0: Int, sep_V0: Int) returns (res_V0: Slice[Ref])
  ensures (forall i_V1: Int :: { (ShArrayloc((sarray(res_V0): ShArray[Ref]), sadd((soffset(res_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(res_V0): Int) ==> acc((ShArrayloc((sarray(res_V0): ShArray[Ref]), sadd((soffset(res_V0): Int), i_V1)): Ref).val$_Int, write))


// decreases _
method SplitAfter_a397bb98_F(s_V0: Int, sep_V0: Int) returns (res_V0: Slice[Ref])
  ensures (forall i_V1: Int :: { (ShArrayloc((sarray(res_V0): ShArray[Ref]), sadd((soffset(res_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(res_V0): Int) ==> acc((ShArrayloc((sarray(res_V0): ShArray[Ref]), sadd((soffset(res_V0): Int), i_V1)): Ref).val$_Int, write))


method Fields_a397bb98_F(s_V0: Int) returns (res_V0: Slice[Ref])
  ensures (forall i_V1: Int :: { (ShArrayloc((sarray(res_V0): ShArray[Ref]), sadd((soffset(res_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(res_V0): Int) ==> acc((ShArrayloc((sarray(res_V0): ShArray[Ref]), sadd((soffset(res_V0): Int), i_V1)): Ref).val$_Int, write))


// decreases _
method ToUpper_a397bb98_F(s_V0: Int) returns (P0_PO0: Int)


// decreases _
method ToLower_a397bb98_F(s_V0: Int) returns (P0_PO0: Int)


// decreases _
method ToTitle_a397bb98_F(s_V0: Int) returns (P0_PO0: Int)


method ToValidUTF8_a397bb98_F(s_V0: Int, replacement_V0: Int) returns (P0_PO0: Int)


method isSeparator_a397bb98_F(r_V0: Int) returns (P0_PO0: Bool)


method Title_a397bb98_F(s_V0: Int) returns (P0_PO0: Int)


// decreases _
method Trim_a397bb98_F(s_V0: Int, cutset_V0: Int) returns (P0_PO0: Int)


// decreases _
method TrimLeft_a397bb98_F(s_V0: Int, cutset_V0: Int) returns (P0_PO0: Int)


// decreases _
method TrimRight_a397bb98_F(s_V0: Int, cutset_V0: Int) returns (P0_PO0: Int)


method TrimSpace_a397bb98_F(s_V0: Int) returns (P0_PO0: Int)


method TrimPrefix_a397bb98_F(s_V0: Int, prefix_V0: Int) returns (P0_PO0: Int)


// decreases _
method TrimSuffix_a397bb98_F(s_V0: Int, suffix_V0: Int) returns (P0_PO0: Int)


method Replace_a397bb98_F(s_V0: Int, oldS_V0: Int, newS_V0: Int, n_V0: Int) returns (P0_PO0: Int)


method ReplaceAll_a397bb98_F(s_V0: Int, oldS_V0: Int, newS_V0: Int) returns (P0_PO0: Int)


method EqualFold_a397bb98_F(s_V0: Int, t_V0: Int) returns (P0_PO0: Bool)


// decreases _
method Index_a397bb98_F(s_V0: Int, substr_V0: Int) returns (P0_PO0: Int)


// decreases _
method Unwrap_c085d058_F(err_V0: Tuple2[Ref, Types]) returns (res_V0: Tuple2[Ref, Types])
  requires acc(dynamic_pred_3(err_V0), write)
  ensures acc(dynamic_pred_3(res_V0), write)


// decreases _
method Is_c085d058_F(err_V0: Tuple2[Ref, Types], target_V0: Tuple2[Ref, Types]) returns (P0_PO0: Bool)


// decreases _
method As_c085d058_F(err_V0: Tuple2[Ref, Types], target_V0: Tuple2[Ref, Types]) returns (P0_PO0: Bool)
  requires !assertArg2_Bool(comparableInterface(target_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), target_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))


// decreases _
method Error_a58fd4a8_MerrOrMsg(m_V0: Tuple2[Int, Tuple2[Ref, Types]]) returns (P0_PO0: Int)
  requires acc(dynamic_pred_3((tuple2((box_Poly(m_V0): Ref), errOrMsg_a58fd4a8_T_Types()): Tuple2[Ref, Types])), write)
  ensures acc(dynamic_pred_3((tuple2((box_Poly(m_V0): Ref), errOrMsg_a58fd4a8_T_Types()): Tuple2[Ref, Types])), write)


// decreases _
method Error_a58fd4a8_MbasicError(e_V0: Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref]) returns (P0_PO0: Int)
  requires acc(dynamic_pred_3((tuple2((box_Poly(e_V0): Ref), basicError_a58fd4a8_T_Types()): Tuple2[Ref, Types])), write)
  ensures acc(dynamic_pred_3((tuple2((box_Poly(e_V0): Ref), basicError_a58fd4a8_T_Types()): Tuple2[Ref, Types])), write)


// decreases 
method Is_a58fd4a8_MbasicError(e_V0: Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref], err_V0: Tuple2[Ref, Types]) returns (P0_PO0: Bool)
  requires comparableInterface(err_V0)


// decreases 
method As_a58fd4a8_MbasicError(e_V0: Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref], _as_V0: Tuple2[Ref, Types]) returns (P0_PO0: Bool)
  requires !assertArg2_Bool(comparableInterface(_as_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), _as_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))


method ctxPairs_a58fd4a8_MbasicError(e_V0: Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref]) returns (res_V0: Slice[ShStruct2[Ref, Ref]])
  requires acc(dynamic_pred_3((tuple2((box_Poly(e_V0): Ref), basicError_a58fd4a8_T_Types()): Tuple2[Ref, Types])), 1 / 16)
  ensures acc(dynamic_pred_3((tuple2((box_Poly(e_V0): Ref), basicError_a58fd4a8_T_Types()): Tuple2[Ref, Types])), 1 / 16)
  ensures true && (forall fn$$0: Int :: { (ShArrayloc((sarray(res_V0): ShArray[ShStruct2[Ref, Ref]]), sadd((soffset(res_V0): Int), fn$$0)): ShStruct2[Ref, Ref]) } 0 <= fn$$0 && fn$$0 < (slen(res_V0): Int) ==> true) && (forall fn$$0: Int :: { (ShArrayloc((sarray(res_V0): ShArray[ShStruct2[Ref, Ref]]), sadd((soffset(res_V0): Int), fn$$0)): ShStruct2[Ref, Ref]) } 0 <= fn$$0 && fn$$0 < (slen(res_V0): Int) ==> acc((ShStructget0of2((ShArrayloc((sarray(res_V0): ShArray[ShStruct2[Ref, Ref]]), sadd((soffset(res_V0): Int), fn$$0)): ShStruct2[Ref, Ref])): Ref).val$_Int, write)) && (forall fn$$0: Int :: { (ShArrayloc((sarray(res_V0): ShArray[ShStruct2[Ref, Ref]]), sadd((soffset(res_V0): Int), fn$$0)): ShStruct2[Ref, Ref]) } 0 <= fn$$0 && fn$$0 < (slen(res_V0): Int) ==> acc((ShStructget1of2((ShArrayloc((sarray(res_V0): ShArray[ShStruct2[Ref, Ref]]), sadd((soffset(res_V0): Int), fn$$0)): ShStruct2[Ref, Ref])): Ref).val$_Tuple2_RefTypes, write))


// decreases 
method WithCtx_a58fd4a8_F(err_V0: Tuple2[Ref, Types], errCtx_V0: Slice[Ref]) returns (res_V0: Tuple2[Ref, Types])
  requires acc(dynamic_pred_3(err_V0), write)
  requires (forall i_V1: Int :: { (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(errCtx_V0): Int) ==> acc((ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref).val$_Tuple2_RefTypes, constant_ReadL15_b40dce56_G()))
  ensures (forall i_V1: Int :: { (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(errCtx_V0): Int) ==> acc((ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref).val$_Tuple2_RefTypes, constant_ReadL15_b40dce56_G()))
  ensures !assertArg2_Bool(comparableInterface(res_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) && acc(dynamic_pred_3(res_V0), write)
  ensures typeOfInterface_Y$1dcebcb0_a4af0e5e_(res_V0) == basicError_a58fd4a8_T_Types()
  ensures (get1of2((get0of4(assertArg2_Tuple4_Tuple2_IntTuple2_RefTypesRefTuple2_RefTypesRef(behavioral_subtype_Types(typeOfInterface_Y$1dcebcb0_a4af0e5e_(res_V0), basicError_a58fd4a8_T_Types()), (unbox_Poly((get0of2(res_V0): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref]))): Tuple2[Int, Tuple2[Ref, Types]])): Tuple2[Ref, Types]) == err_V0
  ensures acc(dynamic_pred_3(res_V0), write) && (get1of2((get0of4(assertArg2_Tuple4_Tuple2_IntTuple2_RefTypesRefTuple2_RefTypesRef(behavioral_subtype_Types(typeOfInterface_Y$1dcebcb0_a4af0e5e_(res_V0), basicError_a58fd4a8_T_Types()), (unbox_Poly((get0of2(res_V0): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref]))): Tuple2[Int, Tuple2[Ref, Types]])): Tuple2[Ref, Types]) == err_V0 --* acc(dynamic_pred_3(err_V0), write)


// decreases 
method Wrap_a58fd4a8_F(msg_V0: Tuple2[Ref, Types], cause_V0: Tuple2[Ref, Types], errCtx_V0: Slice[Ref]) returns (res_V0: Tuple2[Ref, Types])
  requires acc(dynamic_pred_3(msg_V0), write) && acc(dynamic_pred_3(cause_V0), write)
  requires (forall i_V1: Int :: { (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(errCtx_V0): Int) ==> acc((ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref).val$_Tuple2_RefTypes, constant_ReadL15_b40dce56_G()))
  ensures (forall i_V1: Int :: { (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(errCtx_V0): Int) ==> acc((ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref).val$_Tuple2_RefTypes, constant_ReadL15_b40dce56_G()))
  ensures !assertArg2_Bool(comparableInterface(res_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) && acc(dynamic_pred_3(res_V0), write)
  ensures typeOfInterface_Y$1dcebcb0_a4af0e5e_(res_V0) == basicError_a58fd4a8_T_Types()
  ensures (get1of2((get0of4(assertArg2_Tuple4_Tuple2_IntTuple2_RefTypesRefTuple2_RefTypesRef(behavioral_subtype_Types(typeOfInterface_Y$1dcebcb0_a4af0e5e_(res_V0), basicError_a58fd4a8_T_Types()), (unbox_Poly((get0of2(res_V0): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref]))): Tuple2[Int, Tuple2[Ref, Types]])): Tuple2[Ref, Types]) == msg_V0
  ensures (get2of4(assertArg2_Tuple4_Tuple2_IntTuple2_RefTypesRefTuple2_RefTypesRef(behavioral_subtype_Types(typeOfInterface_Y$1dcebcb0_a4af0e5e_(res_V0), basicError_a58fd4a8_T_Types()), (unbox_Poly((get0of2(res_V0): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref]))): Tuple2[Ref, Types]) == cause_V0
  ensures acc(dynamic_pred_3(res_V0), write) && (get1of2((get0of4(assertArg2_Tuple4_Tuple2_IntTuple2_RefTypesRefTuple2_RefTypesRef(behavioral_subtype_Types(typeOfInterface_Y$1dcebcb0_a4af0e5e_(res_V0), basicError_a58fd4a8_T_Types()), (unbox_Poly((get0of2(res_V0): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref]))): Tuple2[Int, Tuple2[Ref, Types]])): Tuple2[Ref, Types]) == msg_V0 && (get2of4(assertArg2_Tuple4_Tuple2_IntTuple2_RefTypesRefTuple2_RefTypesRef(behavioral_subtype_Types(typeOfInterface_Y$1dcebcb0_a4af0e5e_(res_V0), basicError_a58fd4a8_T_Types()), (unbox_Poly((get0of2(res_V0): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref]))): Tuple2[Ref, Types]) == cause_V0 --* acc(dynamic_pred_3(msg_V0), write) && acc(dynamic_pred_3(cause_V0), write)


// decreases 
method WrapStr_a58fd4a8_F(msg_V0: Int, cause_V0: Tuple2[Ref, Types], errCtx_V0: Slice[Ref]) returns (res_V0: Tuple2[Ref, Types])
  requires acc(dynamic_pred_3(cause_V0), write)
  requires (forall i_V1: Int :: { (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(errCtx_V0): Int) ==> acc((ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref).val$_Tuple2_RefTypes, constant_ReadL15_b40dce56_G()))
  ensures (forall i_V1: Int :: { (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(errCtx_V0): Int) ==> acc((ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref).val$_Tuple2_RefTypes, constant_ReadL15_b40dce56_G()))
  ensures !assertArg2_Bool(comparableInterface(res_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) && acc(dynamic_pred_3(res_V0), write)
  ensures typeOfInterface_Y$1dcebcb0_a4af0e5e_(res_V0) == basicError_a58fd4a8_T_Types()
  ensures (get2of4(assertArg2_Tuple4_Tuple2_IntTuple2_RefTypesRefTuple2_RefTypesRef(behavioral_subtype_Types(typeOfInterface_Y$1dcebcb0_a4af0e5e_(res_V0), basicError_a58fd4a8_T_Types()), (unbox_Poly((get0of2(res_V0): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref]))): Tuple2[Ref, Types]) == cause_V0
  ensures acc(dynamic_pred_3(res_V0), write) && (get2of4(assertArg2_Tuple4_Tuple2_IntTuple2_RefTypesRefTuple2_RefTypesRef(behavioral_subtype_Types(typeOfInterface_Y$1dcebcb0_a4af0e5e_(res_V0), basicError_a58fd4a8_T_Types()), (unbox_Poly((get0of2(res_V0): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref]))): Tuple2[Ref, Types]) == cause_V0 --* acc(dynamic_pred_3(cause_V0), write)


// decreases 
method New_a58fd4a8_F(msg_V0: Int, errCtx_V0: Slice[Ref]) returns (res_V0: Tuple2[Ref, Types])
  requires (forall i_V1: Int :: { (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(errCtx_V0): Int) ==> acc((ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref).val$_Tuple2_RefTypes, constant_ReadL15_b40dce56_G()))
  ensures (forall i_V1: Int :: { (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(errCtx_V0): Int) ==> acc((ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref).val$_Tuple2_RefTypes, constant_ReadL15_b40dce56_G()))
  ensures !assertArg2_Bool(comparableInterface(res_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) && acc(dynamic_pred_3(res_V0), write)
  ensures typeOfInterface_Y$1dcebcb0_a4af0e5e_(res_V0) == basicError_a58fd4a8_T_Types()
  ensures comparableInterface(res_V0)


// decreases 
method Error_a58fd4a8_MList(e_V0: Slice[Ref]) returns (P0_PO0: Int)
  requires acc(dynamic_pred_3((tuple2((box_Poly(e_V0): Ref), List_a58fd4a8_T_Types()): Tuple2[Ref, Types])), write)
  ensures acc(dynamic_pred_3((tuple2((box_Poly(e_V0): Ref), List_a58fd4a8_T_Types()): Tuple2[Ref, Types])), write)


// decreases 
method ToError_a58fd4a8_MList(e_V0: Slice[Ref]) returns (err_V0: Tuple2[Ref, Types])
  requires acc(dynamic_pred_3((tuple2((box_Poly(e_V0): Ref), List_a58fd4a8_T_Types()): Tuple2[Ref, Types])), write)
  ensures (slen(e_V0): Int) == 0 ==> assertArg2_Bool(comparableInterface(err_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  ensures acc(dynamic_pred_3(err_V0), write)


// decreases 
method errCtxToFields_a58fd4a8_F(errCtx_V0: Slice[Ref]) returns (res_V0: Ref)
  requires true && (forall fn$$0: Int :: { (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), fn$$0)): Ref) } 0 <= fn$$0 && fn$$0 < (slen(errCtx_V0): Int) ==> acc((ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), fn$$0)): Ref).val$_Tuple2_RefTypes, constant_ReadL15_b40dce56_G()))
  ensures true && (forall fn$$1: Int :: { (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), fn$$1)): Ref) } 0 <= fn$$1 && fn$$1 < (slen(errCtx_V0): Int) ==> acc((ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), fn$$1)): Ref).val$_Tuple2_RefTypes, constant_ReadL15_b40dce56_G()))
  ensures (slen(errCtx_V0): Int) == 0 ==> res_V0 == null
  ensures (slen(errCtx_V0): Int) > 0 ==> acc(res_V0.underlyingMapField, write)


// decreases 
method Equal_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]], u_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (P0_PO0: Bool)


// decreases 
method String_531757d2_MMonth(m_V0: Int) returns (res_V0: Int)
  ensures m_V0 == constant_January_531757d2_G() ==> res_V0 == stringLit4a616e75617279()
  ensures m_V0 == constant_February_531757d2_G() ==> res_V0 == stringLit4665627275617279()
  ensures m_V0 == constant_March_531757d2_G() ==> res_V0 == stringLit4d61726368()
  ensures m_V0 == constant_April_531757d2_G() ==> res_V0 == stringLit417072696c()
  ensures m_V0 == constant_May_531757d2_G() ==> res_V0 == stringLit4d6179()
  ensures m_V0 == constant_June_531757d2_G() ==> res_V0 == stringLit4a756e65()
  ensures m_V0 == constant_July_531757d2_G() ==> res_V0 == stringLit4a756c79()
  ensures m_V0 == constant_August_531757d2_G() ==> res_V0 == stringLit417567757374()
  ensures m_V0 == constant_September_531757d2_G() ==> res_V0 == stringLit53657074656d626572()
  ensures m_V0 == constant_October_531757d2_G() ==> res_V0 == stringLit4f63746f626572()
  ensures m_V0 == constant_November_531757d2_G() ==> res_V0 == stringLit4e6f76656d626572()
  ensures m_V0 == constant_December_531757d2_G() ==> res_V0 == stringLit446563656d626572()


// decreases 
method String_531757d2_MWeekday(d_V0: Int) returns (res_V0: Int)
  ensures d_V0 == constant_Sunday_531757d2_G() ==> res_V0 == stringLit53756e646179()
  ensures d_V0 == constant_Monday_531757d2_G() ==> res_V0 == stringLit4d6f6e646179()
  ensures d_V0 == constant_Tuesday_531757d2_G() ==> res_V0 == stringLit54756573646179()
  ensures d_V0 == constant_Wednesday_531757d2_G() ==> res_V0 == stringLit5765646e6573646179()
  ensures d_V0 == constant_Thursday_531757d2_G() ==> res_V0 == stringLit5468757273646179()
  ensures d_V0 == constant_Friday_531757d2_G() ==> res_V0 == stringLit467269646179()
  ensures d_V0 == constant_Saturday_531757d2_G() ==> res_V0 == stringLit5361747572646179()


// decreases 
method Date_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (year_V0: Int, month_V0: Int, day_V0: Int)


// decreases 
method Year_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (P0_PO0: Int)


// decreases 
method Month_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (P0_PO0: Int)


// decreases 
method Day_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (P0_PO0: Int)


// decreases 
method Weekday_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (P0_PO0: Int)


// decreases 
method ISOWeek_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (year_V0: Int, week_V0: Int)


// decreases 
method Clock_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (hour_V0: Int, min_V0: Int, sec_V0: Int)


// decreases 
method YearDay_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (res_V0: Int)
  ensures 1 <= res_V0 && res_V0 <= 365


// decreases 
method String_531757d2_MDuration(d_V0: Int) returns (P0_PO0: Int)


// decreases 
method Nanoseconds_531757d2_MDuration(d_V0: Int) returns (P0_PO0: Int)


// decreases 
method Microseconds_531757d2_MDuration(d_V0: Int) returns (P0_PO0: Int)


// decreases 
method Milliseconds_531757d2_MDuration(d_V0: Int) returns (P0_PO0: Int)


// decreases 
method Add_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]], d_V0: Int) returns (P0_PO0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]])


// decreases 
method Sub_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]], u_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (P0_PO0: Int)


// decreases 
method Since_531757d2_F(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (P0_PO0: Int)


// decreases 
method Until_531757d2_F(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (P0_PO0: Int)


// decreases 
method AddDate_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]], years_V0: Int, months_V0: Int, days_V0: Int) returns (P0_PO0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]])


// decreases 
method Now_531757d2_F() returns (P0_PO0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]])


// decreases 
method UTC_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (P0_PO0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]])


// decreases 
method Local_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (P0_PO0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]])


// decreases 
method In_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]], loc_V0: ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]) returns (P0_PO0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]])
  requires true && acc((ShStructget0of6(loc_V0): Ref).val$_Int, write) && acc((ShStructget1of6(loc_V0): Ref).val$_Slice_ShStruct4_RefRefRefRef, write) && acc((ShStructget2of6(loc_V0): Ref).val$_Int, write) && acc((ShStructget3of6(loc_V0): Ref).val$_Int, write) && acc((ShStructget4of6(loc_V0): Ref).val$_Int, write) && acc((ShStructget5of6(loc_V0): Ref).val$_ShStruct3_RefRefRef, write)
  ensures true && acc((ShStructget0of6(loc_V0): Ref).val$_Int, write) && acc((ShStructget1of6(loc_V0): Ref).val$_Slice_ShStruct4_RefRefRefRef, write) && acc((ShStructget2of6(loc_V0): Ref).val$_Int, write) && acc((ShStructget3of6(loc_V0): Ref).val$_Int, write) && acc((ShStructget4of6(loc_V0): Ref).val$_Int, write) && acc((ShStructget5of6(loc_V0): Ref).val$_ShStruct3_RefRefRef, write)


// decreases 
method Location_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (res_V0: ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref])
  ensures !((get2of3(t_V0): ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]) == shStructDefault_$nameA_String$$$_S_$$$_txA_SliceDefinedzoneTrans_531757d2_T$$$_S_$$$$$$_S_$$$_extendA_String$$$_S_$$$_cacheStartA_Intint64$$$_S_$$$_cacheEndA_Intint64$$$_S_$$$_cacheZoneA_PointerDefinedzone_531757d2_T$$$_S_$$$$$$_S_$$$$()) ==> res_V0 == (get2of3(t_V0): ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref])


// decreases 
method Zone_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (name_V0: Int, offset_V0: Int)


// decreases 
method Unix_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (P0_PO0: Int)


// decreases 
method UnixNano_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (P0_PO0: Int)


// decreases 
method MarshalBinary_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (P0_PO0: Slice[Ref], P1_PO0: Tuple2[Ref, Types])


// decreases 
method UnmarshalBinary_531757d2_PMTime(t_V0: ShStruct3[Ref, Ref, Ref], data_V0: Slice[Ref], p_V0: Perm) returns (P0_PO0: Tuple2[Ref, Types])
  requires true && acc((ShStructget0of3(t_V0): Ref).val$_Int, write) && acc((ShStructget1of3(t_V0): Ref).val$_Int, write) && acc((ShStructget2of3(t_V0): Ref).val$_ShStruct6_RefRefRefRefRefRef, write)
  requires p_V0 > 0 / 1
  requires (forall i_V1: Int :: { (ShArrayloc((sarray(data_V0): ShArray[Ref]), sadd((soffset(data_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(data_V0): Int) ==> acc((ShArrayloc((sarray(data_V0): ShArray[Ref]), sadd((soffset(data_V0): Int), i_V1)): Ref).val$_Int, p_V0))
  ensures true && acc((ShStructget0of3(t_V0): Ref).val$_Int, write) && acc((ShStructget1of3(t_V0): Ref).val$_Int, write) && acc((ShStructget2of3(t_V0): Ref).val$_ShStruct6_RefRefRefRefRefRef, write)
  ensures (forall i_V1: Int :: { (ShArrayloc((sarray(data_V0): ShArray[Ref]), sadd((soffset(data_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(data_V0): Int) ==> acc((ShArrayloc((sarray(data_V0): ShArray[Ref]), sadd((soffset(data_V0): Int), i_V1)): Ref).val$_Int, p_V0))


// decreases 
method GobEncode_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (res_V0: Slice[Ref], P1_PO0: Tuple2[Ref, Types])
  ensures (forall i_V1: Int :: { (ShArrayloc((sarray(res_V0): ShArray[Ref]), sadd((soffset(res_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(res_V0): Int) ==> acc((ShArrayloc((sarray(res_V0): ShArray[Ref]), sadd((soffset(res_V0): Int), i_V1)): Ref).val$_Int, write))


// decreases 
method GobDecode_531757d2_PMTime(t_V0: ShStruct3[Ref, Ref, Ref], data_V0: Slice[Ref], p_V0: Perm) returns (P0_PO0: Tuple2[Ref, Types])
  requires true && acc((ShStructget0of3(t_V0): Ref).val$_Int, write) && acc((ShStructget1of3(t_V0): Ref).val$_Int, write) && acc((ShStructget2of3(t_V0): Ref).val$_ShStruct6_RefRefRefRefRefRef, write)
  requires p_V0 > 0 / 1
  requires (forall i_V1: Int :: { (ShArrayloc((sarray(data_V0): ShArray[Ref]), sadd((soffset(data_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(data_V0): Int) ==> acc((ShArrayloc((sarray(data_V0): ShArray[Ref]), sadd((soffset(data_V0): Int), i_V1)): Ref).val$_Int, p_V0))
  ensures true && acc((ShStructget0of3(t_V0): Ref).val$_Int, write) && acc((ShStructget1of3(t_V0): Ref).val$_Int, write) && acc((ShStructget2of3(t_V0): Ref).val$_ShStruct6_RefRefRefRefRefRef, write)
  ensures (forall i_V1: Int :: { (ShArrayloc((sarray(data_V0): ShArray[Ref]), sadd((soffset(data_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(data_V0): Int) ==> acc((ShArrayloc((sarray(data_V0): ShArray[Ref]), sadd((soffset(data_V0): Int), i_V1)): Ref).val$_Int, p_V0))


// decreases 
method MarshalJSON_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (res_V0: Slice[Ref], P1_PO0: Tuple2[Ref, Types])
  ensures (forall i_V1: Int :: { (ShArrayloc((sarray(res_V0): ShArray[Ref]), sadd((soffset(res_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(res_V0): Int) ==> acc((ShArrayloc((sarray(res_V0): ShArray[Ref]), sadd((soffset(res_V0): Int), i_V1)): Ref).val$_Int, write))


// decreases 
method UnmarshalJSON_531757d2_PMTime(t_V0: ShStruct3[Ref, Ref, Ref], data_V0: Slice[Ref], p_V0: Perm) returns (P0_PO0: Tuple2[Ref, Types])
  requires true && acc((ShStructget0of3(t_V0): Ref).val$_Int, write) && acc((ShStructget1of3(t_V0): Ref).val$_Int, write) && acc((ShStructget2of3(t_V0): Ref).val$_ShStruct6_RefRefRefRefRefRef, write)
  requires p_V0 > 0 / 1
  requires (forall i_V1: Int :: { (ShArrayloc((sarray(data_V0): ShArray[Ref]), sadd((soffset(data_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(data_V0): Int) ==> acc((ShArrayloc((sarray(data_V0): ShArray[Ref]), sadd((soffset(data_V0): Int), i_V1)): Ref).val$_Int, p_V0))
  ensures true && acc((ShStructget0of3(t_V0): Ref).val$_Int, write) && acc((ShStructget1of3(t_V0): Ref).val$_Int, write) && acc((ShStructget2of3(t_V0): Ref).val$_ShStruct6_RefRefRefRefRefRef, write)
  ensures (forall i_V1: Int :: { (ShArrayloc((sarray(data_V0): ShArray[Ref]), sadd((soffset(data_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(data_V0): Int) ==> acc((ShArrayloc((sarray(data_V0): ShArray[Ref]), sadd((soffset(data_V0): Int), i_V1)): Ref).val$_Int, p_V0))


// decreases 
method MarshalText_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]]) returns (res_V0: Slice[Ref], P1_PO0: Tuple2[Ref, Types])
  ensures (forall i_V1: Int :: { (ShArrayloc((sarray(res_V0): ShArray[Ref]), sadd((soffset(res_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(res_V0): Int) ==> acc((ShArrayloc((sarray(res_V0): ShArray[Ref]), sadd((soffset(res_V0): Int), i_V1)): Ref).val$_Int, write))


// decreases 
method UnmarshalText_531757d2_PMTime(t_V0: ShStruct3[Ref, Ref, Ref], data_V0: Slice[Ref], p_V0: Perm) returns (P0_PO0: Tuple2[Ref, Types])
  requires true && acc((ShStructget0of3(t_V0): Ref).val$_Int, write) && acc((ShStructget1of3(t_V0): Ref).val$_Int, write) && acc((ShStructget2of3(t_V0): Ref).val$_ShStruct6_RefRefRefRefRefRef, write)
  requires p_V0 > 0 / 1
  requires (forall i_V1: Int :: { (ShArrayloc((sarray(data_V0): ShArray[Ref]), sadd((soffset(data_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(data_V0): Int) ==> acc((ShArrayloc((sarray(data_V0): ShArray[Ref]), sadd((soffset(data_V0): Int), i_V1)): Ref).val$_Int, p_V0))
  ensures true && acc((ShStructget0of3(t_V0): Ref).val$_Int, write) && acc((ShStructget1of3(t_V0): Ref).val$_Int, write) && acc((ShStructget2of3(t_V0): Ref).val$_ShStruct6_RefRefRefRefRefRef, write)
  ensures (forall i_V1: Int :: { (ShArrayloc((sarray(data_V0): ShArray[Ref]), sadd((soffset(data_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(data_V0): Int) ==> acc((ShArrayloc((sarray(data_V0): ShArray[Ref]), sadd((soffset(data_V0): Int), i_V1)): Ref).val$_Int, p_V0))


// decreases 
method Unix_531757d2_F(sec_V0: Int, nsec_V0: Int) returns (P0_PO0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]])


// decreases 
method Date_531757d2_F(year_V0: Int, month_V0: Int, day_V0: Int, hour_V0: Int, min_V0: Int, sec_V0: Int, nsec_V0: Int, loc_V0: ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref], p_V0: Perm) returns (P0_PO0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]])
  requires p_V0 > 0 / 1
  requires true && acc((ShStructget0of6(loc_V0): Ref).val$_Int, p_V0) && acc((ShStructget1of6(loc_V0): Ref).val$_Slice_ShStruct4_RefRefRefRef, p_V0) && acc((ShStructget2of6(loc_V0): Ref).val$_Int, p_V0) && acc((ShStructget3of6(loc_V0): Ref).val$_Int, p_V0) && acc((ShStructget4of6(loc_V0): Ref).val$_Int, p_V0) && acc((ShStructget5of6(loc_V0): Ref).val$_ShStruct3_RefRefRef, p_V0)
  ensures true && acc((ShStructget0of6(loc_V0): Ref).val$_Int, p_V0) && acc((ShStructget1of6(loc_V0): Ref).val$_Slice_ShStruct4_RefRefRefRef, p_V0) && acc((ShStructget2of6(loc_V0): Ref).val$_Int, p_V0) && acc((ShStructget3of6(loc_V0): Ref).val$_Int, p_V0) && acc((ShStructget4of6(loc_V0): Ref).val$_Int, p_V0) && acc((ShStructget5of6(loc_V0): Ref).val$_ShStruct3_RefRefRef, p_V0)


// decreases 
method Truncate_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]], d_V0: Int) returns (P0_PO0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]])


// decreases 
method Round_531757d2_MTime(t_V0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]], d_V0: Int) returns (P0_PO0: Tuple3[Int, Int, ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref]])


// decreases _
method Sleep_531757d2_F(d_V0: Int)


// decreases 
method FixedZone_531757d2_F(name_V0: Int, offset_V0: Int) returns (res_V0: ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref])
  ensures true && acc((ShStructget0of6(res_V0): Ref).val$_Int, write) && acc((ShStructget1of6(res_V0): Ref).val$_Slice_ShStruct4_RefRefRefRef, write) && acc((ShStructget2of6(res_V0): Ref).val$_Int, write) && acc((ShStructget3of6(res_V0): Ref).val$_Int, write) && acc((ShStructget4of6(res_V0): Ref).val$_Int, write) && acc((ShStructget5of6(res_V0): Ref).val$_ShStruct3_RefRefRef, write)


method LoadLocation_531757d2_F(name_V0: Int) returns (P0_PO0: ShStruct6[Ref, Ref, Ref, Ref, Ref, Ref], P1_PO0: Tuple2[Ref, Types])


// decreases 
method PutUint64_bf01f2a6_SY$55c5ed_bf01f2a6_(thisItf: Tuple2[Ref, Types], b_V0: Slice[Ref], P1_PI0: Int)
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref).val$_Int, write)
{
  
  // decl 
  
  
  
  // assume false
  inhale false
  
  // if(typeOf(thisItf) == bigEndian_bf01f2a6_T) {...} else {...}
  if (typeOfInterface_Y$55c5ed_bf01f2a6_(thisItf) == bigEndian_bf01f2a6_T_Types()) {
    
    // thisItf.(bigEndian_bf01f2a6_T)PutUint64(b_V0, P1_PI0)
    assert !true || true
    PutUint64_bf01f2a6_MbigEndian(assertArg2_Int(behavioral_subtype_Types(typeOfInterface_Y$55c5ed_bf01f2a6_(thisItf), bigEndian_bf01f2a6_T_Types()), (unbox_Poly((get0of2(thisItf): Ref)): Int)), b_V0, P1_PI0)
    
    // return
    goto returnLabel
  }
  
  // if(typeOf(thisItf) == littleEndian_bf01f2a6_T) {...} else {...}
  if (typeOfInterface_Y$55c5ed_bf01f2a6_(thisItf) == littleEndian_bf01f2a6_T_Types()) {
    
    // thisItf.(littleEndian_bf01f2a6_T)PutUint64(b_V0, P1_PI0)
    assert !true || true
    PutUint64_bf01f2a6_MlittleEndian(assertArg2_Int(behavioral_subtype_Types(typeOfInterface_Y$55c5ed_bf01f2a6_(thisItf), littleEndian_bf01f2a6_T_Types()), (unbox_Poly((get0of2(thisItf): Ref)): Int)), b_V0, P1_PI0)
    
    // return
    goto returnLabel
  }
  label returnLabel
}

// decreases 
method ExchangeBufMem_faafd1d5_SY$91c0a5f1_faafd1d5_(thisItf: Tuple2[Ref, Types], buf_V0: Slice[Ref])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(dynamic_pred_1(thisItf), write)
  requires GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5_(thisItf) == buf_V0
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0, 0, (slen(buf_V0): Int)), write)
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0, 0, (slen(buf_V0): Int)), write) --* acc(dynamic_pred_1(thisItf), write) && GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5_(thisItf) == buf_V0
{
  
  // decl 
  
  
  
  // assume false
  inhale false
  
  // if(typeOf(thisItf) == *rawPath_faafd1d5_T) {...} else {...}
  if (typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf) == pointer_Types(rawPath_faafd1d5_T_Types())) {
    
    // thisItf.(*rawPath_faafd1d5_T)ExchangeBufMem(buf_V0)
    assert !true || true
    ExchangeBufMem_faafd1d5_PMrawPath(assertArg2_ShStruct2_RefRef(behavioral_subtype_Types(typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf), pointer_Types(rawPath_faafd1d5_T_Types())), (unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref])), buf_V0)
    
    // return
    goto returnLabel
  }
  label returnLabel
}

// decreases 
method SerializeTo_faafd1d5_SY$91c0a5f1_faafd1d5_(thisItf: Tuple2[Ref, Types], b_V0: Slice[Ref]) returns (e_V0: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(dynamic_pred_1(thisItf), write)
  requires acc(AbsSlice_Bytes_88c2f8cc_F(b_V0, 0, (slen(b_V0): Int)), write)
  ensures acc(dynamic_pred_1(thisItf), write)
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(b_V0, 0, (slen(b_V0): Int)), write)
  ensures GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5_(thisItf) == old(GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5_(thisItf))
  ensures !assertArg2_Bool(comparableInterface(e_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> acc(dynamic_pred_3(e_V0), write)
{
  inhale e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // decl 
  
  
  
  // assume false
  inhale false
  
  // if(typeOf(thisItf) == *rawPath_faafd1d5_T) {...} else {...}
  if (typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf) == pointer_Types(rawPath_faafd1d5_T_Types())) {
    
    // e_V0 = thisItf.(*rawPath_faafd1d5_T)SerializeTo(b_V0)
    assert !true || true
    e_V0 := SerializeTo_faafd1d5_PMrawPath(assertArg2_ShStruct2_RefRef(behavioral_subtype_Types(typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf), pointer_Types(rawPath_faafd1d5_T_Types())), (unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref])), b_V0)
    
    // return
    goto returnLabel
  }
  label returnLabel
}

// decreases 
method DecodeFromBytes_faafd1d5_SY$91c0a5f1_faafd1d5_(thisItf: Tuple2[Ref, Types], b_V0: Slice[Ref]) returns (err_V0: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(dynamic_pred_0(thisItf), write)
  requires acc(AbsSlice_Bytes_88c2f8cc_F(b_V0, 0, (slen(b_V0): Int)), write)
  ensures assertArg2_Bool(comparableInterface(err_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> acc(dynamic_pred_1(thisItf), write)
  ensures assertArg2_Bool(comparableInterface(err_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> b_V0 == GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5_(thisItf)
  ensures !assertArg2_Bool(comparableInterface(err_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> acc(dynamic_pred_3(err_V0), write)
  ensures !assertArg2_Bool(comparableInterface(err_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> acc(dynamic_pred_0(thisItf), write)
  ensures !assertArg2_Bool(comparableInterface(err_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> acc(AbsSlice_Bytes_88c2f8cc_F(b_V0, 0, (slen(b_V0): Int)), write)
{
  inhale err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // decl 
  
  
  
  // assume false
  inhale false
  
  // if(typeOf(thisItf) == *rawPath_faafd1d5_T) {...} else {...}
  if (typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf) == pointer_Types(rawPath_faafd1d5_T_Types())) {
    
    // err_V0 = thisItf.(*rawPath_faafd1d5_T)DecodeFromBytes(b_V0)
    assert !true || true
    err_V0 := DecodeFromBytes_faafd1d5_PMrawPath(assertArg2_ShStruct2_RefRef(behavioral_subtype_Types(typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf), pointer_Types(rawPath_faafd1d5_T_Types())), (unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref])), b_V0)
    
    // return
    goto returnLabel
  }
  label returnLabel
}

// decreases 
method DowngradePerm_faafd1d5_SY$91c0a5f1_faafd1d5_(thisItf: Tuple2[Ref, Types], buf_V0: Slice[Ref])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(dynamic_pred_1(thisItf), write)
  requires buf_V0 == GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5_(thisItf)
  ensures acc(dynamic_pred_0(thisItf), write)
  ensures acc(AbsSlice_Bytes_88c2f8cc_F(buf_V0, 0, (slen(buf_V0): Int)), write)
{
  
  // decl 
  
  
  
  // assume false
  inhale false
  
  // if(typeOf(thisItf) == *rawPath_faafd1d5_T) {...} else {...}
  if (typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf) == pointer_Types(rawPath_faafd1d5_T_Types())) {
    
    // thisItf.(*rawPath_faafd1d5_T)DowngradePerm(buf_V0)
    assert !true || true
    DowngradePerm_faafd1d5_PMrawPath(assertArg2_ShStruct2_RefRef(behavioral_subtype_Types(typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf), pointer_Types(rawPath_faafd1d5_T_Types())), (unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref])), buf_V0)
    
    // return
    goto returnLabel
  }
  label returnLabel
}

// decreases 
method PutUint16_bf01f2a6_SY$55c5ed_bf01f2a6_(thisItf: Tuple2[Ref, Types], b_V0: Slice[Ref], P1_PI0: Int)
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write)
{
  
  // decl 
  
  
  
  // assume false
  inhale false
  
  // if(typeOf(thisItf) == bigEndian_bf01f2a6_T) {...} else {...}
  if (typeOfInterface_Y$55c5ed_bf01f2a6_(thisItf) == bigEndian_bf01f2a6_T_Types()) {
    
    // thisItf.(bigEndian_bf01f2a6_T)PutUint16(b_V0, P1_PI0)
    assert !true || true
    PutUint16_bf01f2a6_MbigEndian(assertArg2_Int(behavioral_subtype_Types(typeOfInterface_Y$55c5ed_bf01f2a6_(thisItf), bigEndian_bf01f2a6_T_Types()), (unbox_Poly((get0of2(thisItf): Ref)): Int)), b_V0, P1_PI0)
    
    // return
    goto returnLabel
  }
  
  // if(typeOf(thisItf) == littleEndian_bf01f2a6_T) {...} else {...}
  if (typeOfInterface_Y$55c5ed_bf01f2a6_(thisItf) == littleEndian_bf01f2a6_T_Types()) {
    
    // thisItf.(littleEndian_bf01f2a6_T)PutUint16(b_V0, P1_PI0)
    assert !true || true
    PutUint16_bf01f2a6_MlittleEndian(assertArg2_Int(behavioral_subtype_Types(typeOfInterface_Y$55c5ed_bf01f2a6_(thisItf), littleEndian_bf01f2a6_T_Types()), (unbox_Poly((get0of2(thisItf): Ref)): Int)), b_V0, P1_PI0)
    
    // return
    goto returnLabel
  }
  label returnLabel
}

// decreases 
method PutUint32_bf01f2a6_SY$55c5ed_bf01f2a6_(thisItf: Tuple2[Ref, Types], b_V0: Slice[Ref], P1_PI0: Int)
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)
  ensures acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, write) && acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, write)
{
  
  // decl 
  
  
  
  // assume false
  inhale false
  
  // if(typeOf(thisItf) == bigEndian_bf01f2a6_T) {...} else {...}
  if (typeOfInterface_Y$55c5ed_bf01f2a6_(thisItf) == bigEndian_bf01f2a6_T_Types()) {
    
    // thisItf.(bigEndian_bf01f2a6_T)PutUint32(b_V0, P1_PI0)
    assert !true || true
    PutUint32_bf01f2a6_MbigEndian(assertArg2_Int(behavioral_subtype_Types(typeOfInterface_Y$55c5ed_bf01f2a6_(thisItf), bigEndian_bf01f2a6_T_Types()), (unbox_Poly((get0of2(thisItf): Ref)): Int)), b_V0, P1_PI0)
    
    // return
    goto returnLabel
  }
  
  // if(typeOf(thisItf) == littleEndian_bf01f2a6_T) {...} else {...}
  if (typeOfInterface_Y$55c5ed_bf01f2a6_(thisItf) == littleEndian_bf01f2a6_T_Types()) {
    
    // thisItf.(littleEndian_bf01f2a6_T)PutUint32(b_V0, P1_PI0)
    assert !true || true
    PutUint32_bf01f2a6_MlittleEndian(assertArg2_Int(behavioral_subtype_Types(typeOfInterface_Y$55c5ed_bf01f2a6_(thisItf), littleEndian_bf01f2a6_T_Types()), (unbox_Poly((get0of2(thisItf): Ref)): Int)), b_V0, P1_PI0)
    
    // return
    goto returnLabel
  }
  label returnLabel
}

// decreases 
method Error_a4af0e5e_SY$1dcebcb0_a4af0e5e_(thisItf: Tuple2[Ref, Types]) returns (P0_PO0: Int)
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(dynamic_pred_3(thisItf), write)
  ensures acc(dynamic_pred_3(thisItf), write)
{
  inhale P0_PO0 == stringLit()
  
  // decl 
  
  
  
  // assume false
  inhale false
  
  // if(typeOf(thisItf) == List_a58fd4a8_T) {...} else {...}
  if (typeOfInterface_Y$1dcebcb0_a4af0e5e_(thisItf) == List_a58fd4a8_T_Types()) {
    
    // P0_PO0 = thisItf.(List_a58fd4a8_T)Error()
    assert !true || true
    P0_PO0 := Error_a58fd4a8_MList(assertArg2_Slice_Ref(behavioral_subtype_Types(typeOfInterface_Y$1dcebcb0_a4af0e5e_(thisItf), List_a58fd4a8_T_Types()), (unbox_Poly((get0of2(thisItf): Ref)): Slice[Ref])))
    
    // return
    goto returnLabel
  }
  
  // if(typeOf(thisItf) == basicError_a58fd4a8_T) {...} else {...}
  if (typeOfInterface_Y$1dcebcb0_a4af0e5e_(thisItf) == basicError_a58fd4a8_T_Types()) {
    
    // P0_PO0 = thisItf.(basicError_a58fd4a8_T)Error()
    assert !true || true
    P0_PO0 := Error_a58fd4a8_MbasicError(assertArg2_Tuple4_Tuple2_IntTuple2_RefTypesRefTuple2_RefTypesRef(behavioral_subtype_Types(typeOfInterface_Y$1dcebcb0_a4af0e5e_(thisItf), basicError_a58fd4a8_T_Types()), (unbox_Poly((get0of2(thisItf): Ref)): Tuple4[Tuple2[Int, Tuple2[Ref, Types]], Ref, Tuple2[Ref, Types], Ref])))
    
    // return
    goto returnLabel
  }
  
  // if(typeOf(thisItf) == errOrMsg_a58fd4a8_T) {...} else {...}
  if (typeOfInterface_Y$1dcebcb0_a4af0e5e_(thisItf) == errOrMsg_a58fd4a8_T_Types()) {
    
    // P0_PO0 = thisItf.(errOrMsg_a58fd4a8_T)Error()
    assert !true || true
    P0_PO0 := Error_a58fd4a8_MerrOrMsg(assertArg2_Tuple2_IntTuple2_RefTypes(behavioral_subtype_Types(typeOfInterface_Y$1dcebcb0_a4af0e5e_(thisItf), errOrMsg_a58fd4a8_T_Types()), (unbox_Poly((get0of2(thisItf): Ref)): Tuple2[Int, Tuple2[Ref, Types]])))
    
    // return
    goto returnLabel
  }
  label returnLabel
}

// decreases 
method Reverse_faafd1d5_SY$91c0a5f1_faafd1d5_(thisItf: Tuple2[Ref, Types]) returns (p_V0: Tuple2[Ref, Types], e_V0: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(dynamic_pred_1(thisItf), write)
  ensures assertArg2_Bool(comparableInterface(e_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> !assertArg2_Bool(comparableInterface(p_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), p_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) && acc(dynamic_pred_1(p_V0), write)
  ensures !assertArg2_Bool(comparableInterface(e_V0) || comparableInterface((tuple2(null, nil_Types()): Tuple2[Ref, Types])), e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])) ==> acc(dynamic_pred_3(e_V0), write)
{
  inhale p_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  inhale e_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
  
  // decl 
  
  
  
  // assume false
  inhale false
  
  // if(typeOf(thisItf) == *rawPath_faafd1d5_T) {...} else {...}
  if (typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf) == pointer_Types(rawPath_faafd1d5_T_Types())) {
    
    // p_V0, e_V0 = thisItf.(*rawPath_faafd1d5_T)Reverse()
    assert !true || true
    p_V0, e_V0 := Reverse_faafd1d5_PMrawPath(assertArg2_ShStruct2_RefRef(behavioral_subtype_Types(typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf), pointer_Types(rawPath_faafd1d5_T_Types())), (unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref])))
    
    // return
    goto returnLabel
  }
  label returnLabel
}

// decreases 
method GetUnderlyingBuf_faafd1d5_PMrawPath_pres_termination_proof(r_V0: ShStruct2[Ref, Ref])
{
  var $condInEx: Bool
  inhale acc(dynamic_pred_1((tuple2((box_Poly(r_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), wildcard)
}

// decreases 
method Len_faafd1d5_PMrawPath_pres_termination_proof(p_V0: ShStruct2[Ref, Ref])
{
  var $condInEx: Bool
  inhale acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), wildcard)
}

// decreases 
method Type_faafd1d5_PMrawPath_pres_termination_proof(p_V0: ShStruct2[Ref, Ref])
{
  var $condInEx: Bool
  inhale acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), wildcard)
}

// decreases 
method PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_Len_faafd1d5_PMrawPath_Len_faafd1d5_SY$91c0a5f1_faafd1d5__proof_termination_proof(p_V0: ShStruct2[Ref, Ref])
  requires acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), wildcard)
{
  assert !true || true
}

// decreases 
method PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_Len_faafd1d5_PMrawPath_Len_faafd1d5_SY$91c0a5f1_faafd1d5__proof_pres_termination_proof(p_V0: ShStruct2[Ref, Ref])
{
  var $condInEx: Bool
  inhale acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), wildcard)
}

// decreases 
method DefinedlittleEndian_bf01f2a6_T$$$$_E_$$$_String_bf01f2a6_MlittleEndian_String_bf01f2a6_SY$55c5ed_bf01f2a6__proof_termination_proof(l_V0: Int)
{
  assert !true || true
}

// decreases 
method PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_GetUnderlyingBuf_faafd1d5_PMrawPath_GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5__proof_termination_proof(r_V0: ShStruct2[Ref, Ref])
  requires acc(dynamic_pred_1((tuple2((box_Poly(r_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), wildcard)
{
  assert !true || true
}

// decreases 
method PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_GetUnderlyingBuf_faafd1d5_PMrawPath_GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5__proof_pres_termination_proof(r_V0: ShStruct2[Ref, Ref])
{
  var $condInEx: Bool
  inhale acc(dynamic_pred_1((tuple2((box_Poly(r_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), wildcard)
}

// decreases 
method DefinedbigEndian_bf01f2a6_T$$$$_E_$$$_String_bf01f2a6_MbigEndian_String_bf01f2a6_SY$55c5ed_bf01f2a6__proof_termination_proof(b_V0: Int)
{
  assert !true || true
}

// decreases 
method PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_Type_faafd1d5_PMrawPath_Type_faafd1d5_SY$91c0a5f1_faafd1d5__proof_termination_proof(p_V0: ShStruct2[Ref, Ref])
  requires acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), wildcard)
{
  assert !true || true
}

// decreases 
method PointerDefinedrawPath_faafd1d5_T$$$_S_$$$$$$$_E_$$$_Type_faafd1d5_PMrawPath_Type_faafd1d5_SY$91c0a5f1_faafd1d5__proof_pres_termination_proof(p_V0: ShStruct2[Ref, Ref])
{
  var $condInEx: Bool
  inhale acc(dynamic_pred_1((tuple2((box_Poly(p_V0): Ref), pointer_Types(rawPath_faafd1d5_T_Types())): Tuple2[Ref, Types])), wildcard)
}

// decreases 
method Size_6f559e0_SY$353949c1_6f559e0__pres_termination_proof(thisItf: Tuple2[Ref, Types])
{
  var $condInEx: Bool
  if (!(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))) {
    inhale acc(Mem_6f559e0_SY$353949c1_6f559e0_(thisItf), wildcard)
  }
}

// decreases 
method Uint16_bf01f2a6_MlittleEndian_pres_termination_proof(e_V0: Int, b_V0: Slice[Ref])
{
  var $condInEx: Bool
  inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard)
  if (true) {
    inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard)
  }
}

// decreases 
method Uint32_bf01f2a6_MlittleEndian_pres_termination_proof(e_V0: Int, b_V0: Slice[Ref])
{
  var $condInEx: Bool
  inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard)
  if (true) {
    inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard)
  }
  if (true && true) {
    inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, wildcard)
  }
  if (true && true && true) {
    inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, wildcard)
  }
}

// decreases 
method Uint64_bf01f2a6_MlittleEndian_pres_termination_proof(e_V0: Int, b_V0: Slice[Ref])
{
  var $condInEx: Bool
  inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard)
  if (true) {
    inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard)
  }
  if (true && true) {
    inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, wildcard)
  }
  if (true && true && true) {
    inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, wildcard)
  }
  if (true && true && true && true) {
    inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref).val$_Int, wildcard)
    if (true) {
      inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref).val$_Int, wildcard)
    }
    if (true && true) {
      inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref).val$_Int, wildcard)
    }
    if (true && true && true) {
      inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref).val$_Int, wildcard)
    }
  }
}

// decreases 
method Uint16_bf01f2a6_MbigEndian_pres_termination_proof(e_V0: Int, b_V0: Slice[Ref])
{
  var $condInEx: Bool
  inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard)
  if (true) {
    inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard)
  }
}

// decreases 
method Uint32_bf01f2a6_MbigEndian_pres_termination_proof(e_V0: Int, b_V0: Slice[Ref])
{
  var $condInEx: Bool
  inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard)
  if (true) {
    inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard)
  }
  if (true && true) {
    inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, wildcard)
  }
  if (true && true && true) {
    inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, wildcard)
  }
}

// decreases 
method Uint64_bf01f2a6_MbigEndian_pres_termination_proof(e_V0: Int, b_V0: Slice[Ref])
{
  var $condInEx: Bool
  inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref).val$_Int, wildcard)
  if (true) {
    inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref).val$_Int, wildcard)
  }
  if (true && true) {
    inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref).val$_Int, wildcard)
  }
  if (true && true && true) {
    inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref).val$_Int, wildcard)
  }
  if (true && true && true && true) {
    inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref).val$_Int, wildcard)
    if (true) {
      inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref).val$_Int, wildcard)
    }
    if (true && true) {
      inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref).val$_Int, wildcard)
    }
    if (true && true && true) {
      inhale acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref).val$_Int, wildcard)
    }
  }
}

// decreases 
method Equal_c31aebe5_F_termination_proof(a_V0: Slice[Ref], b_V0: Slice[Ref])
  requires (forall i_V1: Int :: { (ShArrayloc((sarray(a_V0): ShArray[Ref]), sadd((soffset(a_V0): Int), i_V1)): Ref) } 0 <= i_V1 && i_V1 < (slen(a_V0): Int) ==> acc((ShArrayloc((sarray(a_V0): ShArray[Ref]), sadd((soffset(a_V0): Int), i_V1)): Ref).val$_Int, wildcard))
  requires (forall i_V2: Int :: { (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), i_V2)): Ref) } 0 <= i_V2 && i_V2 < (slen(b_V0): Int) ==> acc((ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), i_V2)): Ref).val$_Int, wildcard))
{
  assert !true || true
  assert !true || true
}

// decreases 
method String_bf01f2a6_SY$55c5ed_bf01f2a6__termination_proof(thisItf: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
{
  if (true) {
    assert !true || true
  } else {
    assert !true || true
    if (typeOfInterface_Y$55c5ed_bf01f2a6_(thisItf) == littleEndian_bf01f2a6_T_Types()) {
      assert !true || true
      assert !true || true
      assert !true || true
    } else {
      assert !true || true
      if (typeOfInterface_Y$55c5ed_bf01f2a6_(thisItf) == bigEndian_bf01f2a6_T_Types()) {
        assert !true || true
        assert !true || true
        assert !true || true
      } else {
        assert !true || true
      }
    }
  }
}

// decreases 
method String_bf01f2a6_SY$55c5ed_bf01f2a6__posts_termination_proof(thisItf: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
{
  var $result: Int
  if ((get1of2(thisItf): Types) == bigEndian_bf01f2a6_T_Types()) {
    assert !true || true
  }
  if (((get1of2(thisItf): Types) == bigEndian_bf01f2a6_T_Types() ==> $result == DefinedbigEndian_bf01f2a6_T$$$$_E_$$$_String_bf01f2a6_MbigEndian_String_bf01f2a6_SY$55c5ed_bf01f2a6__proof((unbox_Poly((get0of2(thisItf): Ref)): Int))) && (get1of2(thisItf): Types) == littleEndian_bf01f2a6_T_Types()) {
    assert !true || true
  }
}

// decreases 
method Len_faafd1d5_SY$91c0a5f1_faafd1d5__termination_proof(thisItf: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(dynamic_pred_1(thisItf), wildcard)
{
  if (true) {
    assert !true || true
  } else {
    assert !true || true
    if (typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf) == pointer_Types(rawPath_faafd1d5_T_Types())) {
      assert !true || true
      assert !true || true
      assert !true || true
    } else {
      assert !true || true
    }
  }
}

// decreases 
method Len_faafd1d5_SY$91c0a5f1_faafd1d5__posts_termination_proof(thisItf: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(dynamic_pred_1(thisItf), wildcard)
{
  var $result: Int
  if ((get1of2(thisItf): Types) == pointer_Types(rawPath_faafd1d5_T_Types())) {
    assert !true || true
  }
}

// decreases 
method Len_faafd1d5_SY$91c0a5f1_faafd1d5__pres_termination_proof(thisItf: Tuple2[Ref, Types])
{
  var $condInEx: Bool
  if (!(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))) {
    inhale acc(dynamic_pred_1(thisItf), wildcard)
  }
}

// decreases 
method GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5__termination_proof(thisItf: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(dynamic_pred_1(thisItf), wildcard)
{
  if (true) {
    assert !true || true
  } else {
    assert !true || true
    if (typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf) == pointer_Types(rawPath_faafd1d5_T_Types())) {
      assert !true || true
      assert !true || true
      assert !true || true
    } else {
      assert !true || true
    }
  }
}

// decreases 
method GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5__posts_termination_proof(thisItf: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(dynamic_pred_1(thisItf), wildcard)
{
  var $result: Slice[Ref]
  if ((get1of2(thisItf): Types) == pointer_Types(rawPath_faafd1d5_T_Types())) {
    assert !true || true
  }
}

// decreases 
method GetUnderlyingBuf_faafd1d5_SY$91c0a5f1_faafd1d5__pres_termination_proof(thisItf: Tuple2[Ref, Types])
{
  var $condInEx: Bool
  if (!(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))) {
    inhale acc(dynamic_pred_1(thisItf), wildcard)
  }
}

// decreases 
method Type_faafd1d5_SY$91c0a5f1_faafd1d5__termination_proof(thisItf: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(dynamic_pred_1(thisItf), wildcard)
{
  if (true) {
    assert !true || true
  } else {
    assert !true || true
    if (typeOfInterface_Y$91c0a5f1_faafd1d5_(thisItf) == pointer_Types(rawPath_faafd1d5_T_Types())) {
      assert !true || true
      assert !true || true
      assert !true || true
    } else {
      assert !true || true
    }
  }
}

// decreases 
method Type_faafd1d5_SY$91c0a5f1_faafd1d5__posts_termination_proof(thisItf: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(dynamic_pred_1(thisItf), wildcard)
{
  var $result: Int
  if ((get1of2(thisItf): Types) == pointer_Types(rawPath_faafd1d5_T_Types())) {
    assert !true || true
  }
}

// decreases 
method Type_faafd1d5_SY$91c0a5f1_faafd1d5__pres_termination_proof(thisItf: Tuple2[Ref, Types])
{
  var $condInEx: Bool
  if (!(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))) {
    inhale acc(dynamic_pred_1(thisItf), wildcard)
  }
}
